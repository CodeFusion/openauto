
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__generated_cmu_h__PROXY_MARSHAL_H
#define __dbusxx__generated_cmu_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace com {
namespace jci {

class xm_proxy
: public ::DBus::InterfaceProxy
{
public:

    xm_proxy()
    : ::DBus::InterfaceProxy("com.jci.xm")
    {
        connect_signal(xm_proxy, TunerStatus, _TunerStatus_stub);
        connect_signal(xm_proxy, MuteStatus, _MuteStatus_stub);
        connect_signal(xm_proxy, ChannelListUpdated, _ChannelListUpdated_stub);
        connect_signal(xm_proxy, AntennaStatus, _AntennaStatus_stub);
        connect_signal(xm_proxy, ParentalLockPin, _ParentalLockPin_stub);
        connect_signal(xm_proxy, DefaultParentalLockPin, _DefaultParentalLockPin_stub);
        connect_signal(xm_proxy, MetadataAvailable, _MetadataAvailable_stub);
        connect_signal(xm_proxy, MetadataChange, _MetadataChange_stub);
        connect_signal(xm_proxy, ModeStatus, _ModeStatus_stub);
        connect_signal(xm_proxy, ConfigStatus, _ConfigStatus_stub);
        connect_signal(xm_proxy, InstallStatus, _InstallStatus_stub);
    }
public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t GetModeStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetModeStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ModeChange(const int32_t& xm_mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << xm_mode;
        call.member("ModeChange");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t FavoriteModeChange(const int32_t& xm_mode, const uint8_t& tune_value_sid, const uint8_t& tune_value_ch)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << xm_mode;
        wi << tune_value_sid;
        wi << tune_value_ch;
        call.member("FavoriteModeChange");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TuneRelative(const int32_t& tune_direction, const uint8_t& tune_steps)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tune_direction;
        wi << tune_steps;
        call.member("TuneRelative");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TuneAbsolute(const uint8_t& tune_value_sid, const uint8_t& tune_value_ch)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tune_value_sid;
        wi << tune_value_ch;
        call.member("TuneAbsolute");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t MuteReq(const int32_t& mute_direction)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mute_direction;
        call.member("MuteReq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t IsParentalLockEnabled()
    {
        ::DBus::CallMessage call;
        call.member("IsParentalLockEnabled");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t IsParentalLockPINSet()
    {
        ::DBus::CallMessage call;
        call.member("IsParentalLockPINSet");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t IsChannelLocked(const uint8_t& channel_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << channel_id;
        call.member("IsChannelLocked");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetParentalLockPIN()
    {
        ::DBus::CallMessage call;
        call.member("GetParentalLockPIN");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetDefaultParentalLockPIN()
    {
        ::DBus::CallMessage call;
        call.member("GetDefaultParentalLockPIN");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetParentalLockPIN(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t >& parental_lock_pin)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << parental_lock_pin;
        call.member("SetParentalLockPIN");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetParentalLockStatus(const int32_t& parental_lock_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << parental_lock_status;
        call.member("SetParentalLockStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetChannelLock(const int32_t& channel_lock_status, const uint8_t& channel_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << channel_lock_status;
        wi << channel_id;
        call.member("SetChannelLock");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DisplayXMSettings()
    {
        ::DBus::CallMessage call;
        call.member("DisplayXMSettings");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ScanReq(const int32_t& scan_req_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << scan_req_type;
        call.member("ScanReq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetConfigStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetConfigStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Fav_Seek_Req(const int32_t& fav_seek_dir, const uint8_t& current_ch)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fav_seek_dir;
        wi << current_ch;
        call.member("Fav_Seek_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetInstallStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetInstallStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void TunerStatus(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, bool, std::vector< uint8_t >, int32_t >& tuner_status) = 0;
    virtual void MuteStatus(const int32_t& mute_direction) = 0;
    virtual void ChannelListUpdated(const uint8_t& channel_list_status) = 0;
    virtual void AntennaStatus(const ::DBus::Struct< uint8_t, uint8_t >& antenna_status) = 0;
    virtual void ParentalLockPin(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t >& parental_pin) = 0;
    virtual void DefaultParentalLockPin(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t >& default_parental_pin) = 0;
    virtual void MetadataAvailable(const int32_t& metadataType) = 0;
    virtual void MetadataChange(const ::DBus::Struct< bool, bool, bool, bool >& metadataStatus) = 0;
    virtual void ModeStatus(const int32_t& modeStatus) = 0;
    virtual void ConfigStatus(const int32_t& config_status) = 0;
    virtual void InstallStatus(const int32_t& install_status) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _TunerStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, bool, std::vector< uint8_t >, int32_t > tuner_status;
        ri >> tuner_status;
        TunerStatus(tuner_status);
    }
    void _MuteStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t mute_direction;
        ri >> mute_direction;
        MuteStatus(mute_direction);
    }
    void _ChannelListUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t channel_list_status;
        ri >> channel_list_status;
        ChannelListUpdated(channel_list_status);
    }
    void _AntennaStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t > antenna_status;
        ri >> antenna_status;
        AntennaStatus(antenna_status);
    }
    void _ParentalLockPin_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t > parental_pin;
        ri >> parental_pin;
        ParentalLockPin(parental_pin);
    }
    void _DefaultParentalLockPin_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t > default_parental_pin;
        ri >> default_parental_pin;
        DefaultParentalLockPin(default_parental_pin);
    }
    void _MetadataAvailable_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t metadataType;
        ri >> metadataType;
        MetadataAvailable(metadataType);
    }
    void _MetadataChange_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< bool, bool, bool, bool > metadataStatus;
        ri >> metadataStatus;
        MetadataChange(metadataStatus);
    }
    void _ModeStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t modeStatus;
        ri >> modeStatus;
        ModeStatus(modeStatus);
    }
    void _ConfigStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t config_status;
        ri >> config_status;
        ConfigStatus(config_status);
    }
    void _InstallStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t install_status;
        ri >> install_status;
        InstallStatus(install_status);
    }
};

} } 
namespace com {
namespace jci {
namespace UPDATES_Sys_Ipc {

class Interface_proxy
: public ::DBus::InterfaceProxy
{
public:

    Interface_proxy()
    : ::DBus::InterfaceProxy("com.jci.UPDATES_Sys_Ipc.Interface")
    {
        connect_signal(Interface_proxy, update_status_event, _update_status_event_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Connect(const uint32_t& in_connId, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_connId;
    }

    void Disconnect(const uint32_t& in_connId, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_connId;
    }

    void IsPresentFailSafeOS(const uint32_t& in_connId, bool& out_isPresent, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("IsPresentFailSafeOS");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_isPresent;
        ri >> out_result;
        ri >> out_connId;
    }

    void GetPackageInfo(const uint32_t& in_connId, const std::string& in_upLocation, std::string& out_name, int32_t& out_type, int32_t& out_subtype, std::string& out_version, bool& out_compatible, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        wi << in_upLocation;
        call.member("GetPackageInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_name;
        ri >> out_type;
        ri >> out_subtype;
        ri >> out_version;
        ri >> out_compatible;
        ri >> out_result;
        ri >> out_connId;
    }

    void ValidateUP(const uint32_t& in_connId, const std::string& in_upLocation, std::string& out_name, int32_t& out_type, int32_t& out_subtype, std::string& out_version, bool& out_compatible, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        wi << in_upLocation;
        call.member("ValidateUP");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_name;
        ri >> out_type;
        ri >> out_subtype;
        ri >> out_version;
        ri >> out_compatible;
        ri >> out_result;
        ri >> out_connId;
    }

    void CancelValidate(const uint32_t& in_connId, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("CancelValidate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_connId;
    }

    void InstallUP(const uint32_t& in_connId, const std::string& in_upLocation, const int32_t& in_installCtrlOpt, int32_t& out_result, int32_t& out_nextStepInfo_type, int32_t& out_nextStepInfo_subtype, int32_t& out_nextStepInfo_point, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        wi << in_upLocation;
        wi << in_installCtrlOpt;
        call.member("InstallUP");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_nextStepInfo_type;
        ri >> out_nextStepInfo_subtype;
        ri >> out_nextStepInfo_point;
        ri >> out_connId;
    }

    void CancelInstall(const uint32_t& in_connId, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("CancelInstall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_connId;
    }

    void GetUpdateStatus(const uint32_t& in_connId, int32_t& out_state, uint32_t& out_progress, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("GetUpdateStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_state;
        ri >> out_progress;
        ri >> out_result;
        ri >> out_connId;
    }


public:

    /* signal handlers for this interface
     */
    virtual void update_status_event(const int32_t& state, const uint32_t& progress, const int32_t& result, const uint32_t& connId) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _update_status_event_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t state;
        ri >> state;
        uint32_t progress;
        ri >> progress;
        int32_t result;
        ri >> result;
        uint32_t connId;
        ri >> connId;
        update_status_event(state, progress, result, connId);
    }
};

} } } 
namespace com {
namespace jci {
namespace UPDATEA_Sys_Ipc {

class Interface_proxy
: public ::DBus::InterfaceProxy
{
public:

    Interface_proxy()
    : ::DBus::InterfaceProxy("com.jci.UPDATEA_Sys_Ipc.Interface")
    {
        connect_signal(Interface_proxy, available_ups_event, _available_ups_event_stub);
        connect_signal(Interface_proxy, available_autoupdate_event, _available_autoupdate_event_stub);
        connect_signal(Interface_proxy, update_status_event, _update_status_event_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Connect(const uint32_t& in_connId, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_connId;
    }

    void Disconnect(const uint32_t& in_connId, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_connId;
    }

    void GetVersion(const uint32_t& in_connId, const int32_t& in_versionType, int32_t& out_versionType, std::string& out_version, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        wi << in_versionType;
        call.member("GetVersion");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_versionType;
        ri >> out_version;
        ri >> out_result;
        ri >> out_connId;
    }

    void IsPresentFailSafeOS(const uint32_t& in_connId, bool& out_isPresent, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("IsPresentFailSafeOS");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_isPresent;
        ri >> out_result;
        ri >> out_connId;
    }

    void SearchForAvailableUPs(const uint32_t& in_connId, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, int32_t, std::string > > >& out_packageInfo, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("SearchForAvailableUPs");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_packageInfo;
        ri >> out_result;
        ri >> out_connId;
    }

    void CancelSearchForUPs(const uint32_t& in_connId, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("CancelSearchForUPs");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_connId;
    }

    void ValidateAndDownloadUP(const uint32_t& in_connId, const std::string& in_upLocation, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        wi << in_upLocation;
        call.member("ValidateAndDownloadUP");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_connId;
    }

    void CancelValidAndDwnld(const uint32_t& in_connId, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("CancelValidAndDwnld");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_connId;
    }

    void InstallUP(const uint32_t& in_connId, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("InstallUP");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_connId;
    }

    void GetUpdateStatus(const uint32_t& in_connId, int32_t& out_state, uint32_t& out_progress, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("GetUpdateStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_state;
        ri >> out_progress;
        ri >> out_result;
        ri >> out_connId;
    }

    void RebootBoard(const uint32_t& in_connId, int32_t& out_result, uint32_t& out_connId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_connId;
        call.member("RebootBoard");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_connId;
    }


public:

    /* signal handlers for this interface
     */
    virtual void available_ups_event(const ::DBus::Struct< std::vector< ::DBus::Struct< std::string, int32_t, std::string > > >& packageInfo, const uint32_t& connId) = 0;
    virtual void available_autoupdate_event(const ::DBus::Struct< std::string, int32_t, std::string >& packageInfo, const uint32_t& connId) = 0;
    virtual void update_status_event(const int32_t& state, const uint32_t& progress, const int32_t& result, const uint32_t& connId) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _available_ups_event_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< ::DBus::Struct< std::string, int32_t, std::string > > > packageInfo;
        ri >> packageInfo;
        uint32_t connId;
        ri >> connId;
        available_ups_event(packageInfo, connId);
    }
    void _available_autoupdate_event_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::string, int32_t, std::string > packageInfo;
        ri >> packageInfo;
        uint32_t connId;
        ri >> connId;
        available_autoupdate_event(packageInfo, connId);
    }
    void _update_status_event_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t state;
        ri >> state;
        uint32_t progress;
        ri >> progress;
        int32_t result;
        ri >> result;
        uint32_t connId;
        ri >> connId;
        update_status_event(state, progress, result, connId);
    }
};

} } } 
namespace com {
namespace jci {

class itt_proxy
: public ::DBus::InterfaceProxy
{
public:

    itt_proxy()
    : ::DBus::InterfaceProxy("com.jci.itt")
    {
        connect_signal(itt_proxy, TaggingAvailable, _TaggingAvailable_stub);
        connect_signal(itt_proxy, TagTransfer, _TagTransfer_stub);
        connect_signal(itt_proxy, TaggingErrorDevice, _TaggingErrorDevice_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Struct< std::vector< ::DBus::Struct< int32_t, uint32_t, std::string > >, uint32_t > RequestMemoryInfo()
    {
        ::DBus::CallMessage call;
        call.member("RequestMemoryInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< std::vector< ::DBus::Struct< int32_t, uint32_t, std::string > >, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    void ProcessTag(int32_t& tagStoreStatus, ::DBus::Struct< std::vector< ::DBus::Struct< int32_t, uint32_t, std::string > >, uint32_t >& memInfo)
    {
        ::DBus::CallMessage call;
        call.member("ProcessTag");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> tagStoreStatus;
        ri >> memInfo;
    }

    int32_t GetTaggingAvailability()
    {
        ::DBus::CallMessage call;
        call.member("GetTaggingAvailability");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void TaggingAvailable(const int32_t& enableTagging) = 0;
    virtual void TagTransfer(const int32_t& tagTransferStatus, const ::DBus::Struct< std::vector< ::DBus::Struct< int32_t, uint32_t, std::string > >, uint32_t >& memInfo) = 0;
    virtual void TaggingErrorDevice(const int32_t& tagTransferStatus) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _TaggingAvailable_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t enableTagging;
        ri >> enableTagging;
        TaggingAvailable(enableTagging);
    }
    void _TagTransfer_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t tagTransferStatus;
        ri >> tagTransferStatus;
        ::DBus::Struct< std::vector< ::DBus::Struct< int32_t, uint32_t, std::string > >, uint32_t > memInfo;
        ri >> memInfo;
        TagTransfer(tagTransferStatus, memInfo);
    }
    void _TaggingErrorDevice_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t tagTransferStatus;
        ri >> tagTransferStatus;
        TaggingErrorDevice(tagTransferStatus);
    }
};

} } 
namespace com {
namespace jci {

class itts_proxy
: public ::DBus::InterfaceProxy
{
public:

    itts_proxy()
    : ::DBus::InterfaceProxy("com.jci.itts")
    {
        connect_signal(itts_proxy, AppleDevConnected, _AppleDevConnected_stub);
        connect_signal(itts_proxy, AppleDevDisconnected, _AppleDevDisconnected_stub);
        connect_signal(itts_proxy, TaggingAvailable, _TaggingAvailable_stub);
        connect_signal(itts_proxy, TaggingErrorDevice, _TaggingErrorDevice_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void RequestMemoryInfo(const ::DBus::Struct< std::vector< uint32_t > >& devIdList, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t, int32_t > >, uint32_t >& memoryInfo, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << devIdList;
        call.member("RequestMemoryInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> memoryInfo;
        ri >> return_value;
    }

    void StoreTag(const uint32_t& tagMaxCntFlash, const ::DBus::Struct< std::vector< uint32_t > >& devIdList, int32_t& tagStoreStatus, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t, int32_t > >, uint32_t >& memoryInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tagMaxCntFlash;
        wi << devIdList;
        call.member("StoreTag");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> tagStoreStatus;
        ri >> memoryInfo;
    }

    void TransferTag(const uint32_t& tagMaxCntiPod, const ::DBus::Struct< std::vector< uint32_t > >& devIdList, int32_t& tagTransferStatus, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t, uint32_t > >, uint32_t, uint32_t >& memoryInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tagMaxCntiPod;
        wi << devIdList;
        call.member("TransferTag");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> tagTransferStatus;
        ri >> memoryInfo;
    }

    int32_t RadioConnectionStatus(const uint8_t& connectStandbyStat)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connectStandbyStat;
        call.member("RadioConnectionStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RadioModeChange(const int32_t& modeChangeSrc)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << modeChangeSrc;
        call.member("RadioModeChange");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RadioOnOff(const uint8_t& radioOnOffStatus)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << radioOnOffStatus;
        call.member("RadioOnOff");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RadioStationChange(const uint16_t& frequency)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << frequency;
        call.member("RadioStationChange");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RadioTrackChange(const uint8_t& trackChange)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << trackChange;
        call.member("RadioTrackChange");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t UpdateMetadata(const ::DBus::Struct< std::vector< uint8_t > >& tagInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tagInfo;
        call.member("UpdateMetadata");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void ClearNVM(const uint32_t& tagsToClearCnt, uint32_t& tagsClearedCnt, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tagsToClearCnt;
        call.member("ClearNVM");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> tagsClearedCnt;
        ri >> return_value;
    }

    int32_t CheckConnDev()
    {
        ::DBus::CallMessage call;
        call.member("CheckConnDev");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void AppleDevConnected(const ::DBus::Struct< uint32_t, std::string, int32_t, uint32_t >& devConn, const bool& tagsNVM) = 0;
    virtual void AppleDevDisconnected(const int32_t& devId) = 0;
    virtual void TaggingAvailable(const int32_t& enableTagging) = 0;
    virtual void TaggingErrorDevice(const int32_t& tagTransferStatus) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _AppleDevConnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, std::string, int32_t, uint32_t > devConn;
        ri >> devConn;
        bool tagsNVM;
        ri >> tagsNVM;
        AppleDevConnected(devConn, tagsNVM);
    }
    void _AppleDevDisconnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t devId;
        ri >> devId;
        AppleDevDisconnected(devId);
    }
    void _TaggingAvailable_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t enableTagging;
        ri >> enableTagging;
        TaggingAvailable(enableTagging);
    }
    void _TaggingErrorDevice_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t tagTransferStatus;
        ri >> tagTransferStatus;
        TaggingErrorDevice(tagTransferStatus);
    }
};

} } 
namespace com {
namespace jci {

class idm_proxy
: public ::DBus::InterfaceProxy
{
public:

    idm_proxy()
    : ::DBus::InterfaceProxy("com.jci.idm")
    {
        connect_signal(idm_proxy, MeterAmbDisp_Rq_Rsp, _MeterAmbDisp_Rq_Rsp_stub);
        connect_signal(idm_proxy, IDM_EOLNormalScreen, _IDM_EOLNormalScreen_stub);
        connect_signal(idm_proxy, EOLEndingScrn, _EOLEndingScrn_stub);
        connect_signal(idm_proxy, Ending_Scrn_Setting, _Ending_Scrn_Setting_stub);
        connect_signal(idm_proxy, MeterAmb_Disp_Setting, _MeterAmb_Disp_Setting_stub);
        connect_signal(idm_proxy, Current_Score, _Current_Score_stub);
        connect_signal(idm_proxy, Average_Score, _Average_Score_stub);
        connect_signal(idm_proxy, Stage_Number, _Stage_Number_stub);
        connect_signal(idm_proxy, Driver_Data, _Driver_Data_stub);
        connect_signal(idm_proxy, TransitionGraph_Data, _TransitionGraph_Data_stub);
        connect_signal(idm_proxy, CurrentBarData, _CurrentBarData_stub);
        connect_signal(idm_proxy, CurrDrvTrend_Brake, _CurrDrvTrend_Brake_stub);
        connect_signal(idm_proxy, CurrDrvTrend_Accel, _CurrDrvTrend_Accel_stub);
        connect_signal(idm_proxy, CurrDrvTrend_Steer, _CurrDrvTrend_Steer_stub);
        connect_signal(idm_proxy, StageAchievedData, _StageAchievedData_stub);
        connect_signal(idm_proxy, DrivingAdviceId, _DrivingAdviceId_stub);
        connect_signal(idm_proxy, HVD_IDMMode, _HVD_IDMMode_stub);
        connect_signal(idm_proxy, HiScore_Counter, _HiScore_Counter_stub);
        connect_signal(idm_proxy, MeterAmbDisp_SetRq_Retry, _MeterAmbDisp_SetRq_Retry_stub);
        connect_signal(idm_proxy, End_Of_Screen_Data, _End_Of_Screen_Data_stub);
        connect_signal(idm_proxy, Display_EndScreen, _Display_EndScreen_stub);
        connect_signal(idm_proxy, SpeedRest_Flg, _SpeedRest_Flg_stub);
        connect_signal(idm_proxy, Ignition_Sts, _Ignition_Sts_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t Get_Config_Data()
    {
        ::DBus::CallMessage call;
        call.member("Get_Config_Data");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ACK_Config_Data_Recvd()
    {
        ::DBus::CallMessage call;
        call.member("ACK_Config_Data_Recvd");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t StopScreenData()
    {
        ::DBus::CallMessage call;
        call.member("StopScreenData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetNormalScreenData()
    {
        ::DBus::CallMessage call;
        call.member("GetNormalScreenData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTrainingScreenData()
    {
        ::DBus::CallMessage call;
        call.member("GetTrainingScreenData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetEndingScreenData()
    {
        ::DBus::CallMessage call;
        call.member("GetEndingScreenData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t EndingScreenSetting(const uint32_t& ending_scrn_sett)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ending_scrn_sett;
        call.member("EndingScreenSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t MeterAmbDispSetting(const uint32_t& meter_amb_sett)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << meter_amb_sett;
        call.member("MeterAmbDispSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void MeterAmbDisp_Rq_Rsp(const uint32_t& rq_rsp_status) = 0;
    virtual void IDM_EOLNormalScreen(const uint32_t& eol_normal) = 0;
    virtual void EOLEndingScrn(const uint32_t& eol_endscrn) = 0;
    virtual void Ending_Scrn_Setting(const uint32_t& endscrn_sett) = 0;
    virtual void MeterAmb_Disp_Setting(const uint32_t& amb_sett) = 0;
    virtual void Current_Score(const uint32_t& curr_score) = 0;
    virtual void Average_Score(const uint32_t& avg_score) = 0;
    virtual void Stage_Number(const uint32_t& stage_num) = 0;
    virtual void Driver_Data(const ::DBus::Struct< uint8_t, std::vector< uint8_t >, bool >& drv_data) = 0;
    virtual void TransitionGraph_Data(const ::DBus::Struct< std::vector< uint16_t >, uint8_t >& transGraph) = 0;
    virtual void CurrentBarData(const int32_t& curr_bar_val) = 0;
    virtual void CurrDrvTrend_Brake(const ::DBus::Struct< uint8_t, uint8_t >& curr_brk) = 0;
    virtual void CurrDrvTrend_Accel(const ::DBus::Struct< uint8_t, uint8_t >& curr_accel) = 0;
    virtual void CurrDrvTrend_Steer(const ::DBus::Struct< uint8_t, uint8_t >& curr_steer) = 0;
    virtual void StageAchievedData(const ::DBus::Struct< uint8_t, bool >& stage_data) = 0;
    virtual void DrivingAdviceId(const uint32_t& drv_adviceId) = 0;
    virtual void HVD_IDMMode(const uint32_t& idm_mode) = 0;
    virtual void HiScore_Counter(const uint32_t& hi_score_val) = 0;
    virtual void MeterAmbDisp_SetRq_Retry(const uint32_t& setrq_retry) = 0;
    virtual void End_Of_Screen_Data(const uint32_t& scrn_type) = 0;
    virtual void Display_EndScreen(const uint32_t& disp_endscrn) = 0;
    virtual void SpeedRest_Flg(const uint32_t& spd_flg) = 0;
    virtual void Ignition_Sts(const uint32_t& ign_sts) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _MeterAmbDisp_Rq_Rsp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t rq_rsp_status;
        ri >> rq_rsp_status;
        MeterAmbDisp_Rq_Rsp(rq_rsp_status);
    }
    void _IDM_EOLNormalScreen_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t eol_normal;
        ri >> eol_normal;
        IDM_EOLNormalScreen(eol_normal);
    }
    void _EOLEndingScrn_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t eol_endscrn;
        ri >> eol_endscrn;
        EOLEndingScrn(eol_endscrn);
    }
    void _Ending_Scrn_Setting_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t endscrn_sett;
        ri >> endscrn_sett;
        Ending_Scrn_Setting(endscrn_sett);
    }
    void _MeterAmb_Disp_Setting_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t amb_sett;
        ri >> amb_sett;
        MeterAmb_Disp_Setting(amb_sett);
    }
    void _Current_Score_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t curr_score;
        ri >> curr_score;
        Current_Score(curr_score);
    }
    void _Average_Score_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t avg_score;
        ri >> avg_score;
        Average_Score(avg_score);
    }
    void _Stage_Number_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t stage_num;
        ri >> stage_num;
        Stage_Number(stage_num);
    }
    void _Driver_Data_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< uint8_t >, bool > drv_data;
        ri >> drv_data;
        Driver_Data(drv_data);
    }
    void _TransitionGraph_Data_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint16_t >, uint8_t > transGraph;
        ri >> transGraph;
        TransitionGraph_Data(transGraph);
    }
    void _CurrentBarData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t curr_bar_val;
        ri >> curr_bar_val;
        CurrentBarData(curr_bar_val);
    }
    void _CurrDrvTrend_Brake_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t > curr_brk;
        ri >> curr_brk;
        CurrDrvTrend_Brake(curr_brk);
    }
    void _CurrDrvTrend_Accel_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t > curr_accel;
        ri >> curr_accel;
        CurrDrvTrend_Accel(curr_accel);
    }
    void _CurrDrvTrend_Steer_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t > curr_steer;
        ri >> curr_steer;
        CurrDrvTrend_Steer(curr_steer);
    }
    void _StageAchievedData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, bool > stage_data;
        ri >> stage_data;
        StageAchievedData(stage_data);
    }
    void _DrivingAdviceId_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t drv_adviceId;
        ri >> drv_adviceId;
        DrivingAdviceId(drv_adviceId);
    }
    void _HVD_IDMMode_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t idm_mode;
        ri >> idm_mode;
        HVD_IDMMode(idm_mode);
    }
    void _HiScore_Counter_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t hi_score_val;
        ri >> hi_score_val;
        HiScore_Counter(hi_score_val);
    }
    void _MeterAmbDisp_SetRq_Retry_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t setrq_retry;
        ri >> setrq_retry;
        MeterAmbDisp_SetRq_Retry(setrq_retry);
    }
    void _End_Of_Screen_Data_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t scrn_type;
        ri >> scrn_type;
        End_Of_Screen_Data(scrn_type);
    }
    void _Display_EndScreen_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t disp_endscrn;
        ri >> disp_endscrn;
        Display_EndScreen(disp_endscrn);
    }
    void _SpeedRest_Flg_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t spd_flg;
        ri >> spd_flg;
        SpeedRest_Flg(spd_flg);
    }
    void _Ignition_Sts_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t ign_sts;
        ri >> ign_sts;
        Ignition_Sts(ign_sts);
    }
};

} } 
namespace com {
namespace NNG {
namespace Api {

class Client_proxy
: public ::DBus::InterfaceProxy
{
public:

    Client_proxy()
    : ::DBus::InterfaceProxy("com.NNG.Api.Client")
    {
        connect_signal(Client_proxy, DBusClientStarted, _DBusClientStarted_stub);
        connect_signal(Client_proxy, DBusClientStopped, _DBusClientStopped_stub);
        connect_signal(Client_proxy, ReadyToDie, _ReadyToDie_stub);
        connect_signal(Client_proxy, HeartBeat, _HeartBeat_stub);
        connect_signal(Client_proxy, SDCardSeemsOK, _SDCardSeemsOK_stub);
        connect_signal(Client_proxy, SDCardProblem, _SDCardProblem_stub);
        connect_signal(Client_proxy, InternalFileError, _InternalFileError_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */

public:

    /* signal handlers for this interface
     */
    virtual void DBusClientStarted() = 0;
    virtual void DBusClientStopped() = 0;
    virtual void ReadyToDie() = 0;
    virtual void HeartBeat() = 0;
    virtual void SDCardSeemsOK() = 0;
    virtual void SDCardProblem(const std::string& description, const int32_t& problemType, const int32_t& restartInfo) = 0;
    virtual void InternalFileError(const std::string& description) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _DBusClientStarted_stub(const ::DBus::SignalMessage &sig)
    {
        DBusClientStarted();
    }
    void _DBusClientStopped_stub(const ::DBus::SignalMessage &sig)
    {
        DBusClientStopped();
    }
    void _ReadyToDie_stub(const ::DBus::SignalMessage &sig)
    {
        ReadyToDie();
    }
    void _HeartBeat_stub(const ::DBus::SignalMessage &sig)
    {
        HeartBeat();
    }
    void _SDCardSeemsOK_stub(const ::DBus::SignalMessage &sig)
    {
        SDCardSeemsOK();
    }
    void _SDCardProblem_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string description;
        ri >> description;
        int32_t problemType;
        ri >> problemType;
        int32_t restartInfo;
        ri >> restartInfo;
        SDCardProblem(description, problemType, restartInfo);
    }
    void _InternalFileError_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string description;
        ri >> description;
        InternalFileError(description);
    }
};

} } } 
namespace com {
namespace jci {

class tv_proxy
: public ::DBus::InterfaceProxy
{
public:

    tv_proxy()
    : ::DBus::InterfaceProxy("com.jci.tv")
    {
        connect_signal(tv_proxy, TvEvent, _TvEvent_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint32_t SourceSelect()
    {
        ::DBus::CallMessage call;
        call.member("SourceSelect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void UIStatus(const uint32_t& uiStatusUpdate)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << uiStatusUpdate;
        call.member("UIStatus");
        ::DBus::Message ret = invoke_method (call);
    }

    void EmBroControl(const uint32_t& emBroOption)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << emBroOption;
        call.member("EmBroControl");
        ::DBus::Message ret = invoke_method (call);
    }

    ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t > handShakeRequest()
    {
        ::DBus::CallMessage call;
        call.member("handShakeRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void TvEvent(const uint32_t& eventId) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _TvEvent_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t eventId;
        ri >> eventId;
        TvEvent(eventId);
    }
};

} } 
namespace com {
namespace jci {

class usbms_proxy
: public ::DBus::InterfaceProxy
{
public:

    usbms_proxy()
    : ::DBus::InterfaceProxy("com.jci.usbms")
    {
        connect_signal(usbms_proxy, StorageAttached, _StorageAttached_stub);
        connect_signal(usbms_proxy, StorageDetached, _StorageDetached_stub);
        connect_signal(usbms_proxy, SyncEvent, _SyncEvent_stub);
        connect_signal(usbms_proxy, DbUpdate, _DbUpdate_stub);
        connect_signal(usbms_proxy, TrackChanged, _TrackChanged_stub);
        connect_signal(usbms_proxy, PlayComplete, _PlayComplete_stub);
        connect_signal(usbms_proxy, PlaybackTime, _PlaybackTime_stub);
        connect_signal(usbms_proxy, DeviceError, _DeviceError_stub);
        connect_signal(usbms_proxy, PlayerStateChanged, _PlayerStateChanged_stub);
        connect_signal(usbms_proxy, PlaybackSettingsChanged, _PlaybackSettingsChanged_stub);
        connect_signal(usbms_proxy, AlbumArtReady, _AlbumArtReady_stub);
        connect_signal(usbms_proxy, Ping, _Ping_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< std::string, uint32_t, int32_t > >, uint32_t > BrowseContext(const ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< int32_t, uint32_t, uint32_t, uint32_t, int32_t > > >, std::string, uint32_t, uint32_t >& browseContext)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << browseContext;
        call.member("BrowseContext");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< std::string, uint32_t, int32_t > >, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t, std::string, std::string, uint32_t > GetBrowseFolderInfo(const ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< int32_t, uint32_t, uint32_t, uint32_t, int32_t > > >, uint32_t >& getBrowseFolderInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << getBrowseFolderInfo;
        call.member("GetBrowseFolderInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t, std::string, std::string, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > PauseResume(const ::DBus::Struct< uint32_t >& pauseResume)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pauseResume;
        call.member("PauseResume");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< ::DBus::Struct< int32_t, uint32_t, uint32_t, uint32_t, int32_t >, int32_t, int32_t, int32_t, std::string, std::string, uint32_t, ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, ::DBus::Struct< uint32_t, uint32_t >, uint32_t > PlayResume(const ::DBus::Struct< uint32_t, int32_t >& playResume)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << playResume;
        call.member("PlayResume");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< ::DBus::Struct< int32_t, uint32_t, uint32_t, uint32_t, int32_t >, int32_t, int32_t, int32_t, std::string, std::string, uint32_t, ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, ::DBus::Struct< uint32_t, uint32_t >, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t, int32_t, int32_t, std::string, std::string, uint32_t, ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, ::DBus::Struct< uint32_t, uint32_t >, int32_t > PlayContext(const ::DBus::Struct< uint32_t, ::DBus::Struct< int32_t, uint32_t, uint32_t, uint32_t, int32_t >, std::string, uint32_t >& playContext)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << playContext;
        call.member("PlayContext");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, int32_t, int32_t, std::string, std::string, uint32_t, ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, ::DBus::Struct< uint32_t, uint32_t >, int32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > StopPlayback(const ::DBus::Struct< uint32_t >& stopPlayback)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << stopPlayback;
        call.member("StopPlayback");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< std::string, uint32_t, uint32_t > GetAlbumArt(const ::DBus::Struct< uint32_t, uint32_t >& getAlbumArt)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << getAlbumArt;
        call.member("GetAlbumArt");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< std::string, uint32_t, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t > PlayerSeek(const ::DBus::Struct< uint32_t, int32_t, uint32_t >& playerSeek)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << playerSeek;
        call.member("PlayerSeek");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t > PlayTrackControl(const ::DBus::Struct< uint32_t, int32_t, uint32_t >& playTrackCtrl)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << playTrackCtrl;
        call.member("PlayTrackControl");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t > SetPlayerSettings(const ::DBus::Struct< uint32_t, int32_t, int32_t >& setPlayerSettings)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setPlayerSettings;
        call.member("SetPlayerSettings");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t, std::string, std::string, int32_t, int32_t, ::DBus::Struct< std::vector< ::DBus::Struct< ::DBus::Struct< uint32_t, int32_t, int32_t, uint32_t, uint32_t >, uint32_t > >, uint32_t > > > > GetStorageDevicesList()
    {
        ::DBus::CallMessage call;
        call.member("GetStorageDevicesList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t, std::string, std::string, int32_t, int32_t, ::DBus::Struct< std::vector< ::DBus::Struct< ::DBus::Struct< uint32_t, int32_t, int32_t, uint32_t, uint32_t >, uint32_t > >, uint32_t > > > > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, int32_t > GetPlayTrackInfo()
    {
        ::DBus::CallMessage call;
        call.member("GetPlayTrackInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, int32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< ::DBus::Struct< int32_t, uint32_t, uint32_t, uint32_t, int32_t >, std::string, uint32_t > MoreLikeThis(const ::DBus::Struct< uint32_t >& moreLikeThis)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << moreLikeThis;
        call.member("MoreLikeThis");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< ::DBus::Struct< int32_t, uint32_t, uint32_t, uint32_t, int32_t >, std::string, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< ::DBus::Struct< std::vector< ::DBus::Struct< std::string, uint32_t, std::string, uint32_t, std::string, uint32_t, std::string, uint32_t > > >, uint32_t > GetSongsInfoList(const ::DBus::Struct< uint32_t, uint32_t, uint32_t >& getSongsInfoList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << getSongsInfoList;
        call.member("GetSongsInfoList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< ::DBus::Struct< std::vector< ::DBus::Struct< std::string, uint32_t, std::string, uint32_t, std::string, uint32_t, std::string, uint32_t > > >, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t > SetLanguage(const ::DBus::Struct< uint32_t >& setLanguage)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setLanguage;
        call.member("SetLanguage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, int32_t, std::string > > > GetAlphabet(const ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< int32_t, uint32_t, uint32_t, uint32_t, int32_t > > > >& getAlphabet)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << getAlphabet;
        call.member("GetAlphabet");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, int32_t, std::string > > > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint64_t, uint64_t, uint32_t, uint16_t, uint8_t, uint8_t, uint32_t > GetTaggingInfo(const ::DBus::Struct< uint32_t >& getTaggingInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << getTaggingInfo;
        call.member("GetTaggingInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint64_t, uint64_t, uint32_t, uint16_t, uint8_t, uint8_t, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > iPodSendTag(const ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< uint8_t > >, uint16_t >& iPodSendTag)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << iPodSendTag;
        call.member("iPodSendTag");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t > SaveData()
    {
        ::DBus::CallMessage call;
        call.member("SaveData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void StorageAttached(const ::DBus::Struct< ::DBus::Struct< uint32_t, uint32_t, std::string, std::string, int32_t, int32_t, ::DBus::Struct< std::vector< ::DBus::Struct< ::DBus::Struct< uint32_t, int32_t, int32_t, uint32_t, uint32_t >, uint32_t > >, uint32_t > >, uint32_t >& storageAttached) = 0;
    virtual void StorageDetached(const ::DBus::Struct< uint32_t >& storageDetached) = 0;
    virtual void SyncEvent(const ::DBus::Struct< uint32_t, int32_t, int32_t, uint32_t, uint32_t >& syncEvent) = 0;
    virtual void DbUpdate(const ::DBus::Struct< uint32_t, int32_t, uint32_t >& dbUpdate) = 0;
    virtual void TrackChanged(const ::DBus::Struct< uint32_t, std::string, std::string, uint32_t, ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, ::DBus::Struct< uint32_t, uint32_t > >& trackChanged) = 0;
    virtual void PlayComplete(const ::DBus::Struct< int32_t >& playComplete) = 0;
    virtual void PlaybackTime(const ::DBus::Struct< uint32_t, uint32_t >& playbackTime) = 0;
    virtual void DeviceError(const ::DBus::Struct< uint32_t, int32_t >& deviceError) = 0;
    virtual void PlayerStateChanged(const ::DBus::Struct< uint32_t, int32_t, int32_t, std::string, std::string, uint32_t, ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, ::DBus::Struct< uint32_t, uint32_t > >& playerStateChanged) = 0;
    virtual void PlaybackSettingsChanged(const ::DBus::Struct< uint32_t, int32_t, int32_t >& playbackSettingsChanged) = 0;
    virtual void AlbumArtReady(const ::DBus::Struct< uint32_t >& albumArtReady) = 0;
    virtual void Ping() = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _StorageAttached_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< ::DBus::Struct< uint32_t, uint32_t, std::string, std::string, int32_t, int32_t, ::DBus::Struct< std::vector< ::DBus::Struct< ::DBus::Struct< uint32_t, int32_t, int32_t, uint32_t, uint32_t >, uint32_t > >, uint32_t > >, uint32_t > storageAttached;
        ri >> storageAttached;
        StorageAttached(storageAttached);
    }
    void _StorageDetached_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t > storageDetached;
        ri >> storageDetached;
        StorageDetached(storageDetached);
    }
    void _SyncEvent_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, int32_t, int32_t, uint32_t, uint32_t > syncEvent;
        ri >> syncEvent;
        SyncEvent(syncEvent);
    }
    void _DbUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, int32_t, uint32_t > dbUpdate;
        ri >> dbUpdate;
        DbUpdate(dbUpdate);
    }
    void _TrackChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, std::string, std::string, uint32_t, ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, ::DBus::Struct< uint32_t, uint32_t > > trackChanged;
        ri >> trackChanged;
        TrackChanged(trackChanged);
    }
    void _PlayComplete_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t > playComplete;
        ri >> playComplete;
        PlayComplete(playComplete);
    }
    void _PlaybackTime_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > playbackTime;
        ri >> playbackTime;
        PlaybackTime(playbackTime);
    }
    void _DeviceError_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, int32_t > deviceError;
        ri >> deviceError;
        DeviceError(deviceError);
    }
    void _PlayerStateChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, int32_t, int32_t, std::string, std::string, uint32_t, ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, ::DBus::Struct< uint32_t, uint32_t > > playerStateChanged;
        ri >> playerStateChanged;
        PlayerStateChanged(playerStateChanged);
    }
    void _PlaybackSettingsChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, int32_t, int32_t > playbackSettingsChanged;
        ri >> playbackSettingsChanged;
        PlaybackSettingsChanged(playbackSettingsChanged);
    }
    void _AlbumArtReady_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t > albumArtReady;
        ri >> albumArtReady;
        AlbumArtReady(albumArtReady);
    }
    void _Ping_stub(const ::DBus::SignalMessage &sig)
    {
        Ping();
    }
};

} } 
namespace com {
namespace jci {

class usbm_proxy
: public ::DBus::InterfaceProxy
{
public:

    usbm_proxy()
    : ::DBus::InterfaceProxy("com.jci.usbm")
    {
        connect_signal(usbm_proxy, DeviceConnected, _DeviceConnected_stub);
        connect_signal(usbm_proxy, DeviceDisconnected, _DeviceDisconnected_stub);
        connect_signal(usbm_proxy, UpdateDeviceInfo, _UpdateDeviceInfo_stub);
        connect_signal(usbm_proxy, PlayComplete, _PlayComplete_stub);
        connect_signal(usbm_proxy, DeviceSelected, _DeviceSelected_stub);
        connect_signal(usbm_proxy, MetadataBrowsingPossible, _MetadataBrowsingPossible_stub);
        connect_signal(usbm_proxy, MltPossible, _MltPossible_stub);
        connect_signal(usbm_proxy, PlaybackPossible, _PlaybackPossible_stub);
        connect_signal(usbm_proxy, FolderBrowsingPossible, _FolderBrowsingPossible_stub);
        connect_signal(usbm_proxy, DeviceError, _DeviceError_stub);
        connect_signal(usbm_proxy, PlaybackInfo, _PlaybackInfo_stub);
        connect_signal(usbm_proxy, DbUpdate, _DbUpdate_stub);
        connect_signal(usbm_proxy, AlbumArtReady, _AlbumArtReady_stub);
        connect_signal(usbm_proxy, CurrentObjectInfo, _CurrentObjectInfo_stub);
        connect_signal(usbm_proxy, PlaybackInterrupted, _PlaybackInterrupted_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Struct< std::string, uint32_t, uint32_t > GetAlbumArt(const ::DBus::Struct< uint32_t, uint32_t >& album_art)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << album_art;
        call.member("GetAlbumArt");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< std::string, uint32_t, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t, uint32_t > SelectDevice(const ::DBus::Struct< uint32_t >& select_device)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << select_device;
        call.member("SelectDevice");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    int32_t PlaybackCommand(const ::DBus::Struct< uint32_t, uint32_t, uint32_t >& playback_command)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << playback_command;
        call.member("PlaybackCommand");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< ::DBus::Struct< int32_t, uint32_t, uint32_t, uint32_t, int32_t >, uint32_t, uint32_t, std::string, uint32_t > PlayResume(const ::DBus::Struct< uint32_t, uint32_t >& play_resume)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << play_resume;
        call.member("PlayResume");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< ::DBus::Struct< int32_t, uint32_t, uint32_t, uint32_t, int32_t >, uint32_t, uint32_t, std::string, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t, uint32_t, uint32_t > PlayContext(const ::DBus::Struct< uint32_t, ::DBus::Struct< int32_t, uint32_t, uint32_t, uint32_t, int32_t >, std::string, uint32_t >& play_context)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << play_context;
        call.member("PlayContext");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    int32_t SetRepeatMode(const uint32_t& dev_id, const uint32_t& repeat_mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dev_id;
        wi << repeat_mode;
        call.member("SetRepeatMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetShuffleMode(const uint32_t& dev_id, const uint32_t& shuffle_mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dev_id;
        wi << shuffle_mode;
        call.member("SetShuffleMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetDeviceList(::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t, std::string, uint32_t, uint32_t, bool, bool, bool, uint32_t, uint32_t, std::string, std::string > > >& device_list, int32_t& result)
    {
        ::DBus::CallMessage call;
        call.member("GetDeviceList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> device_list;
        ri >> result;
    }

    void GetCurrentObjectInfo(::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >& obj_info, int32_t& result)
    {
        ::DBus::CallMessage call;
        call.member("GetCurrentObjectInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> obj_info;
        ri >> result;
    }

    int32_t StartSeeking(const uint32_t& dev_id, const uint32_t& sec_step, const uint32_t& seek_dir)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dev_id;
        wi << sec_step;
        wi << seek_dir;
        call.member("StartSeeking");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PlaybackJumpToPosition(const uint32_t& dev_id, const uint32_t& new_pb_position)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dev_id;
        wi << new_pb_position;
        call.member("PlaybackJumpToPosition");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< std::string, uint32_t > MoreLikeThis(const uint32_t& device_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device_id;
        call.member("MoreLikeThis");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< std::string, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    int32_t SetLanguage(const int32_t& sys_lang)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sys_lang;
        call.member("SetLanguage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void DeviceConnected(const ::DBus::Struct< uint32_t, uint32_t, std::string, uint32_t, uint32_t, bool, bool, bool, uint32_t, uint32_t, std::string, std::string >& dev_inf) = 0;
    virtual void DeviceDisconnected(const uint32_t& dev_id, const int32_t& reason) = 0;
    virtual void UpdateDeviceInfo(const ::DBus::Struct< uint32_t, uint32_t, std::string, uint32_t, uint32_t, bool, bool, bool, uint32_t, uint32_t, std::string, std::string >& dev_inf) = 0;
    virtual void PlayComplete(const uint32_t& reason) = 0;
    virtual void DeviceSelected(const uint32_t& dev_id, const int32_t& err_type) = 0;
    virtual void MetadataBrowsingPossible(const ::DBus::Struct< uint32_t, uint32_t, std::string, uint32_t, bool, bool >& filenum_updated_dev_info) = 0;
    virtual void MltPossible(const ::DBus::Struct< uint32_t, uint32_t, std::string, uint32_t >& updated_dev_info) = 0;
    virtual void PlaybackPossible(const ::DBus::Struct< uint32_t, uint32_t, std::string, uint32_t, bool, bool >& filenum_updated_dev_info) = 0;
    virtual void FolderBrowsingPossible(const ::DBus::Struct< uint32_t, uint32_t, std::string, uint32_t >& updated_dev_info) = 0;
    virtual void DeviceError(const ::DBus::Struct< uint32_t, uint32_t >& device_error) = 0;
    virtual void PlaybackInfo(const ::DBus::Struct< uint32_t, uint32_t, uint32_t, std::string, std::string, uint32_t, ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, uint32_t, uint32_t, uint32_t, bool >& playback_info) = 0;
    virtual void DbUpdate(const ::DBus::Struct< uint32_t, uint32_t, uint32_t >& dbupdate) = 0;
    virtual void AlbumArtReady(const ::DBus::Struct< uint32_t >& album_art_ready) = 0;
    virtual void CurrentObjectInfo(const ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >& obj_info) = 0;
    virtual void PlaybackInterrupted(const ::DBus::Struct< ::DBus::Struct< uint32_t, uint32_t, uint32_t, std::string, std::string, uint32_t, ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, uint32_t, uint32_t, uint32_t, bool >, uint32_t >& playback_interrupted_info) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _DeviceConnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, std::string, uint32_t, uint32_t, bool, bool, bool, uint32_t, uint32_t, std::string, std::string > dev_inf;
        ri >> dev_inf;
        DeviceConnected(dev_inf);
    }
    void _DeviceDisconnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t dev_id;
        ri >> dev_id;
        int32_t reason;
        ri >> reason;
        DeviceDisconnected(dev_id, reason);
    }
    void _UpdateDeviceInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, std::string, uint32_t, uint32_t, bool, bool, bool, uint32_t, uint32_t, std::string, std::string > dev_inf;
        ri >> dev_inf;
        UpdateDeviceInfo(dev_inf);
    }
    void _PlayComplete_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t reason;
        ri >> reason;
        PlayComplete(reason);
    }
    void _DeviceSelected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t dev_id;
        ri >> dev_id;
        int32_t err_type;
        ri >> err_type;
        DeviceSelected(dev_id, err_type);
    }
    void _MetadataBrowsingPossible_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, std::string, uint32_t, bool, bool > filenum_updated_dev_info;
        ri >> filenum_updated_dev_info;
        MetadataBrowsingPossible(filenum_updated_dev_info);
    }
    void _MltPossible_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, std::string, uint32_t > updated_dev_info;
        ri >> updated_dev_info;
        MltPossible(updated_dev_info);
    }
    void _PlaybackPossible_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, std::string, uint32_t, bool, bool > filenum_updated_dev_info;
        ri >> filenum_updated_dev_info;
        PlaybackPossible(filenum_updated_dev_info);
    }
    void _FolderBrowsingPossible_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, std::string, uint32_t > updated_dev_info;
        ri >> updated_dev_info;
        FolderBrowsingPossible(updated_dev_info);
    }
    void _DeviceError_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > device_error;
        ri >> device_error;
        DeviceError(device_error);
    }
    void _PlaybackInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t, std::string, std::string, uint32_t, ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, uint32_t, uint32_t, uint32_t, bool > playback_info;
        ri >> playback_info;
        PlaybackInfo(playback_info);
    }
    void _DbUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t > dbupdate;
        ri >> dbupdate;
        DbUpdate(dbupdate);
    }
    void _AlbumArtReady_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t > album_art_ready;
        ri >> album_art_ready;
        AlbumArtReady(album_art_ready);
    }
    void _CurrentObjectInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string > obj_info;
        ri >> obj_info;
        CurrentObjectInfo(obj_info);
    }
    void _PlaybackInterrupted_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< ::DBus::Struct< uint32_t, uint32_t, uint32_t, std::string, std::string, uint32_t, ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string >, uint32_t, uint32_t, uint32_t, bool >, uint32_t > playback_interrupted_info;
        ri >> playback_interrupted_info;
        PlaybackInterrupted(playback_interrupted_info);
    }
};

} } 
namespace com {
namespace jci {

class btmusic_proxy
: public ::DBus::InterfaceProxy
{
public:

    btmusic_proxy()
    : ::DBus::InterfaceProxy("com.jci.btmusic")
    {
        connect_signal(btmusic_proxy, StreamingStatus, _StreamingStatus_stub);
        connect_signal(btmusic_proxy, StreamingAudioCmdStatus, _StreamingAudioCmdStatus_stub);
        connect_signal(btmusic_proxy, StreamingPlayerStatus, _StreamingPlayerStatus_stub);
        connect_signal(btmusic_proxy, TrackInformation, _TrackInformation_stub);
        connect_signal(btmusic_proxy, DeviceBatteryIndicator, _DeviceBatteryIndicator_stub);
        connect_signal(btmusic_proxy, BusyReason, _BusyReason_stub);
        connect_signal(btmusic_proxy, TrackChangeIndicator, _TrackChangeIndicator_stub);
        connect_signal(btmusic_proxy, TrackPositionIndicator, _TrackPositionIndicator_stub);
        connect_signal(btmusic_proxy, NowPlayingChangeIndicator, _NowPlayingChangeIndicator_stub);
        connect_signal(btmusic_proxy, SettingsStatus, _SettingsStatus_stub);
        connect_signal(btmusic_proxy, PlayerSettingsInfo, _PlayerSettingsInfo_stub);
        connect_signal(btmusic_proxy, FolderBrowseItemTitleResponse, _FolderBrowseItemTitleResponse_stub);
        connect_signal(btmusic_proxy, BrowseNowPlayingTitleResponse, _BrowseNowPlayingTitleResponse_stub);
        connect_signal(btmusic_proxy, BrowseFolderResponse, _BrowseFolderResponse_stub);
        connect_signal(btmusic_proxy, BrowseStatus, _BrowseStatus_stub);
        connect_signal(btmusic_proxy, BrowseConnStatus, _BrowseConnStatus_stub);
        connect_signal(btmusic_proxy, NowPlayingInfo, _NowPlayingInfo_stub);
        connect_signal(btmusic_proxy, MusicProfileSupported, _MusicProfileSupported_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t StartStreaming()
    {
        ::DBus::CallMessage call;
        call.member("StartStreaming");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t StopStreaming()
    {
        ::DBus::CallMessage call;
        call.member("StopStreaming");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t StreamingAudioCmd(const uint32_t& commandType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << commandType;
        call.member("StreamingAudioCmd");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTrackInfo()
    {
        ::DBus::CallMessage call;
        call.member("GetTrackInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t BrowseFolderUp(const uint32_t& folderType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << folderType;
        call.member("BrowseFolderUp");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t BrowseFolderDown(const uint32_t& index)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << index;
        call.member("BrowseFolderDown");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetBrowseItemTitleForFolder(const uint32_t& itemStartIndex, const uint32_t& itemEndIndex, const uint32_t& requestedPage)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << itemStartIndex;
        wi << itemEndIndex;
        wi << requestedPage;
        call.member("GetBrowseItemTitleForFolder");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetNowPlayListTitleForFile(const uint32_t& itemStartIndex, const uint32_t& itemEndIndex, const uint32_t& requestedPage)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << itemStartIndex;
        wi << itemEndIndex;
        wi << requestedPage;
        call.member("GetNowPlayListTitleForFile");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PlayBrowseItem(const uint32_t& playScope, const uint32_t& playItemId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << playScope;
        wi << playItemId;
        call.member("PlayBrowseItem");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetLanguage(const int32_t& sys_lang)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sys_lang;
        call.member("SetLanguage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void StreamingStatus(const uint32_t& streamStatus) = 0;
    virtual void StreamingAudioCmdStatus(const uint32_t& commandType, const uint32_t& commandStatus) = 0;
    virtual void StreamingPlayerStatus(const uint32_t& playerStatus, const uint32_t& reason) = 0;
    virtual void TrackInformation(const ::DBus::Struct< std::vector< uint8_t > >& trackInfo) = 0;
    virtual void DeviceBatteryIndicator(const uint32_t& batteryStrength) = 0;
    virtual void BusyReason(const uint32_t& busyReason) = 0;
    virtual void TrackChangeIndicator() = 0;
    virtual void TrackPositionIndicator(const int32_t& elapsedTime) = 0;
    virtual void NowPlayingChangeIndicator() = 0;
    virtual void SettingsStatus(const uint32_t& settingType, const uint32_t& settingValue, const uint32_t& settingStatus) = 0;
    virtual void PlayerSettingsInfo(const ::DBus::Struct< std::vector< uint8_t > >& playerSetting) = 0;
    virtual void FolderBrowseItemTitleResponse(const ::DBus::Struct< std::vector< uint8_t > >& foldertitleResponse) = 0;
    virtual void BrowseNowPlayingTitleResponse(const ::DBus::Struct< std::vector< uint8_t > >& nowPlayingTitleResponse) = 0;
    virtual void BrowseFolderResponse(const ::DBus::Struct< std::vector< uint8_t > >& browseFolderResp) = 0;
    virtual void BrowseStatus(const uint32_t& browseStatus) = 0;
    virtual void BrowseConnStatus(const uint32_t& browseConnStatus) = 0;
    virtual void NowPlayingInfo(const uint32_t& nowPlayingIndex, const uint32_t& nowPlayingTotalCount) = 0;
    virtual void MusicProfileSupported(const uint32_t& musicProfile) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _StreamingStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t streamStatus;
        ri >> streamStatus;
        StreamingStatus(streamStatus);
    }
    void _StreamingAudioCmdStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t commandType;
        ri >> commandType;
        uint32_t commandStatus;
        ri >> commandStatus;
        StreamingAudioCmdStatus(commandType, commandStatus);
    }
    void _StreamingPlayerStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t playerStatus;
        ri >> playerStatus;
        uint32_t reason;
        ri >> reason;
        StreamingPlayerStatus(playerStatus, reason);
    }
    void _TrackInformation_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > trackInfo;
        ri >> trackInfo;
        TrackInformation(trackInfo);
    }
    void _DeviceBatteryIndicator_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t batteryStrength;
        ri >> batteryStrength;
        DeviceBatteryIndicator(batteryStrength);
    }
    void _BusyReason_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t busyReason;
        ri >> busyReason;
        BusyReason(busyReason);
    }
    void _TrackChangeIndicator_stub(const ::DBus::SignalMessage &sig)
    {
        TrackChangeIndicator();
    }
    void _TrackPositionIndicator_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t elapsedTime;
        ri >> elapsedTime;
        TrackPositionIndicator(elapsedTime);
    }
    void _NowPlayingChangeIndicator_stub(const ::DBus::SignalMessage &sig)
    {
        NowPlayingChangeIndicator();
    }
    void _SettingsStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t settingType;
        ri >> settingType;
        uint32_t settingValue;
        ri >> settingValue;
        uint32_t settingStatus;
        ri >> settingStatus;
        SettingsStatus(settingType, settingValue, settingStatus);
    }
    void _PlayerSettingsInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > playerSetting;
        ri >> playerSetting;
        PlayerSettingsInfo(playerSetting);
    }
    void _FolderBrowseItemTitleResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > foldertitleResponse;
        ri >> foldertitleResponse;
        FolderBrowseItemTitleResponse(foldertitleResponse);
    }
    void _BrowseNowPlayingTitleResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > nowPlayingTitleResponse;
        ri >> nowPlayingTitleResponse;
        BrowseNowPlayingTitleResponse(nowPlayingTitleResponse);
    }
    void _BrowseFolderResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > browseFolderResp;
        ri >> browseFolderResp;
        BrowseFolderResponse(browseFolderResp);
    }
    void _BrowseStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t browseStatus;
        ri >> browseStatus;
        BrowseStatus(browseStatus);
    }
    void _BrowseConnStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t browseConnStatus;
        ri >> browseConnStatus;
        BrowseConnStatus(browseConnStatus);
    }
    void _NowPlayingInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t nowPlayingIndex;
        ri >> nowPlayingIndex;
        uint32_t nowPlayingTotalCount;
        ri >> nowPlayingTotalCount;
        NowPlayingInfo(nowPlayingIndex, nowPlayingTotalCount);
    }
    void _MusicProfileSupported_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t musicProfile;
        ri >> musicProfile;
        MusicProfileSupported(musicProfile);
    }
};

} } 
namespace com {
namespace jci {

class BLM_TIME_proxy
: public ::DBus::InterfaceProxy
{
public:

    BLM_TIME_proxy()
    : ::DBus::InterfaceProxy("com.jci.BLM_TIME")
    {
        connect_signal(BLM_TIME_proxy, ClockChanged, _ClockChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void GetClock(uint32_t& nuHours, uint32_t& nuMins, uint32_t& u32Timestamp, uint64_t& u64CallTimestamp)
    {
        ::DBus::CallMessage call;
        call.member("GetClock");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> nuHours;
        ri >> nuMins;
        ri >> u32Timestamp;
        ri >> u64CallTimestamp;
    }

    void GetClockEx(uint32_t& nuHours, uint32_t& nuMins, uint64_t& u64CallTimestamp)
    {
        ::DBus::CallMessage call;
        call.member("GetClockEx");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> nuHours;
        ri >> nuMins;
        ri >> u64CallTimestamp;
    }


public:

    /* signal handlers for this interface
     */
    virtual void ClockChanged(const uint32_t& nuNewHours, const uint32_t& nuNewMins, const uint32_t& u32Timestamp, const uint64_t& u64CallTimestamp) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ClockChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t nuNewHours;
        ri >> nuNewHours;
        uint32_t nuNewMins;
        ri >> nuNewMins;
        uint32_t u32Timestamp;
        ri >> u32Timestamp;
        uint64_t u64CallTimestamp;
        ri >> u64CallTimestamp;
        ClockChanged(nuNewHours, nuNewMins, u32Timestamp, u64CallTimestamp);
    }
};

} } 
namespace com {
namespace jci {

class time_proxy
: public ::DBus::InterfaceProxy
{
public:

    time_proxy()
    : ::DBus::InterfaceProxy("com.jci.time")
    {
        connect_signal(time_proxy, FireEventMsg, _FireEventMsg_stub);
        connect_signal(time_proxy, OffsetChangeMsg, _OffsetChangeMsg_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t Connect(const std::string& client_name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client_name;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Disconnect(const std::string& client_name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client_name;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetDatetime(const int16_t& field_in, uint32_t& datetime_out, int16_t& field_out, uint8_t& synchronized, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << field_in;
        call.member("GetDatetime");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> datetime_out;
        ri >> field_out;
        ri >> synchronized;
        ri >> status;
    }

    void GetDatetimeComposite(const int16_t& field_in, ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& datetime_out, int16_t& field_out, uint8_t& synchronized, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << field_in;
        call.member("GetDatetimeComposite");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> datetime_out;
        ri >> field_out;
        ri >> synchronized;
        ri >> status;
    }

    void GetDatetimeComponents(::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& base_datetime, ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& timezone_offset, ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& daylightsaving_offset, ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& user_offset, uint8_t& synchronized, uint32_t& status)
    {
        ::DBus::CallMessage call;
        call.member("GetDatetimeComponents");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> base_datetime;
        ri >> timezone_offset;
        ri >> daylightsaving_offset;
        ri >> user_offset;
        ri >> synchronized;
        ri >> status;
    }

    void RegisterForDatetimeChangeEvent(const uint8_t& time_req, const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time, const std::string& client_name, uint8_t& time_req_out, ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << time_req;
        wi << event_time;
        wi << client_name;
        call.member("RegisterForDatetimeChangeEvent");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> time_req_out;
        ri >> event_time_out;
        ri >> status;
    }

    void UnregisterFromDatetimeChangeEvent(const uint8_t& time_req, const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time, const std::string& client_name, uint8_t& time_req_out, ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << time_req;
        wi << event_time;
        wi << client_name;
        call.member("UnregisterFromDatetimeChangeEvent");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> time_req_out;
        ri >> event_time_out;
        ri >> status;
    }

    void RegisterForOffsetChangeEvent(const uint8_t& offset_change_type, uint8_t& offset_change_type_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << offset_change_type;
        call.member("RegisterForOffsetChangeEvent");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> offset_change_type_out;
        ri >> status;
    }

    void UnregisterFromOffsetChangeEvent(const uint8_t& offset_change_type, uint8_t& offset_change_type_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << offset_change_type;
        call.member("UnregisterFromOffsetChangeEvent");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> offset_change_type_out;
        ri >> status;
    }

    uint32_t SetDatetimeComponents(const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& base_datetime, const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& timezone_offset, const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& daylightsaving_offset, const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& user_offset)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << base_datetime;
        wi << timezone_offset;
        wi << daylightsaving_offset;
        wi << user_offset;
        call.member("SetDatetimeComponents");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void SetDatetimeComposite(const int16_t& field_in, const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& datetime_in, int16_t& field_out, uint8_t& synchronized, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << field_in;
        wi << datetime_in;
        call.member("SetDatetimeComposite");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> field_out;
        ri >> synchronized;
        ri >> status;
    }

    void SetDatetime(const int16_t& field_in, const uint32_t& datetime_in, int16_t& field_out, uint8_t& synchronized, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << field_in;
        wi << datetime_in;
        call.member("SetDatetime");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> field_out;
        ri >> synchronized;
        ri >> status;
    }

    void GetWeekDay(const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time, uint32_t& weekday, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << event_time;
        call.member("GetWeekDay");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> weekday;
        ri >> status;
    }

    void GetMonthDaysCount(const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time, uint32_t& monthdayscount, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << event_time;
        call.member("GetMonthDaysCount");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> monthdayscount;
        ri >> status;
    }

    void GetYearWeekNumber(const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time, uint32_t& weeknumber, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << event_time;
        call.member("GetYearWeekNumber");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> weeknumber;
        ri >> status;
    }

    void CalculateDateDiff(const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time_from, const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time_to, ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_diff, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << event_time_from;
        wi << event_time_to;
        call.member("CalculateDateDiff");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> event_diff;
        ri >> status;
    }

    void CalculateTimeDiff(const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time_from, const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time_to, ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_diff, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << event_time_from;
        wi << event_time_to;
        call.member("CalculateTimeDiff");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> event_diff;
        ri >> status;
    }

    void CalculateDatetimeDiff(const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time_from, const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time_to, ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_diff, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << event_time_from;
        wi << event_time_to;
        call.member("CalculateDatetimeDiff");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> event_diff;
        ri >> status;
    }


public:

    /* signal handlers for this interface
     */
    virtual void FireEventMsg(const uint8_t& time_req, const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& event_time, const ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& deviation_time_out, const int32_t& stat) = 0;
    virtual void OffsetChangeMsg(const int16_t& field_out, const uint8_t& synchronized, const int16_t& request_out) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _FireEventMsg_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t time_req;
        ri >> time_req;
        ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t > event_time;
        ri >> event_time;
        ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t > deviation_time_out;
        ri >> deviation_time_out;
        int32_t stat;
        ri >> stat;
        FireEventMsg(time_req, event_time, deviation_time_out, stat);
    }
    void _OffsetChangeMsg_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t field_out;
        ri >> field_out;
        uint8_t synchronized;
        ri >> synchronized;
        int16_t request_out;
        ri >> request_out;
        OffsetChangeMsg(field_out, synchronized, request_out);
    }
};

} } 
namespace com {
namespace jci {

class testdiag_proxy
: public ::DBus::InterfaceProxy
{
public:

    testdiag_proxy()
    : ::DBus::InterfaceProxy("com.jci.testdiag")
    {
        connect_signal(testdiag_proxy, TestRoutineStatus_Response, _TestRoutineStatus_Response_stub);
        connect_signal(testdiag_proxy, NotifyTestMode_Response, _NotifyTestMode_Response_stub);
        connect_signal(testdiag_proxy, SystemError_Response, _SystemError_Response_stub);
        connect_signal(testdiag_proxy, DVD_SpeedRestriction_Enable, _DVD_SpeedRestriction_Enable_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t StartRoutine(const uint8_t& test_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << test_id;
        call.member("StartRoutine");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ActivateTestMode()
    {
        ::DBus::CallMessage call;
        call.member("ActivateTestMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DeactivateTestMode()
    {
        ::DBus::CallMessage call;
        call.member("DeactivateTestMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t CommanderInput(const int16_t& buttont_id, const int16_t& buttont_value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << buttont_id;
        wi << buttont_value;
        call.member("CommanderInput");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t StopCommanderRoutine()
    {
        ::DBus::CallMessage call;
        call.member("StopCommanderRoutine");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, std::vector< uint8_t > > > > GetTestInfo()
    {
        ::DBus::CallMessage call;
        call.member("GetTestInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, std::vector< uint8_t > > > > argout;
        ri >> argout;
        return argout;
    }

    int32_t ActivateJCITestMode()
    {
        ::DBus::CallMessage call;
        call.member("ActivateJCITestMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DeactivateJCITestModeMode()
    {
        ::DBus::CallMessage call;
        call.member("DeactivateJCITestModeMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t NotifyDiagLostFocus()
    {
        ::DBus::CallMessage call;
        call.member("NotifyDiagLostFocus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetDiagStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetDiagStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void TestRoutineStatus_Response(const std::string& test_status, const ::DBus::Struct< uint32_t, std::vector< uint8_t > >& test_info, const ::DBus::Struct< int32_t, std::vector< uint8_t > >& response_data, const ::DBus::Struct< bool, ::DBus::Struct< std::vector< uint8_t > >, ::DBus::Struct< bool, bool, bool, ::DBus::Struct< bool, std::vector< uint8_t > > > >& gui_state, const bool& isTUIDataReq, const bool& endOfData) = 0;
    virtual void NotifyTestMode_Response(const uint32_t& test_mode) = 0;
    virtual void SystemError_Response(const uint32_t& error_id, const uint32_t& error_status) = 0;
    virtual void DVD_SpeedRestriction_Enable(const bool& speed_Restriction_Enable) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _TestRoutineStatus_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string test_status;
        ri >> test_status;
        ::DBus::Struct< uint32_t, std::vector< uint8_t > > test_info;
        ri >> test_info;
        ::DBus::Struct< int32_t, std::vector< uint8_t > > response_data;
        ri >> response_data;
        ::DBus::Struct< bool, ::DBus::Struct< std::vector< uint8_t > >, ::DBus::Struct< bool, bool, bool, ::DBus::Struct< bool, std::vector< uint8_t > > > > gui_state;
        ri >> gui_state;
        bool isTUIDataReq;
        ri >> isTUIDataReq;
        bool endOfData;
        ri >> endOfData;
        TestRoutineStatus_Response(test_status, test_info, response_data, gui_state, isTUIDataReq, endOfData);
    }
    void _NotifyTestMode_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t test_mode;
        ri >> test_mode;
        NotifyTestMode_Response(test_mode);
    }
    void _SystemError_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t error_id;
        ri >> error_id;
        uint32_t error_status;
        ri >> error_status;
        SystemError_Response(error_id, error_status);
    }
    void _DVD_SpeedRestriction_Enable_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool speed_Restriction_Enable;
        ri >> speed_Restriction_Enable;
        DVD_SpeedRestriction_Enable(speed_Restriction_Enable);
    }
};

} } 
namespace com {
namespace jci {

class cdrp_proxy
: public ::DBus::InterfaceProxy
{
public:

    cdrp_proxy()
    : ::DBus::InterfaceProxy("com.jci.cdrp")
    {
        connect_signal(cdrp_proxy, ConnectedDeviceSignal, _ConnectedDeviceSignal_stub);
        connect_signal(cdrp_proxy, ConfirmationDialogSignal, _ConfirmationDialogSignal_stub);
        connect_signal(cdrp_proxy, ErrorNotificationSignal, _ErrorNotificationSignal_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void SetConfirmationDialogResult(const uint32_t& index, const std::string& serialId, const uint32_t& size)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << index;
        wi << serialId;
        wi << size;
        call.member("SetConfirmationDialogResult");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetDeviceSettings(const uint32_t& index, const std::string& serialId, const uint32_t& size)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << index;
        wi << serialId;
        wi << size;
        call.member("SetDeviceSettings");
        ::DBus::Message ret = invoke_method (call);
    }

    void GetConfirmationDialogRequest(const uint32_t& index)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << index;
        call.member("GetConfirmationDialogRequest");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void ConnectedDeviceSignal(const uint32_t& index, const std::string& serialId, const uint32_t& size) = 0;
    virtual void ConfirmationDialogSignal(const std::string& friendName, const uint32_t& friendNameSize, const std::string& serialId, const uint32_t& serialIdSize) = 0;
    virtual void ErrorNotificationSignal(const uint32_t& errorType) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ConnectedDeviceSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t index;
        ri >> index;
        std::string serialId;
        ri >> serialId;
        uint32_t size;
        ri >> size;
        ConnectedDeviceSignal(index, serialId, size);
    }
    void _ConfirmationDialogSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string friendName;
        ri >> friendName;
        uint32_t friendNameSize;
        ri >> friendNameSize;
        std::string serialId;
        ri >> serialId;
        uint32_t serialIdSize;
        ri >> serialIdSize;
        ConfirmationDialogSignal(friendName, friendNameSize, serialId, serialIdSize);
    }
    void _ErrorNotificationSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t errorType;
        ri >> errorType;
        ErrorNotificationSignal(errorType);
    }
};

} } 
namespace com {
namespace jci {

class vdt_proxy
: public ::DBus::InterfaceProxy
{
public:

    vdt_proxy()
    : ::DBus::InterfaceProxy("com.jci.vdt")
    {
        connect_signal(vdt_proxy, Drv_File_List, _Drv_File_List_stub);
        connect_signal(vdt_proxy, UMASS_Device_Status, _UMASS_Device_Status_stub);
        connect_signal(vdt_proxy, MD_Device_Status, _MD_Device_Status_stub);
        connect_signal(vdt_proxy, ClearDataStatus, _ClearDataStatus_stub);
        connect_signal(vdt_proxy, UmassTransferProgress, _UmassTransferProgress_stub);
        connect_signal(vdt_proxy, ActivateDeactivateRecordingStatus, _ActivateDeactivateRecordingStatus_stub);
        connect_signal(vdt_proxy, Send_Pin_Validation_Result, _Send_Pin_Validation_Result_stub);
        connect_signal(vdt_proxy, Send_Pin_Updation_Result, _Send_Pin_Updation_Result_stub);
        connect_signal(vdt_proxy, Send_EOLConfig_Status, _Send_EOLConfig_Status_stub);
        connect_signal(vdt_proxy, Send_HVD_Setting, _Send_HVD_Setting_stub);
        connect_signal(vdt_proxy, Delete_DriveRecord_DataStatus, _Delete_DriveRecord_DataStatus_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t MMUI_Startup_Initiated(const bool& vdt_mmui_init)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << vdt_mmui_init;
        call.member("MMUI_Startup_Initiated");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DriveLogRecordingStatus(const uint32_t& record_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << record_status;
        call.member("DriveLogRecordingStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void One_HrLog_File_Protect_Delete(const ::DBus::Struct< uint8_t, uint8_t >& one_hrlog_info)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << one_hrlog_info;
        call.member("One_HrLog_File_Protect_Delete");
        ::DBus::Message ret = invoke_method (call);
    }

    void File_List_Req()
    {
        ::DBus::CallMessage call;
        call.member("File_List_Req");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t DiagnosticsMode_Request(const uint16_t& testscreen_ID)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << testscreen_ID;
        call.member("DiagnosticsMode_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t UserMode_Setting(const uint16_t& setting_type, const bool& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setting_type;
        wi << value;
        call.member("UserMode_Setting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t UserMode_Request(const uint16_t& request_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request_type;
        call.member("UserMode_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PIN_Request(const uint16_t& pin_req_type, const uint16_t& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pin_req_type;
        wi << value;
        call.member("PIN_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Screen_Req(const uint32_t& vDTScreen)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << vDTScreen;
        call.member("Screen_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void Drv_File_List(const ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< std::string, uint8_t, uint32_t, bool > > >& file_list) = 0;
    virtual void UMASS_Device_Status(const uint16_t& umass_status) = 0;
    virtual void MD_Device_Status(const uint16_t& md_status, const bool& is_drvchart) = 0;
    virtual void ClearDataStatus(const uint16_t& clr_data_sts) = 0;
    virtual void UmassTransferProgress(const uint16_t& current_count, const uint16_t& total_count) = 0;
    virtual void ActivateDeactivateRecordingStatus(const uint32_t& recording_status) = 0;
    virtual void Send_Pin_Validation_Result(const bool& pin_validation_result) = 0;
    virtual void Send_Pin_Updation_Result(const bool& pin_updation_result, const uint16_t& req_type) = 0;
    virtual void Send_EOLConfig_Status(const uint16_t& eol_config_type, const bool& value) = 0;
    virtual void Send_HVD_Setting(const uint16_t& hvd_setting_type, const bool& value) = 0;
    virtual void Delete_DriveRecord_DataStatus(const uint16_t& del_drv_data_sts) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Drv_File_List_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< std::string, uint8_t, uint32_t, bool > > > file_list;
        ri >> file_list;
        Drv_File_List(file_list);
    }
    void _UMASS_Device_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t umass_status;
        ri >> umass_status;
        UMASS_Device_Status(umass_status);
    }
    void _MD_Device_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t md_status;
        ri >> md_status;
        bool is_drvchart;
        ri >> is_drvchart;
        MD_Device_Status(md_status, is_drvchart);
    }
    void _ClearDataStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t clr_data_sts;
        ri >> clr_data_sts;
        ClearDataStatus(clr_data_sts);
    }
    void _UmassTransferProgress_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t current_count;
        ri >> current_count;
        uint16_t total_count;
        ri >> total_count;
        UmassTransferProgress(current_count, total_count);
    }
    void _ActivateDeactivateRecordingStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t recording_status;
        ri >> recording_status;
        ActivateDeactivateRecordingStatus(recording_status);
    }
    void _Send_Pin_Validation_Result_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool pin_validation_result;
        ri >> pin_validation_result;
        Send_Pin_Validation_Result(pin_validation_result);
    }
    void _Send_Pin_Updation_Result_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool pin_updation_result;
        ri >> pin_updation_result;
        uint16_t req_type;
        ri >> req_type;
        Send_Pin_Updation_Result(pin_updation_result, req_type);
    }
    void _Send_EOLConfig_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t eol_config_type;
        ri >> eol_config_type;
        bool value;
        ri >> value;
        Send_EOLConfig_Status(eol_config_type, value);
    }
    void _Send_HVD_Setting_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t hvd_setting_type;
        ri >> hvd_setting_type;
        bool value;
        ri >> value;
        Send_HVD_Setting(hvd_setting_type, value);
    }
    void _Delete_DriveRecord_DataStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t del_drv_data_sts;
        ri >> del_drv_data_sts;
        Delete_DriveRecord_DataStatus(del_drv_data_sts);
    }
};

} } 
namespace com {
namespace jci {

class xmad_proxy
: public ::DBus::InterfaceProxy
{
public:

    xmad_proxy()
    : ::DBus::InterfaceProxy("com.jci.xmad")
    {
        connect_signal(xmad_proxy, SourceChangeStatus, _SourceChangeStatus_stub);
        connect_signal(xmad_proxy, TuneStatus, _TuneStatus_stub);
        connect_signal(xmad_proxy, installStatus, _installStatus_stub);
        connect_signal(xmad_proxy, SignalQuality, _SignalQuality_stub);
        connect_signal(xmad_proxy, AntennaState, _AntennaState_stub);
        connect_signal(xmad_proxy, ChannelDescriptionServiceStatus, _ChannelDescriptionServiceStatus_stub);
        connect_signal(xmad_proxy, TuneStartSettingStatus, _TuneStartSettingStatus_stub);
        connect_signal(xmad_proxy, LockPinStatus, _LockPinStatus_stub);
        connect_signal(xmad_proxy, CurrentTunedChannel, _CurrentTunedChannel_stub);
        connect_signal(xmad_proxy, ChannelStatus, _ChannelStatus_stub);
        connect_signal(xmad_proxy, ActiveCategory, _ActiveCategory_stub);
        connect_signal(xmad_proxy, ScanStatus, _ScanStatus_stub);
        connect_signal(xmad_proxy, ScanReqStatus, _ScanReqStatus_stub);
        connect_signal(xmad_proxy, ScanSettingStatus, _ScanSettingStatus_stub);
        connect_signal(xmad_proxy, DirectTuneStatus, _DirectTuneStatus_stub);
        connect_signal(xmad_proxy, ChannelListUpdateStatus, _ChannelListUpdateStatus_stub);
        connect_signal(xmad_proxy, CategoryUpdate, _CategoryUpdate_stub);
        connect_signal(xmad_proxy, RequestPin, _RequestPin_stub);
        connect_signal(xmad_proxy, RequestPinStatus, _RequestPinStatus_stub);
        connect_signal(xmad_proxy, ChannelLockStatus, _ChannelLockStatus_stub);
        connect_signal(xmad_proxy, SessionLockStatus, _SessionLockStatus_stub);
        connect_signal(xmad_proxy, ParentalLockInitSetupStatus, _ParentalLockInitSetupStatus_stub);
        connect_signal(xmad_proxy, SeekStatus, _SeekStatus_stub);
        connect_signal(xmad_proxy, EditSmartFavListStatus, _EditSmartFavListStatus_stub);
        connect_signal(xmad_proxy, NotifyFirstXMFavAddition, _NotifyFirstXMFavAddition_stub);
        connect_signal(xmad_proxy, NotifyFavListID, _NotifyFavListID_stub);
        connect_signal(xmad_proxy, TuneScanSettingFirstTimeUsage, _TuneScanSettingFirstTimeUsage_stub);
        connect_signal(xmad_proxy, TuneScanContentAvailabilityStatus, _TuneScanContentAvailabilityStatus_stub);
        connect_signal(xmad_proxy, BTConnectionStatus, _BTConnectionStatus_stub);
        connect_signal(xmad_proxy, SubscriptionStatus, _SubscriptionStatus_stub);
        connect_signal(xmad_proxy, IRBufferCapacityStatus, _IRBufferCapacityStatus_stub);
        connect_signal(xmad_proxy, PlayControlStatus, _PlayControlStatus_stub);
        connect_signal(xmad_proxy, PlayBackStatus, _PlayBackStatus_stub);
        connect_signal(xmad_proxy, PlaybackTimeStatus, _PlaybackTimeStatus_stub);
        connect_signal(xmad_proxy, SeekTimeStatus, _SeekTimeStatus_stub);
        connect_signal(xmad_proxy, PlaybackOffsetIndication, _PlaybackOffsetIndication_stub);
        connect_signal(xmad_proxy, ESNInfo, _ESNInfo_stub);
        connect_signal(xmad_proxy, TracksBeforeAfter, _TracksBeforeAfter_stub);
        connect_signal(xmad_proxy, TuneMixActive, _TuneMixActive_stub);
        connect_signal(xmad_proxy, PlaybackTrackTimeStatus, _PlaybackTrackTimeStatus_stub);
        connect_signal(xmad_proxy, CreateTuneMixStatus, _CreateTuneMixStatus_stub);
        connect_signal(xmad_proxy, EditTuneMixStatus, _EditTuneMixStatus_stub);
        connect_signal(xmad_proxy, RenameTunemixStatus, _RenameTunemixStatus_stub);
        connect_signal(xmad_proxy, RemoveTuneMixStatus, _RemoveTuneMixStatus_stub);
        connect_signal(xmad_proxy, TuneStartFirstTimeUsageStatus, _TuneStartFirstTimeUsageStatus_stub);
        connect_signal(xmad_proxy, SmartFavChannelsCount, _SmartFavChannelsCount_stub);
        connect_signal(xmad_proxy, TuneMixCount, _TuneMixCount_stub);
        connect_signal(xmad_proxy, TuneMixDetails, _TuneMixDetails_stub);
        connect_signal(xmad_proxy, TuneMixListUpdated, _TuneMixListUpdated_stub);
        connect_signal(xmad_proxy, TuneFeaturedFavStatus, _TuneFeaturedFavStatus_stub);
        connect_signal(xmad_proxy, FeaturedFavListUpdated, _FeaturedFavListUpdated_stub);
        connect_signal(xmad_proxy, SportFlashActiveStatus, _SportFlashActiveStatus_stub);
        connect_signal(xmad_proxy, SportFlashFrequencyStatus, _SportFlashFrequencyStatus_stub);
        connect_signal(xmad_proxy, SportFlashFirstTimeUsageStatus, _SportFlashFirstTimeUsageStatus_stub);
        connect_signal(xmad_proxy, EnableSportFlashAlertStatus, _EnableSportFlashAlertStatus_stub);
        connect_signal(xmad_proxy, SelectSportsFlashTeamStatus, _SelectSportsFlashTeamStatus_stub);
        connect_signal(xmad_proxy, MoveSportsFlashTeamStatus, _MoveSportsFlashTeamStatus_stub);
        connect_signal(xmad_proxy, SportFlashAlert, _SportFlashAlert_stub);
        connect_signal(xmad_proxy, CancelAlert, _CancelAlert_stub);
        connect_signal(xmad_proxy, PlayFlashAlertStatus, _PlayFlashAlertStatus_stub);
        connect_signal(xmad_proxy, AbortFlashAlertStatus, _AbortFlashAlertStatus_stub);
        connect_signal(xmad_proxy, TurnOffAlertStatus, _TurnOffAlertStatus_stub);
        connect_signal(xmad_proxy, ReplayFlashAlertStatus, _ReplayFlashAlertStatus_stub);
        connect_signal(xmad_proxy, TWFlashActiveStatus, _TWFlashActiveStatus_stub);
        connect_signal(xmad_proxy, TWFlashFrequencyStatus, _TWFlashFrequencyStatus_stub);
        connect_signal(xmad_proxy, TWFirstTimeUsageStatus, _TWFirstTimeUsageStatus_stub);
        connect_signal(xmad_proxy, EnableTWReportAlertStatus, _EnableTWReportAlertStatus_stub);
        connect_signal(xmad_proxy, SelectTWCityStatus, _SelectTWCityStatus_stub);
        connect_signal(xmad_proxy, TWCityNameCityID, _TWCityNameCityID_stub);
        connect_signal(xmad_proxy, TWFlashAlert, _TWFlashAlert_stub);
        connect_signal(xmad_proxy, FAVChannelsubscribed, _FAVChannelsubscribed_stub);
        connect_signal(xmad_proxy, FavSportTeamCount, _FavSportTeamCount_stub);
        connect_signal(xmad_proxy, ChannelValidityStatus, _ChannelValidityStatus_stub);
        connect_signal(xmad_proxy, UnlockSession, _UnlockSession_stub);
        connect_signal(xmad_proxy, SubscriptionUpdated, _SubscriptionUpdated_stub);
        connect_signal(xmad_proxy, FlashAvailableStatus, _FlashAvailableStatus_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t GetScanSetting()
    {
        ::DBus::CallMessage call;
        call.member("GetScanSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetInstallStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetInstallStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetSignalQuality()
    {
        ::DBus::CallMessage call;
        call.member("GetSignalQuality");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetAntennaState()
    {
        ::DBus::CallMessage call;
        call.member("GetAntennaState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetFirstXMFavAddition()
    {
        ::DBus::CallMessage call;
        call.member("GetFirstXMFavAddition");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTuneStartSettingStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetTuneStartSettingStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetFavListID()
    {
        ::DBus::CallMessage call;
        call.member("GetFavListID");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetActiveCategory()
    {
        ::DBus::CallMessage call;
        call.member("GetActiveCategory");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetSessionLockStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetSessionLockStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetParentalLockInitSetupStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetParentalLockInitSetupStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetIsTuneScanSettingUsedBefore()
    {
        ::DBus::CallMessage call;
        call.member("GetIsTuneScanSettingUsedBefore");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTuneScanContentAvailabilityInfo()
    {
        ::DBus::CallMessage call;
        call.member("GetTuneScanContentAvailabilityInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetBTConnectionStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetBTConnectionStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetIRBufferCapacity()
    {
        ::DBus::CallMessage call;
        call.member("GetIRBufferCapacity");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetESN()
    {
        ::DBus::CallMessage call;
        call.member("GetESN");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetSmartFavChannelsCount()
    {
        ::DBus::CallMessage call;
        call.member("GetSmartFavChannelsCount");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTuneMixActiveStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetTuneMixActiveStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTuneMixCount()
    {
        ::DBus::CallMessage call;
        call.member("GetTuneMixCount");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTuneStartFirstTimeUsage()
    {
        ::DBus::CallMessage call;
        call.member("GetTuneStartFirstTimeUsage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTuneMixDetails(const uint32_t& tunemix_Id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tunemix_Id;
        call.member("GetTuneMixDetails");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetSportFlashActiveStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetSportFlashActiveStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetSportFlashFreq()
    {
        ::DBus::CallMessage call;
        call.member("GetSportFlashFreq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetSportFlashFirstTimeUsage()
    {
        ::DBus::CallMessage call;
        call.member("GetSportFlashFirstTimeUsage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTWReportActiveStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetTWReportActiveStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTWReportFreq()
    {
        ::DBus::CallMessage call;
        call.member("GetTWReportFreq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTWReportFirstTimeUsage()
    {
        ::DBus::CallMessage call;
        call.member("GetTWReportFirstTimeUsage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetNearestCityName()
    {
        ::DBus::CallMessage call;
        call.member("GetNearestCityName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetSubscriptionUpdateStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetSubscriptionUpdateStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SourceChangeToXM()
    {
        ::DBus::CallMessage call;
        call.member("SourceChangeToXM");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Seek(const uint32_t& seek_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << seek_type;
        call.member("Seek");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DirectTune(const uint32_t& id, const bool& tuneToServiceID)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << id;
        wi << tuneToServiceID;
        call.member("DirectTune");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ChangeCategory(const uint32_t& ch_list_type, const uint32_t& category_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ch_list_type;
        wi << category_id;
        call.member("ChangeCategory");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ScanSetting(const uint32_t& scan_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << scan_type;
        call.member("ScanSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ScanReq(const ::DBus::Struct< uint32_t, uint32_t >& scan_req)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << scan_req;
        call.member("ScanReq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TuneStartSetting(const bool& tune_start_enable)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tune_start_enable;
        call.member("TuneStartSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t EditSmartFavList(const uint32_t& chanID, const bool& isSFChannel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << chanID;
        wi << isSFChannel;
        call.member("EditSmartFavList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SessionLock(const ::DBus::Struct< uint32_t, bool >& session_lock_req)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << session_lock_req;
        call.member("SessionLock");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ChannelLock(const ::DBus::Struct< uint32_t, uint32_t >& channel_lock_req)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << channel_lock_req;
        call.member("ChannelLock");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RequestPinResponse(const ::DBus::Struct< uint32_t, ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t > >& pin_info)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pin_info;
        call.member("RequestPinResponse");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ChangePinReq(const uint32_t& pin_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pin_type;
        call.member("ChangePinReq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PlayControl(const uint32_t& playControl)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << playControl;
        call.member("PlayControl");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SeekTime(const int32_t& durationInSec)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << durationInSec;
        call.member("SeekTime");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SeekTrack(const uint32_t& direction)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << direction;
        call.member("SeekTrack");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t CreateTuneMix(const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string, bool > > >& create_tunemix_req)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << create_tunemix_req;
        call.member("CreateTuneMix");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t EditTuneMix(const ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, std::string, bool > > >& edit_tunemix_req)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << edit_tunemix_req;
        call.member("EditTuneMix");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RenameTuneMix(const ::DBus::Struct< uint32_t, std::string >& rename_tunemix_req)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << rename_tunemix_req;
        call.member("RenameTuneMix");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RemoveTuneMix(const uint32_t& tunemix_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tunemix_id;
        call.member("RemoveTuneMix");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TuneStartUsed()
    {
        ::DBus::CallMessage call;
        call.member("TuneStartUsed");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t FirstFavoriteAdded()
    {
        ::DBus::CallMessage call;
        call.member("FirstFavoriteAdded");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TuneScanUsed()
    {
        ::DBus::CallMessage call;
        call.member("TuneScanUsed");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ExitTuneMix()
    {
        ::DBus::CallMessage call;
        call.member("ExitTuneMix");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TuneFeaturedFav(const ::DBus::Struct< uint32_t, uint32_t >& tune_featured_fav)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tune_featured_fav;
        call.member("TuneFeaturedFav");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SportFlashFirstTimeUsed()
    {
        ::DBus::CallMessage call;
        call.member("SportFlashFirstTimeUsed");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetSportsFlashFrequency(const uint32_t& flashFreq)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << flashFreq;
        call.member("SetSportsFlashFrequency");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t EnableSportFlashAlert(const bool& enableAlert)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << enableAlert;
        call.member("EnableSportFlashAlert");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SelectSportsFlashTeam(const uint32_t& leagueId, const uint32_t& teamId, const bool& favorite)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << leagueId;
        wi << teamId;
        wi << favorite;
        call.member("SelectSportsFlashTeam");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t MoveSportsFlashTeam(const uint32_t& refLeagueID , const uint32_t& leagueID, const uint32_t& refTeamId , const uint32_t& teamId, const uint32_t& moveType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << refLeagueID ;
        wi << leagueID;
        wi << refTeamId ;
        wi << teamId;
        wi << moveType;
        call.member("MoveSportsFlashTeam");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DismissFlashAlert(const uint32_t& channelID, const uint32_t& flashEventID, const uint32_t& flashAlertType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << channelID;
        wi << flashEventID;
        wi << flashAlertType;
        call.member("DismissFlashAlert");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PlayFlashAlert(const uint32_t& flashEventID, const uint32_t& flashAlertType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << flashEventID;
        wi << flashAlertType;
        call.member("PlayFlashAlert");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TurnOffAlert(const uint32_t& flashAlertType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << flashAlertType;
        call.member("TurnOffAlert");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AbortFlashAlert(const uint32_t& flashEventID, const uint32_t& flashAlertType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << flashEventID;
        wi << flashAlertType;
        call.member("AbortFlashAlert");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ReplayFlashAlert(const uint32_t& flashEventID, const uint32_t& flashAlertType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << flashEventID;
        wi << flashAlertType;
        call.member("ReplayFlashAlert");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TWReportFirstTimeUsed()
    {
        ::DBus::CallMessage call;
        call.member("TWReportFirstTimeUsed");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetTWReportFrequency(const uint32_t& twReportFreq)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << twReportFreq;
        call.member("SetTWReportFrequency");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t EnableTWReportAlert(const bool& enableTWReportAlert)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << enableTWReportAlert;
        call.member("EnableTWReportAlert");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SelectTWCity(const std::string& selectTWCity, const bool& isNearestCity)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << selectTWCity;
        wi << isNearestCity;
        call.member("SelectTWCity");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SuspendAlertContextStatus(const bool& suspendAlertContextRemoved)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << suspendAlertContextRemoved;
        call.member("SuspendAlertContextStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t isValidChannelID(const uint32_t& channelID)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << channelID;
        call.member("isValidChannelID");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PlayFirstTuneMix()
    {
        ::DBus::CallMessage call;
        call.member("PlayFirstTuneMix");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetFlashAvailableStatus(const uint32_t& flashAlertType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << flashAlertType;
        call.member("GetFlashAvailableStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SubscriptionUserAccept()
    {
        ::DBus::CallMessage call;
        call.member("SubscriptionUserAccept");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PlayTuneGame(const uint32_t& id_h, const uint32_t& id_m, const uint32_t& id_l, const bool& tuneToServiceID)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << id_h;
        wi << id_m;
        wi << id_l;
        wi << tuneToServiceID;
        call.member("PlayTuneGame");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SubscriptionUpdateConf(const bool& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << status;
        call.member("SubscriptionUpdateConf");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void SourceChangeStatus(const uint32_t& source_change_status) = 0;
    virtual void TuneStatus(const ::DBus::Struct< uint32_t, uint32_t >& tune_state) = 0;
    virtual void installStatus(const uint32_t& install_status) = 0;
    virtual void SignalQuality(const uint32_t& signal_quality_state) = 0;
    virtual void AntennaState(const uint32_t& antenna_state) = 0;
    virtual void ChannelDescriptionServiceStatus(const bool& channel_description_status) = 0;
    virtual void TuneStartSettingStatus(const bool& tune_start_status) = 0;
    virtual void LockPinStatus(const uint32_t& lock_pin_status) = 0;
    virtual void CurrentTunedChannel(const ::DBus::Struct< uint32_t, uint32_t, std::vector< uint8_t >, uint32_t >& current_channel_info) = 0;
    virtual void ChannelStatus(const ::DBus::Struct< uint32_t, bool, uint32_t, uint32_t, uint32_t >& channel_state) = 0;
    virtual void ActiveCategory(const ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t, uint32_t >& active_category_info) = 0;
    virtual void ScanStatus(const ::DBus::Struct< uint32_t, uint32_t >& scan_status) = 0;
    virtual void ScanReqStatus(const uint32_t& error_status) = 0;
    virtual void ScanSettingStatus(const uint32_t& scan_type) = 0;
    virtual void DirectTuneStatus(const ::DBus::Struct< uint32_t, uint32_t >& direct_tune_status) = 0;
    virtual void ChannelListUpdateStatus(const uint32_t& listID, const uint32_t& channelListSize, const uint32_t& index, const bool& channelListInitialize, const ::DBus::Struct< bool, bool, bool, bool >& updateType) = 0;
    virtual void CategoryUpdate(const uint32_t& catID, const std::string& name, const ::DBus::Struct< bool, bool, bool >& updateType) = 0;
    virtual void RequestPin(const uint32_t& pin_type) = 0;
    virtual void RequestPinStatus(const uint32_t& pin_status) = 0;
    virtual void ChannelLockStatus(const uint32_t& channel_lock_status) = 0;
    virtual void SessionLockStatus(const uint32_t& session_lock_status) = 0;
    virtual void ParentalLockInitSetupStatus(const bool& init_setup_status) = 0;
    virtual void SeekStatus(const ::DBus::Struct< uint32_t, uint32_t >& seek_status) = 0;
    virtual void EditSmartFavListStatus(const uint32_t& retChID, const bool& retIsSFChannel, const uint32_t& raturn_Status) = 0;
    virtual void NotifyFirstXMFavAddition(const bool& first_fav_addition_status) = 0;
    virtual void NotifyFavListID(const uint32_t& fav_list_id) = 0;
    virtual void TuneScanSettingFirstTimeUsage(const bool& first_time_usage ) = 0;
    virtual void TuneScanContentAvailabilityStatus(const bool& tune_scan_availability  ) = 0;
    virtual void BTConnectionStatus(const bool& bTConnected  ) = 0;
    virtual void SubscriptionStatus(const ::DBus::Struct< uint32_t, uint8_t, uint32_t, std::vector< uint8_t >, std::vector< uint8_t > >& subscription_state) = 0;
    virtual void IRBufferCapacityStatus(const ::DBus::Struct< uint32_t, uint32_t >& ir_buffer_state) = 0;
    virtual void PlayControlStatus(const uint32_t& status ) = 0;
    virtual void PlayBackStatus(const ::DBus::Struct< uint32_t, uint32_t >& play_back_status) = 0;
    virtual void PlaybackTimeStatus(const ::DBus::Struct< uint32_t, uint32_t, uint32_t >& playback_time) = 0;
    virtual void SeekTimeStatus(const uint32_t& status ) = 0;
    virtual void PlaybackOffsetIndication(const uint32_t& playBackOffset ) = 0;
    virtual void ESNInfo(const std::string& esn_val ) = 0;
    virtual void TracksBeforeAfter(const ::DBus::Struct< uint32_t, uint32_t >& tracks_info) = 0;
    virtual void TuneMixActive(const ::DBus::Struct< bool, uint32_t, std::vector< uint8_t > >& tunemix_state_info) = 0;
    virtual void PlaybackTrackTimeStatus(const ::DBus::Struct< uint32_t, uint32_t >& playback_track_time) = 0;
    virtual void CreateTuneMixStatus(const ::DBus::Struct< std::vector< uint8_t >, uint32_t, uint32_t, uint32_t >& create_tunemix_status) = 0;
    virtual void EditTuneMixStatus(const ::DBus::Struct< std::vector< uint8_t >, uint32_t, uint32_t, uint32_t >& edit_tunemix_status) = 0;
    virtual void RenameTunemixStatus(const ::DBus::Struct< std::string, uint32_t >& rename_tunemix_status) = 0;
    virtual void RemoveTuneMixStatus(const ::DBus::Struct< uint32_t, uint32_t >& remove_tunemix_status) = 0;
    virtual void TuneStartFirstTimeUsageStatus(const bool& first_time_usage ) = 0;
    virtual void SmartFavChannelsCount(const uint32_t& channel_count ) = 0;
    virtual void TuneMixCount(const uint32_t& tunemix_count ) = 0;
    virtual void TuneMixDetails(const ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, std::string, bool > > >& tunemix_details) = 0;
    virtual void TuneMixListUpdated(const uint32_t& tunemix_count ) = 0;
    virtual void TuneFeaturedFavStatus(const ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t >& tune_featuedfav_status) = 0;
    virtual void FeaturedFavListUpdated(const ::DBus::Struct< uint32_t, std::vector< uint8_t >, ::DBus::Struct< bool, bool, bool > >& list_updated) = 0;
    virtual void SportFlashActiveStatus(const ::DBus::Struct< bool, uint32_t >& sportsFlash_active_status) = 0;
    virtual void SportFlashFrequencyStatus(const uint32_t& sportsFlash_frequency_status) = 0;
    virtual void SportFlashFirstTimeUsageStatus(const bool& firstTimeUsage) = 0;
    virtual void EnableSportFlashAlertStatus(const uint32_t& status) = 0;
    virtual void SelectSportsFlashTeamStatus(const uint32_t& status) = 0;
    virtual void MoveSportsFlashTeamStatus(const uint32_t& status) = 0;
    virtual void SportFlashAlert(const ::DBus::Struct< uint32_t, uint32_t, uint32_t, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, uint32_t >& sportsFlash_Alert) = 0;
    virtual void CancelAlert(const ::DBus::Struct< uint32_t, uint32_t, uint32_t >& sportsFlash_cancel_status) = 0;
    virtual void PlayFlashAlertStatus(const ::DBus::Struct< uint32_t, uint32_t >& playFlash_Alert_Status) = 0;
    virtual void AbortFlashAlertStatus(const ::DBus::Struct< bool, uint32_t, uint32_t >& abortFlash_Alert_status) = 0;
    virtual void TurnOffAlertStatus(const ::DBus::Struct< uint32_t, uint32_t >& turnOff_Alert_status) = 0;
    virtual void ReplayFlashAlertStatus(const ::DBus::Struct< uint32_t, uint32_t >& replay_Alert_status) = 0;
    virtual void TWFlashActiveStatus(const bool& tWFlash_active_status) = 0;
    virtual void TWFlashFrequencyStatus(const uint32_t& tWFlash_frequency_status) = 0;
    virtual void TWFirstTimeUsageStatus(const bool& firstTimeUsage) = 0;
    virtual void EnableTWReportAlertStatus(const uint32_t& status) = 0;
    virtual void SelectTWCityStatus(const uint32_t& status) = 0;
    virtual void TWCityNameCityID(const ::DBus::Struct< std::vector< uint8_t >, bool, uint32_t, uint32_t >& tW_CityNameCityID) = 0;
    virtual void TWFlashAlert(const ::DBus::Struct< uint32_t, uint32_t, std::vector< uint8_t >, uint32_t >& tWFlash_Alert) = 0;
    virtual void FAVChannelsubscribed(const ::DBus::Struct< uint32_t, bool, std::vector< uint8_t > >& fAVChannel_subscribed) = 0;
    virtual void FavSportTeamCount(const uint8_t& favSportTeamCount) = 0;
    virtual void ChannelValidityStatus(const ::DBus::Struct< uint32_t, uint32_t >& validityStatus) = 0;
    virtual void UnlockSession() = 0;
    virtual void SubscriptionUpdated() = 0;
    virtual void FlashAvailableStatus(const ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t > >& flashAvailable_Status) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _SourceChangeStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t source_change_status;
        ri >> source_change_status;
        SourceChangeStatus(source_change_status);
    }
    void _TuneStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > tune_state;
        ri >> tune_state;
        TuneStatus(tune_state);
    }
    void _installStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t install_status;
        ri >> install_status;
        installStatus(install_status);
    }
    void _SignalQuality_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t signal_quality_state;
        ri >> signal_quality_state;
        SignalQuality(signal_quality_state);
    }
    void _AntennaState_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t antenna_state;
        ri >> antenna_state;
        AntennaState(antenna_state);
    }
    void _ChannelDescriptionServiceStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool channel_description_status;
        ri >> channel_description_status;
        ChannelDescriptionServiceStatus(channel_description_status);
    }
    void _TuneStartSettingStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool tune_start_status;
        ri >> tune_start_status;
        TuneStartSettingStatus(tune_start_status);
    }
    void _LockPinStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t lock_pin_status;
        ri >> lock_pin_status;
        LockPinStatus(lock_pin_status);
    }
    void _CurrentTunedChannel_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, std::vector< uint8_t >, uint32_t > current_channel_info;
        ri >> current_channel_info;
        CurrentTunedChannel(current_channel_info);
    }
    void _ChannelStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, bool, uint32_t, uint32_t, uint32_t > channel_state;
        ri >> channel_state;
        ChannelStatus(channel_state);
    }
    void _ActiveCategory_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t, uint32_t > active_category_info;
        ri >> active_category_info;
        ActiveCategory(active_category_info);
    }
    void _ScanStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > scan_status;
        ri >> scan_status;
        ScanStatus(scan_status);
    }
    void _ScanReqStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t error_status;
        ri >> error_status;
        ScanReqStatus(error_status);
    }
    void _ScanSettingStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t scan_type;
        ri >> scan_type;
        ScanSettingStatus(scan_type);
    }
    void _DirectTuneStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > direct_tune_status;
        ri >> direct_tune_status;
        DirectTuneStatus(direct_tune_status);
    }
    void _ChannelListUpdateStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t listID;
        ri >> listID;
        uint32_t channelListSize;
        ri >> channelListSize;
        uint32_t index;
        ri >> index;
        bool channelListInitialize;
        ri >> channelListInitialize;
        ::DBus::Struct< bool, bool, bool, bool > updateType;
        ri >> updateType;
        ChannelListUpdateStatus(listID, channelListSize, index, channelListInitialize, updateType);
    }
    void _CategoryUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t catID;
        ri >> catID;
        std::string name;
        ri >> name;
        ::DBus::Struct< bool, bool, bool > updateType;
        ri >> updateType;
        CategoryUpdate(catID, name, updateType);
    }
    void _RequestPin_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t pin_type;
        ri >> pin_type;
        RequestPin(pin_type);
    }
    void _RequestPinStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t pin_status;
        ri >> pin_status;
        RequestPinStatus(pin_status);
    }
    void _ChannelLockStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t channel_lock_status;
        ri >> channel_lock_status;
        ChannelLockStatus(channel_lock_status);
    }
    void _SessionLockStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t session_lock_status;
        ri >> session_lock_status;
        SessionLockStatus(session_lock_status);
    }
    void _ParentalLockInitSetupStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool init_setup_status;
        ri >> init_setup_status;
        ParentalLockInitSetupStatus(init_setup_status);
    }
    void _SeekStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > seek_status;
        ri >> seek_status;
        SeekStatus(seek_status);
    }
    void _EditSmartFavListStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t retChID;
        ri >> retChID;
        bool retIsSFChannel;
        ri >> retIsSFChannel;
        uint32_t raturn_Status;
        ri >> raturn_Status;
        EditSmartFavListStatus(retChID, retIsSFChannel, raturn_Status);
    }
    void _NotifyFirstXMFavAddition_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool first_fav_addition_status;
        ri >> first_fav_addition_status;
        NotifyFirstXMFavAddition(first_fav_addition_status);
    }
    void _NotifyFavListID_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t fav_list_id;
        ri >> fav_list_id;
        NotifyFavListID(fav_list_id);
    }
    void _TuneScanSettingFirstTimeUsage_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool first_time_usage ;
        ri >> first_time_usage ;
        TuneScanSettingFirstTimeUsage(first_time_usage );
    }
    void _TuneScanContentAvailabilityStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool tune_scan_availability  ;
        ri >> tune_scan_availability  ;
        TuneScanContentAvailabilityStatus(tune_scan_availability  );
    }
    void _BTConnectionStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool bTConnected  ;
        ri >> bTConnected  ;
        BTConnectionStatus(bTConnected  );
    }
    void _SubscriptionStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint8_t, uint32_t, std::vector< uint8_t >, std::vector< uint8_t > > subscription_state;
        ri >> subscription_state;
        SubscriptionStatus(subscription_state);
    }
    void _IRBufferCapacityStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > ir_buffer_state;
        ri >> ir_buffer_state;
        IRBufferCapacityStatus(ir_buffer_state);
    }
    void _PlayControlStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t status ;
        ri >> status ;
        PlayControlStatus(status );
    }
    void _PlayBackStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > play_back_status;
        ri >> play_back_status;
        PlayBackStatus(play_back_status);
    }
    void _PlaybackTimeStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t > playback_time;
        ri >> playback_time;
        PlaybackTimeStatus(playback_time);
    }
    void _SeekTimeStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t status ;
        ri >> status ;
        SeekTimeStatus(status );
    }
    void _PlaybackOffsetIndication_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t playBackOffset ;
        ri >> playBackOffset ;
        PlaybackOffsetIndication(playBackOffset );
    }
    void _ESNInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string esn_val ;
        ri >> esn_val ;
        ESNInfo(esn_val );
    }
    void _TracksBeforeAfter_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > tracks_info;
        ri >> tracks_info;
        TracksBeforeAfter(tracks_info);
    }
    void _TuneMixActive_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< bool, uint32_t, std::vector< uint8_t > > tunemix_state_info;
        ri >> tunemix_state_info;
        TuneMixActive(tunemix_state_info);
    }
    void _PlaybackTrackTimeStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > playback_track_time;
        ri >> playback_track_time;
        PlaybackTrackTimeStatus(playback_track_time);
    }
    void _CreateTuneMixStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t >, uint32_t, uint32_t, uint32_t > create_tunemix_status;
        ri >> create_tunemix_status;
        CreateTuneMixStatus(create_tunemix_status);
    }
    void _EditTuneMixStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t >, uint32_t, uint32_t, uint32_t > edit_tunemix_status;
        ri >> edit_tunemix_status;
        EditTuneMixStatus(edit_tunemix_status);
    }
    void _RenameTunemixStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::string, uint32_t > rename_tunemix_status;
        ri >> rename_tunemix_status;
        RenameTunemixStatus(rename_tunemix_status);
    }
    void _RemoveTuneMixStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > remove_tunemix_status;
        ri >> remove_tunemix_status;
        RemoveTuneMixStatus(remove_tunemix_status);
    }
    void _TuneStartFirstTimeUsageStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool first_time_usage ;
        ri >> first_time_usage ;
        TuneStartFirstTimeUsageStatus(first_time_usage );
    }
    void _SmartFavChannelsCount_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t channel_count ;
        ri >> channel_count ;
        SmartFavChannelsCount(channel_count );
    }
    void _TuneMixCount_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t tunemix_count ;
        ri >> tunemix_count ;
        TuneMixCount(tunemix_count );
    }
    void _TuneMixDetails_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, std::string, bool > > > tunemix_details;
        ri >> tunemix_details;
        TuneMixDetails(tunemix_details);
    }
    void _TuneMixListUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t tunemix_count ;
        ri >> tunemix_count ;
        TuneMixListUpdated(tunemix_count );
    }
    void _TuneFeaturedFavStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t > tune_featuedfav_status;
        ri >> tune_featuedfav_status;
        TuneFeaturedFavStatus(tune_featuedfav_status);
    }
    void _FeaturedFavListUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, std::vector< uint8_t >, ::DBus::Struct< bool, bool, bool > > list_updated;
        ri >> list_updated;
        FeaturedFavListUpdated(list_updated);
    }
    void _SportFlashActiveStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< bool, uint32_t > sportsFlash_active_status;
        ri >> sportsFlash_active_status;
        SportFlashActiveStatus(sportsFlash_active_status);
    }
    void _SportFlashFrequencyStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sportsFlash_frequency_status;
        ri >> sportsFlash_frequency_status;
        SportFlashFrequencyStatus(sportsFlash_frequency_status);
    }
    void _SportFlashFirstTimeUsageStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool firstTimeUsage;
        ri >> firstTimeUsage;
        SportFlashFirstTimeUsageStatus(firstTimeUsage);
    }
    void _EnableSportFlashAlertStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t status;
        ri >> status;
        EnableSportFlashAlertStatus(status);
    }
    void _SelectSportsFlashTeamStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t status;
        ri >> status;
        SelectSportsFlashTeamStatus(status);
    }
    void _MoveSportsFlashTeamStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t status;
        ri >> status;
        MoveSportsFlashTeamStatus(status);
    }
    void _SportFlashAlert_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, uint32_t > sportsFlash_Alert;
        ri >> sportsFlash_Alert;
        SportFlashAlert(sportsFlash_Alert);
    }
    void _CancelAlert_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t > sportsFlash_cancel_status;
        ri >> sportsFlash_cancel_status;
        CancelAlert(sportsFlash_cancel_status);
    }
    void _PlayFlashAlertStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > playFlash_Alert_Status;
        ri >> playFlash_Alert_Status;
        PlayFlashAlertStatus(playFlash_Alert_Status);
    }
    void _AbortFlashAlertStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< bool, uint32_t, uint32_t > abortFlash_Alert_status;
        ri >> abortFlash_Alert_status;
        AbortFlashAlertStatus(abortFlash_Alert_status);
    }
    void _TurnOffAlertStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > turnOff_Alert_status;
        ri >> turnOff_Alert_status;
        TurnOffAlertStatus(turnOff_Alert_status);
    }
    void _ReplayFlashAlertStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > replay_Alert_status;
        ri >> replay_Alert_status;
        ReplayFlashAlertStatus(replay_Alert_status);
    }
    void _TWFlashActiveStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool tWFlash_active_status;
        ri >> tWFlash_active_status;
        TWFlashActiveStatus(tWFlash_active_status);
    }
    void _TWFlashFrequencyStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t tWFlash_frequency_status;
        ri >> tWFlash_frequency_status;
        TWFlashFrequencyStatus(tWFlash_frequency_status);
    }
    void _TWFirstTimeUsageStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool firstTimeUsage;
        ri >> firstTimeUsage;
        TWFirstTimeUsageStatus(firstTimeUsage);
    }
    void _EnableTWReportAlertStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t status;
        ri >> status;
        EnableTWReportAlertStatus(status);
    }
    void _SelectTWCityStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t status;
        ri >> status;
        SelectTWCityStatus(status);
    }
    void _TWCityNameCityID_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t >, bool, uint32_t, uint32_t > tW_CityNameCityID;
        ri >> tW_CityNameCityID;
        TWCityNameCityID(tW_CityNameCityID);
    }
    void _TWFlashAlert_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, std::vector< uint8_t >, uint32_t > tWFlash_Alert;
        ri >> tWFlash_Alert;
        TWFlashAlert(tWFlash_Alert);
    }
    void _FAVChannelsubscribed_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, bool, std::vector< uint8_t > > fAVChannel_subscribed;
        ri >> fAVChannel_subscribed;
        FAVChannelsubscribed(fAVChannel_subscribed);
    }
    void _FavSportTeamCount_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t favSportTeamCount;
        ri >> favSportTeamCount;
        FavSportTeamCount(favSportTeamCount);
    }
    void _ChannelValidityStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > validityStatus;
        ri >> validityStatus;
        ChannelValidityStatus(validityStatus);
    }
    void _UnlockSession_stub(const ::DBus::SignalMessage &sig)
    {
        UnlockSession();
    }
    void _SubscriptionUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        SubscriptionUpdated();
    }
    void _FlashAvailableStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t > > flashAvailable_Status;
        ri >> flashAvailable_Status;
        FlashAvailableStatus(flashAvailable_Status);
    }
};

} } 
namespace com {
namespace jci {

class tts_proxy
: public ::DBus::InterfaceProxy
{
public:

    tts_proxy()
    : ::DBus::InterfaceProxy("com.jci.tts")
    {
        connect_signal(tts_proxy, Status, _Status_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t ConnectToTTS(const std::string& clientName)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << clientName;
        call.member("ConnectToTTS");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DisconnectFromTTS(const std::string& clientName)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << clientName;
        call.member("DisconnectFromTTS");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void PlayText(const std::string& clientName, const std::string& string)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << clientName;
        wi << string;
        call.member("PlayText");
        ::DBus::Message ret = invoke_method (call);
    }

    void PausePlayback(const std::string& clientName)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << clientName;
        call.member("PausePlayback");
        ::DBus::Message ret = invoke_method (call);
    }

    void ResumePlayback(const std::string& clientName)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << clientName;
        call.member("ResumePlayback");
        ::DBus::Message ret = invoke_method (call);
    }

    void AbortPlayback(const std::string& clientName)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << clientName;
        call.member("AbortPlayback");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void Status(const int32_t& result) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t result;
        ri >> result;
        Status(result);
    }
};

} } 
namespace com {
namespace jci {
namespace tts {

class language_proxy
: public ::DBus::InterfaceProxy
{
public:

    language_proxy()
    : ::DBus::InterfaceProxy("com.jci.tts.language")
    {
        connect_signal(language_proxy, LanguageChangedCallback, _LanguageChangedCallback_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void SetLanguage(const int32_t& language)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << language;
        call.member("SetLanguage");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void LanguageChangedCallback(const int32_t& language) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _LanguageChangedCallback_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t language;
        ri >> language;
        LanguageChangedCallback(language);
    }
};

} } } 
namespace com {
namespace jci {

class audioPlayer_proxy
: public ::DBus::InterfaceProxy
{
public:

    audioPlayer_proxy()
    : ::DBus::InterfaceProxy("com.jci.audioPlayer")
    {
        connect_signal(audioPlayer_proxy, Exception, _Exception_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Open(int32_t& client_id, int32_t& result)
    {
        ::DBus::CallMessage call;
        call.member("Open");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> client_id;
        ri >> result;
    }

    void OpenByName(const std::string& device, int32_t& client_id, int32_t& result)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device;
        call.member("OpenByName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> client_id;
        ri >> result;
    }

    int32_t Close(const int32_t& client_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client_id;
        call.member("Close");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PlaySync(const int32_t& client_id, const std::string& fileName, const int32_t& mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client_id;
        wi << fileName;
        wi << mode;
        call.member("PlaySync");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PlayASync(const int32_t& client_id, const std::string& fileName, const int32_t& mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client_id;
        wi << fileName;
        wi << mode;
        call.member("PlayASync");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AbortSync(const int32_t& client_id, const std::string& fileName, const int32_t& abort_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client_id;
        wi << fileName;
        wi << abort_type;
        call.member("AbortSync");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AbortASync(const int32_t& client_id, const std::string& fileName, const int32_t& abort_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client_id;
        wi << fileName;
        wi << abort_type;
        call.member("AbortASync");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void Exception(const int16_t& id, const std::string& message) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Exception_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t id;
        ri >> id;
        std::string message;
        ri >> message;
        Exception(id, message);
    }
};

} } 
namespace com {
namespace jci {

class driverid_proxy
: public ::DBus::InterfaceProxy
{
public:

    driverid_proxy()
    : ::DBus::InterfaceProxy("com.jci.driverid")
    {
        connect_signal(driverid_proxy, EOLConfig, _EOLConfig_stub);
        connect_signal(driverid_proxy, Setting, _Setting_stub);
        connect_signal(driverid_proxy, Curr_DriverData, _Curr_DriverData_stub);
        connect_signal(driverid_proxy, Curr_DriverDataAsync, _Curr_DriverDataAsync_stub);
        connect_signal(driverid_proxy, Driver_List, _Driver_List_stub);
        connect_signal(driverid_proxy, Duplicate_Nickname, _Duplicate_Nickname_stub);
        connect_signal(driverid_proxy, SpeedRest_Flg, _SpeedRest_Flg_stub);
        connect_signal(driverid_proxy, ACC_OFF, _ACC_OFF_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t Get_DriveridConfig()
    {
        ::DBus::CallMessage call;
        call.member("Get_DriveridConfig");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Set_DriveridSetting(const uint32_t& setting_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setting_type;
        call.member("Set_DriveridSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetDriverIdData()
    {
        ::DBus::CallMessage call;
        call.member("GetDriverIdData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_DriverList()
    {
        ::DBus::CallMessage call;
        call.member("Get_DriverList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Change_DriverId(const uint8_t& drv_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << drv_id;
        call.member("Change_DriverId");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Change_DriverNickname(const ::DBus::Struct< std::vector< uint8_t > >& nickname)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << nickname;
        call.member("Change_DriverNickname");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SynUp_Ack_Rcvd()
    {
        ::DBus::CallMessage call;
        call.member("SynUp_Ack_Rcvd");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void EOLConfig(const uint16_t& eol_config) = 0;
    virtual void Setting(const bool& driverid_sett) = 0;
    virtual void Curr_DriverData(const ::DBus::Struct< uint8_t, std::vector< uint8_t >, bool, uint8_t >& curr_drv) = 0;
    virtual void Curr_DriverDataAsync(const ::DBus::Struct< uint8_t, std::vector< uint8_t >, bool, uint8_t >& curr_drv) = 0;
    virtual void Driver_List(const ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, std::vector< uint8_t >, bool, uint8_t > > >& drv_list) = 0;
    virtual void Duplicate_Nickname(const int32_t& dup_nickname) = 0;
    virtual void SpeedRest_Flg(const uint32_t& spd_flg) = 0;
    virtual void ACC_OFF(const bool& acc_state) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _EOLConfig_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t eol_config;
        ri >> eol_config;
        EOLConfig(eol_config);
    }
    void _Setting_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool driverid_sett;
        ri >> driverid_sett;
        Setting(driverid_sett);
    }
    void _Curr_DriverData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< uint8_t >, bool, uint8_t > curr_drv;
        ri >> curr_drv;
        Curr_DriverData(curr_drv);
    }
    void _Curr_DriverDataAsync_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< uint8_t >, bool, uint8_t > curr_drv;
        ri >> curr_drv;
        Curr_DriverDataAsync(curr_drv);
    }
    void _Driver_List_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, std::vector< uint8_t >, bool, uint8_t > > > drv_list;
        ri >> drv_list;
        Driver_List(drv_list);
    }
    void _Duplicate_Nickname_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t dup_nickname;
        ri >> dup_nickname;
        Duplicate_Nickname(dup_nickname);
    }
    void _SpeedRest_Flg_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t spd_flg;
        ri >> spd_flg;
        SpeedRest_Flg(spd_flg);
    }
    void _ACC_OFF_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool acc_state;
        ri >> acc_state;
        ACC_OFF(acc_state);
    }
};

} } 
namespace com {
namespace jci {
namespace blmsystem {

class Interface_proxy
: public ::DBus::InterfaceProxy
{
public:

    Interface_proxy()
    : ::DBus::InterfaceProxy("com.jci.blmsystem.Interface")
    {
        connect_signal(Interface_proxy, NotifyStateTransition, _NotifyStateTransition_stub);
        connect_signal(Interface_proxy, NotifyShutdown, _NotifyShutdown_stub);
        connect_signal(Interface_proxy, NotifyAccChange, _NotifyAccChange_stub);
        connect_signal(Interface_proxy, NotifySystemStateChange, _NotifySystemStateChange_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void OpenConnection(int32_t& status, uint32_t& unique_connection_id)
    {
        ::DBus::CallMessage call;
        call.member("OpenConnection");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> status;
        ri >> unique_connection_id;
    }

    int32_t CloseConnection()
    {
        ::DBus::CallMessage call;
        call.member("CloseConnection");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SafeShutDown()
    {
        ::DBus::CallMessage call;
        call.member("SafeShutDown");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SafeReboot()
    {
        ::DBus::CallMessage call;
        call.member("SafeReboot");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GenericReboot(const int32_t& mode_flags)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mode_flags;
        call.member("GenericReboot");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t FactoryReset()
    {
        ::DBus::CallMessage call;
        call.member("FactoryReset");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetCurrentAccStatus(int32_t& acc_state, int32_t& status)
    {
        ::DBus::CallMessage call;
        call.member("GetCurrentAccStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> acc_state;
        ri >> status;
    }

    void GetCurrentSystemState(uint32_t& system_state, int32_t& status)
    {
        ::DBus::CallMessage call;
        call.member("GetCurrentSystemState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> system_state;
        ri >> status;
    }

    void RegisterForStateTransitionAck(const uint32_t& from_state, const uint32_t& to_state, uint32_t& _from_state, uint32_t& _to_state, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << from_state;
        wi << to_state;
        call.member("RegisterForStateTransitionAck");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> _from_state;
        ri >> _to_state;
        ri >> status;
    }

    void AcknowledgeStateTransition(const uint32_t& from_state, const uint32_t& to_state, uint32_t& _from_state, uint32_t& _to_state, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << from_state;
        wi << to_state;
        call.member("AcknowledgeStateTransition");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> _from_state;
        ri >> _to_state;
        ri >> status;
    }

    void UnregisterFromStateTransitionAck(const uint32_t& from_state, const uint32_t& to_state, uint32_t& _from_state, uint32_t& _to_state, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << from_state;
        wi << to_state;
        call.member("UnregisterFromStateTransitionAck");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> _from_state;
        ri >> _to_state;
        ri >> status;
    }

    int32_t RegisterForShutdownAck()
    {
        ::DBus::CallMessage call;
        call.member("RegisterForShutdownAck");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AcknowledgeShutdown()
    {
        ::DBus::CallMessage call;
        call.member("AcknowledgeShutdown");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t UnregisterFromShutdownAck()
    {
        ::DBus::CallMessage call;
        call.member("UnregisterFromShutdownAck");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void SignalSystemStateEvent(const int32_t& event, const int32_t& event_info, int32_t& _event, int32_t& _event_info, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << event;
        wi << event_info;
        call.member("SignalSystemStateEvent");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> _event;
        ri >> _event_info;
        ri >> status;
    }

    int32_t ReportTestDiagEntering()
    {
        ::DBus::CallMessage call;
        call.member("ReportTestDiagEntering");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ReportTestDiagExiting()
    {
        ::DBus::CallMessage call;
        call.member("ReportTestDiagExiting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ReportGuiAvailable()
    {
        ::DBus::CallMessage call;
        call.member("ReportGuiAvailable");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetFactoryResetNum()
    {
        ::DBus::CallMessage call;
        call.member("GetFactoryResetNum");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void ReportXMInstalled(const int32_t& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << value;
        call.member("ReportXMInstalled");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void NotifyStateTransition(const uint32_t& current_state, const uint32_t& target_state) = 0;
    virtual void NotifyShutdown(const uint32_t& generic_reboot_flags) = 0;
    virtual void NotifyAccChange(const int32_t& acc_state, const uint32_t& system_state) = 0;
    virtual void NotifySystemStateChange(const uint32_t& old_state, const uint32_t& current_state) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _NotifyStateTransition_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t current_state;
        ri >> current_state;
        uint32_t target_state;
        ri >> target_state;
        NotifyStateTransition(current_state, target_state);
    }
    void _NotifyShutdown_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t generic_reboot_flags;
        ri >> generic_reboot_flags;
        NotifyShutdown(generic_reboot_flags);
    }
    void _NotifyAccChange_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t acc_state;
        ri >> acc_state;
        uint32_t system_state;
        ri >> system_state;
        NotifyAccChange(acc_state, system_state);
    }
    void _NotifySystemStateChange_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t old_state;
        ri >> old_state;
        uint32_t current_state;
        ri >> current_state;
        NotifySystemStateChange(old_state, current_state);
    }
};

} } } 
namespace com {
namespace jci {

class VIDEOCTRL_proxy
: public ::DBus::InterfaceProxy
{
public:

    VIDEOCTRL_proxy()
    : ::DBus::InterfaceProxy("com.jci.VIDEOCTRL")
    {
        connect_signal(VIDEOCTRL_proxy, VideoSignalChanged, _VideoSignalChanged_stub);
        connect_signal(VIDEOCTRL_proxy, onSettingsChanged, _onSettingsChanged_stub);
        connect_signal(VIDEOCTRL_proxy, CameraOffSignal, _CameraOffSignal_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t SelectVideoDevice(const int32_t& device)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device;
        call.member("SelectVideoDevice");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< bool, ::DBus::Struct< int32_t, int32_t >, ::DBus::Struct< int32_t, int32_t >, ::DBus::Struct< int32_t, int32_t >, ::DBus::Struct< int32_t, int32_t >, int32_t, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t > > GetCapability()
    {
        ::DBus::CallMessage call;
        call.member("GetCapability");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< bool, ::DBus::Struct< int32_t, int32_t >, ::DBus::Struct< int32_t, int32_t >, ::DBus::Struct< int32_t, int32_t >, ::DBus::Struct< int32_t, int32_t >, int32_t, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t > > argout;
        ri >> argout;
        return argout;
    }

    void TestVideoStatus(const int32_t& device, int32_t& videoStatus, int32_t& outDevice)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device;
        call.member("TestVideoStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> videoStatus;
        ri >> outDevice;
    }

    void GetVideoStatus(const int32_t& device, int32_t& videoStatus, int32_t& outDevice)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device;
        call.member("GetVideoStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> videoStatus;
        ri >> outDevice;
    }

    ::DBus::Struct< int32_t, int32_t, int32_t, int32_t > GetAdjustments()
    {
        ::DBus::CallMessage call;
        call.member("GetAdjustments");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, int32_t, int32_t, int32_t > argout;
        ri >> argout;
        return argout;
    }

    void SetDeviceInstalled(const int32_t& device, const int32_t& installed)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device;
        wi << installed;
        call.member("SetDeviceInstalled");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t SetContrast(const int32_t& contrast)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << contrast;
        call.member("SetContrast");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetBrightness(const int32_t& brightness)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << brightness;
        call.member("SetBrightness");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetTint(const int32_t& tint)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tint;
        call.member("SetTint");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetColor(const int32_t& color)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << color;
        call.member("SetColor");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DeselectDevice(const int32_t& device)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device;
        call.member("DeselectDevice");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetOutputViewport(const int32_t& device, const int32_t& x, const int32_t& y, const int32_t& width, const int32_t& height)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device;
        wi << x;
        wi << y;
        wi << width;
        wi << height;
        call.member("SetOutputViewport");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ResetAdjustments()
    {
        ::DBus::CallMessage call;
        call.member("ResetAdjustments");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void VideoSignalChanged(const int32_t& videoSignal, const int32_t& device) = 0;
    virtual void onSettingsChanged(const ::DBus::Struct< std::vector< ::DBus::Struct< int32_t, int32_t, int32_t, int32_t > > >& adjustments) = 0;
    virtual void CameraOffSignal(const int32_t& bucStatus, const int32_t& dvdStatus, const int32_t& tvStatus, const int32_t& cpStatus, const int32_t& aaStatus) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _VideoSignalChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t videoSignal;
        ri >> videoSignal;
        int32_t device;
        ri >> device;
        VideoSignalChanged(videoSignal, device);
    }
    void _onSettingsChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< ::DBus::Struct< int32_t, int32_t, int32_t, int32_t > > > adjustments;
        ri >> adjustments;
        onSettingsChanged(adjustments);
    }
    void _CameraOffSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t bucStatus;
        ri >> bucStatus;
        int32_t dvdStatus;
        ri >> dvdStatus;
        int32_t tvStatus;
        ri >> tvStatus;
        int32_t cpStatus;
        ri >> cpStatus;
        int32_t aaStatus;
        ri >> aaStatus;
        CameraOffSignal(bucStatus, dvdStatus, tvStatus, cpStatus, aaStatus);
    }
};

} } 
namespace com {
namespace jci {

class tds_proxy
: public ::DBus::InterfaceProxy
{
public:

    tds_proxy()
    : ::DBus::InterfaceProxy("com.jci.tds")
    {
        connect_signal(tds_proxy, TMC8A, _TMC8A_stub);
        connect_signal(tds_proxy, STM_TrafficEvent, _STM_TrafficEvent_stub);
        connect_signal(tds_proxy, STM_StationId, _STM_StationId_stub);
        connect_signal(tds_proxy, STM_RemoveTmt, _STM_RemoveTmt_stub);
        connect_signal(tds_proxy, ARTEXP_StationLogo, _ARTEXP_StationLogo_stub);
        connect_signal(tds_proxy, ARTEXP_AlbumArt, _ARTEXP_AlbumArt_stub);
        connect_signal(tds_proxy, STM_TileElapseTimeUpdate, _STM_TileElapseTimeUpdate_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t STM_Set_ProcessMode_async(const uint32_t& processMode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << processMode;
        call.member("STM_Set_ProcessMode_async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void STM_GetTMIFile(const int32_t& mapID, ::DBus::Struct< std::vector< ::DBus::Struct< int32_t, std::string > > >& fileInfo, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mapID;
        call.member("STM_GetTMIFile");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> fileInfo;
        ri >> return_value;
    }

    int32_t ARTEXP_HDStationExit_async(const double& oldFrequency)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << oldFrequency;
        call.member("ARTEXP_HDStationExit_async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ARTEXP_HDStationEnter_async(const double& newFrequency)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << newFrequency;
        call.member("ARTEXP_HDStationEnter_async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ARTEXP_HDSubStationExit_async()
    {
        ::DBus::CallMessage call;
        call.member("ARTEXP_HDSubStationExit_async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ARTEXP_GetStationLogo_async(const uint32_t& serviceNumber, const double& frequency)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << serviceNumber;
        wi << frequency;
        call.member("ARTEXP_GetStationLogo_async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ARTEXP_GetAlbumArt_async(const uint32_t& serviceNumber, const double& frequency, const uint32_t& lotId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << serviceNumber;
        wi << frequency;
        wi << lotId;
        call.member("ARTEXP_GetAlbumArt_async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ExecuteTestCase(const uint32_t& testCaseID)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << testCaseID;
        call.member("ExecuteTestCase");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void TMC8A(const uint16_t& block1, const uint16_t& block2, const uint16_t& block3, const uint16_t& block4) = 0;
    virtual void STM_TrafficEvent(const uint32_t& eventSignal) = 0;
    virtual void STM_StationId(const uint32_t& stationId) = 0;
    virtual void STM_RemoveTmt(const uint32_t& type) = 0;
    virtual void ARTEXP_StationLogo(const uint32_t& serviceNumber, const double& frequency, const bool& fileExists) = 0;
    virtual void ARTEXP_AlbumArt(const uint32_t& serviceNumber, const double& frequency, const uint32_t& lotId, const bool& fileExists) = 0;
    virtual void STM_TileElapseTimeUpdate(const uint32_t& minsElapsed) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _TMC8A_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t block1;
        ri >> block1;
        uint16_t block2;
        ri >> block2;
        uint16_t block3;
        ri >> block3;
        uint16_t block4;
        ri >> block4;
        TMC8A(block1, block2, block3, block4);
    }
    void _STM_TrafficEvent_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t eventSignal;
        ri >> eventSignal;
        STM_TrafficEvent(eventSignal);
    }
    void _STM_StationId_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t stationId;
        ri >> stationId;
        STM_StationId(stationId);
    }
    void _STM_RemoveTmt_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        STM_RemoveTmt(type);
    }
    void _ARTEXP_StationLogo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t serviceNumber;
        ri >> serviceNumber;
        double frequency;
        ri >> frequency;
        bool fileExists;
        ri >> fileExists;
        ARTEXP_StationLogo(serviceNumber, frequency, fileExists);
    }
    void _ARTEXP_AlbumArt_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t serviceNumber;
        ri >> serviceNumber;
        double frequency;
        ri >> frequency;
        uint32_t lotId;
        ri >> lotId;
        bool fileExists;
        ri >> fileExists;
        ARTEXP_AlbumArt(serviceNumber, frequency, lotId, fileExists);
    }
    void _STM_TileElapseTimeUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t minsElapsed;
        ri >> minsElapsed;
        STM_TileElapseTimeUpdate(minsElapsed);
    }
};

} } 
namespace com {
namespace jci {

class traffic_proxy
: public ::DBus::InterfaceProxy
{
public:

    traffic_proxy()
    : ::DBus::InterfaceProxy("com.jci.traffic")
    {
        connect_signal(traffic_proxy, BGColorInfo, _BGColorInfo_stub);
        connect_signal(traffic_proxy, NewTrafficMap, _NewTrafficMap_stub);
        connect_signal(traffic_proxy, MapUpdate, _MapUpdate_stub);
        connect_signal(traffic_proxy, GpsInfoUpdate, _GpsInfoUpdate_stub);
        connect_signal(traffic_proxy, LockedToStation, _LockedToStation_stub);
        connect_signal(traffic_proxy, ApplicationStatus, _ApplicationStatus_stub);
        connect_signal(traffic_proxy, LastTileUpdatedTime, _LastTileUpdatedTime_stub);
        connect_signal(traffic_proxy, TestModeText, _TestModeText_stub);
        connect_signal(traffic_proxy, VICSFrequencyChangeAck, _VICSFrequencyChangeAck_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t SetNewMapUpdateEnable_async(const uint32_t& enable)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << enable;
        call.member("SetNewMapUpdateEnable_async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetMapInFocus_async(const uint32_t& focus)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << focus;
        call.member("SetMapInFocus_async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetGpsInfo_async()
    {
        ::DBus::CallMessage call;
        call.member("GetGpsInfo_async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void BGColorInfo(const uint32_t& colorR, const uint32_t& colorG, const uint32_t& colorB) = 0;
    virtual void NewTrafficMap(const uint32_t& trafficMapId) = 0;
    virtual void MapUpdate(const uint32_t& mapType, const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string > > >& mapInfo) = 0;
    virtual void GpsInfoUpdate(const ::DBus::Struct< int32_t, int32_t, uint32_t >& gpsInfo) = 0;
    virtual void LockedToStation(const uint32_t& lockStatus) = 0;
    virtual void ApplicationStatus(const uint32_t& appStatus) = 0;
    virtual void LastTileUpdatedTime(const uint32_t& lastUpdatedTime) = 0;
    virtual void TestModeText(const std::string& testText) = 0;
    virtual void VICSFrequencyChangeAck(const double& frequency, const int32_t& state) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _BGColorInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t colorR;
        ri >> colorR;
        uint32_t colorG;
        ri >> colorG;
        uint32_t colorB;
        ri >> colorB;
        BGColorInfo(colorR, colorG, colorB);
    }
    void _NewTrafficMap_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t trafficMapId;
        ri >> trafficMapId;
        NewTrafficMap(trafficMapId);
    }
    void _MapUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t mapType;
        ri >> mapType;
        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string > > > mapInfo;
        ri >> mapInfo;
        MapUpdate(mapType, mapInfo);
    }
    void _GpsInfoUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t, uint32_t > gpsInfo;
        ri >> gpsInfo;
        GpsInfoUpdate(gpsInfo);
    }
    void _LockedToStation_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t lockStatus;
        ri >> lockStatus;
        LockedToStation(lockStatus);
    }
    void _ApplicationStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t appStatus;
        ri >> appStatus;
        ApplicationStatus(appStatus);
    }
    void _LastTileUpdatedTime_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t lastUpdatedTime;
        ri >> lastUpdatedTime;
        LastTileUpdatedTime(lastUpdatedTime);
    }
    void _TestModeText_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string testText;
        ri >> testText;
        TestModeText(testText);
    }
    void _VICSFrequencyChangeAck_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        double frequency;
        ri >> frequency;
        int32_t state;
        ri >> state;
        VICSFrequencyChangeAck(frequency, state);
    }
};

} } 
namespace com {
namespace jci {

class sxms_nng_proxy
: public ::DBus::InterfaceProxy
{
public:

    sxms_nng_proxy()
    : ::DBus::InterfaceProxy("com.jci.sxms_nng")
    {
        connect_signal(sxms_nng_proxy, Apogee_DataAvailable, _Apogee_DataAvailable_stub);
        connect_signal(sxms_nng_proxy, Apogee_RealTimeFlowData, _Apogee_RealTimeFlowData_stub);
        connect_signal(sxms_nng_proxy, Apogee_P1FlowData, _Apogee_P1FlowData_stub);
        connect_signal(sxms_nng_proxy, Apogee_P2FlowData, _Apogee_P2FlowData_stub);
        connect_signal(sxms_nng_proxy, Apogee_P3FlowData, _Apogee_P3FlowData_stub);
        connect_signal(sxms_nng_proxy, Apogee_P4FlowData, _Apogee_P4FlowData_stub);
        connect_signal(sxms_nng_proxy, Apogee_RampData, _Apogee_RampData_stub);
        connect_signal(sxms_nng_proxy, Apogee_ConstructionIncidentData, _Apogee_ConstructionIncidentData_stub);
        connect_signal(sxms_nng_proxy, DataServiceSubscription, _DataServiceSubscription_stub);
        connect_signal(sxms_nng_proxy, AGweather_DatasetStart, _AGweather_DatasetStart_stub);
        connect_signal(sxms_nng_proxy, AGweather_NowRadData, _AGweather_NowRadData_stub);
        connect_signal(sxms_nng_proxy, AGweather_FrontData, _AGweather_FrontData_stub);
        connect_signal(sxms_nng_proxy, AGweather_SurfaceIsobar, _AGweather_SurfaceIsobar_stub);
        connect_signal(sxms_nng_proxy, AGweather_PressureCenter, _AGweather_PressureCenter_stub);
        connect_signal(sxms_nng_proxy, AGweather_StormAttributes, _AGweather_StormAttributes_stub);
        connect_signal(sxms_nng_proxy, AGweather_StormPosition, _AGweather_StormPosition_stub);
        connect_signal(sxms_nng_proxy, AGweather_DatasetStop, _AGweather_DatasetStop_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint32_t GetDataServiceSubscriptions()
    {
        ::DBus::CallMessage call;
        call.member("GetDataServiceSubscriptions");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void Apogee_CreateCollectionReq(const ::DBus::Struct< ::DBus::Struct< double, double >, ::DBus::Struct< double, double > >& mbr, const uint32_t& types, uint32_t& collectionID, uint32_t& return_value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mbr;
        wi << types;
        call.member("Apogee_CreateCollectionReq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> collectionID;
        ri >> return_value;
    }

    uint32_t Apogee_ModifyCollectionReq(const uint32_t& collectionID, const ::DBus::Struct< ::DBus::Struct< double, double >, ::DBus::Struct< double, double > >& mbr)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << collectionID;
        wi << mbr;
        call.member("Apogee_ModifyCollectionReq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t Apogee_RemoveCollectionReq(const uint32_t& collectionID)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << collectionID;
        call.member("Apogee_RemoveCollectionReq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void Apogee_GetBSAList(const ::DBus::Struct< ::DBus::Struct< double, double >, ::DBus::Struct< double, double > >& mbr, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t > > >& bsaList, uint32_t& return_value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mbr;
        call.member("Apogee_GetBSAList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> bsaList;
        ri >> return_value;
    }

    uint32_t Apogee_SetExtractionFilter(const uint32_t& collectionID, const ::DBus::Struct< ::DBus::Struct< double, double >, ::DBus::Struct< double, double > >& mbr, const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t > > >& bsaList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << collectionID;
        wi << mbr;
        wi << bsaList;
        call.member("Apogee_SetExtractionFilter");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t Apogee_ExtractData(const uint32_t& collectionID, const uint32_t& type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << collectionID;
        wi << type;
        call.member("Apogee_ExtractData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t AGWeather_GetData(const uint32_t& type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << type;
        call.member("AGWeather_GetData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void Apogee_DataAvailable(const uint32_t& collectionID, const uint32_t& types) = 0;
    virtual void Apogee_RealTimeFlowData(const uint32_t& collectionID, const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, uint32_t > > > > >& flowVector) = 0;
    virtual void Apogee_P1FlowData(const uint32_t& collectionID, const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, uint32_t > > > > >& flowVector) = 0;
    virtual void Apogee_P2FlowData(const uint32_t& collectionID, const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, uint32_t > > > > >& flowVector) = 0;
    virtual void Apogee_P3FlowData(const uint32_t& collectionID, const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, uint32_t > > > > >& flowVector) = 0;
    virtual void Apogee_P4FlowData(const uint32_t& collectionID, const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, uint32_t > > > > >& flowVector) = 0;
    virtual void Apogee_RampData(const uint32_t& collectionID, const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, ::DBus::Struct< ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t > > >, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t > > >, uint32_t > > > >& rampData) = 0;
    virtual void Apogee_ConstructionIncidentData(const uint32_t& collectionID, const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t, uint8_t, ::DBus::Struct< uint32_t, uint8_t, uint8_t, uint8_t, uint32_t, uint8_t >, ::DBus::Struct< ::DBus::Struct< double, double >, std::string >, uint8_t, std::string > > >& ciData) = 0;
    virtual void DataServiceSubscription(const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t > > >& dataSubscriptions) = 0;
    virtual void AGweather_DatasetStart(const uint32_t& product) = 0;
    virtual void AGweather_NowRadData(const ::DBus::Struct< uint32_t, ::DBus::Struct< double, double >, ::DBus::Struct< double, double >, uint32_t, uint32_t, std::string, uint32_t >& nowRadData) = 0;
    virtual void AGweather_FrontData(const ::DBus::Struct< uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< double, double > > >, uint32_t >& frontData) = 0;
    virtual void AGweather_SurfaceIsobar(const ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< double, double > > >, double, uint32_t >& isobarData) = 0;
    virtual void AGweather_PressureCenter(const ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< double, double > > >, uint32_t, double, uint32_t >& pressureCenterData) = 0;
    virtual void AGweather_StormAttributes(const ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< double, double > > >, std::string, double, uint32_t, double, double, uint32_t >& stormAttributesData) = 0;
    virtual void AGweather_StormPosition(const ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< double, double > > >, std::string, std::string, uint32_t, ::DBus::Struct< double, double, double, double, double >, uint32_t, uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< double, double > > >, double > > > >& stormPositionData) = 0;
    virtual void AGweather_DatasetStop(const uint32_t& product) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Apogee_DataAvailable_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t collectionID;
        ri >> collectionID;
        uint32_t types;
        ri >> types;
        Apogee_DataAvailable(collectionID, types);
    }
    void _Apogee_RealTimeFlowData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t collectionID;
        ri >> collectionID;
        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, uint32_t > > > > > flowVector;
        ri >> flowVector;
        Apogee_RealTimeFlowData(collectionID, flowVector);
    }
    void _Apogee_P1FlowData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t collectionID;
        ri >> collectionID;
        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, uint32_t > > > > > flowVector;
        ri >> flowVector;
        Apogee_P1FlowData(collectionID, flowVector);
    }
    void _Apogee_P2FlowData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t collectionID;
        ri >> collectionID;
        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, uint32_t > > > > > flowVector;
        ri >> flowVector;
        Apogee_P2FlowData(collectionID, flowVector);
    }
    void _Apogee_P3FlowData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t collectionID;
        ri >> collectionID;
        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, uint32_t > > > > > flowVector;
        ri >> flowVector;
        Apogee_P3FlowData(collectionID, flowVector);
    }
    void _Apogee_P4FlowData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t collectionID;
        ri >> collectionID;
        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t, uint8_t > > >, uint32_t > > > > > flowVector;
        ri >> flowVector;
        Apogee_P4FlowData(collectionID, flowVector);
    }
    void _Apogee_RampData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t collectionID;
        ri >> collectionID;
        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, ::DBus::Struct< ::DBus::Struct< std::vector< ::DBus::Struct< uint8_t > > >, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t > > >, uint32_t > > > > rampData;
        ri >> rampData;
        Apogee_RampData(collectionID, rampData);
    }
    void _Apogee_ConstructionIncidentData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t collectionID;
        ri >> collectionID;
        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t, uint8_t, ::DBus::Struct< uint32_t, uint8_t, uint8_t, uint8_t, uint32_t, uint8_t >, ::DBus::Struct< ::DBus::Struct< double, double >, std::string >, uint8_t, std::string > > > ciData;
        ri >> ciData;
        Apogee_ConstructionIncidentData(collectionID, ciData);
    }
    void _DataServiceSubscription_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t > > > dataSubscriptions;
        ri >> dataSubscriptions;
        DataServiceSubscription(dataSubscriptions);
    }
    void _AGweather_DatasetStart_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t product;
        ri >> product;
        AGweather_DatasetStart(product);
    }
    void _AGweather_NowRadData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, ::DBus::Struct< double, double >, ::DBus::Struct< double, double >, uint32_t, uint32_t, std::string, uint32_t > nowRadData;
        ri >> nowRadData;
        AGweather_NowRadData(nowRadData);
    }
    void _AGweather_FrontData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< double, double > > >, uint32_t > frontData;
        ri >> frontData;
        AGweather_FrontData(frontData);
    }
    void _AGweather_SurfaceIsobar_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< double, double > > >, double, uint32_t > isobarData;
        ri >> isobarData;
        AGweather_SurfaceIsobar(isobarData);
    }
    void _AGweather_PressureCenter_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< double, double > > >, uint32_t, double, uint32_t > pressureCenterData;
        ri >> pressureCenterData;
        AGweather_PressureCenter(pressureCenterData);
    }
    void _AGweather_StormAttributes_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< double, double > > >, std::string, double, uint32_t, double, double, uint32_t > stormAttributesData;
        ri >> stormAttributesData;
        AGweather_StormAttributes(stormAttributesData);
    }
    void _AGweather_StormPosition_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< double, double > > >, std::string, std::string, uint32_t, ::DBus::Struct< double, double, double, double, double >, uint32_t, uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< double, double > > >, double > > > > stormPositionData;
        ri >> stormPositionData;
        AGweather_StormPosition(stormPositionData);
    }
    void _AGweather_DatasetStop_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t product;
        ri >> product;
        AGweather_DatasetStop(product);
    }
};

} } 
namespace com {
namespace jci {

class auxin_proxy
: public ::DBus::InterfaceProxy
{
public:

    auxin_proxy()
    : ::DBus::InterfaceProxy("com.jci.auxin")
    {
        connect_signal(auxin_proxy, Status, _Status_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t Mode_Req(const uint8_t& mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mode;
        call.member("Mode_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DeviceStatus_Req()
    {
        ::DBus::CallMessage call;
        call.member("DeviceStatus_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetAuxinStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetAuxinStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void Status(const uint8_t& status_value) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t status_value;
        ri >> status_value;
        Status(status_value);
    }
};

} } 
namespace com {
namespace jci {

class dvd_proxy
: public ::DBus::InterfaceProxy
{
public:

    dvd_proxy()
    : ::DBus::InterfaceProxy("com.jci.dvd")
    {
        connect_signal(dvd_proxy, DeviceStatusEvent, _DeviceStatusEvent_stub);
        connect_signal(dvd_proxy, PlayingStatusEvent, _PlayingStatusEvent_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t SwitchState(const uint32_t& state)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << state;
        call.member("SwitchState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ChangeSetting(const uint32_t& setting, const int32_t& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setting;
        wi << value;
        call.member("ChangeSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetSetting(const uint32_t& setting)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setting;
        call.member("GetSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PinOperation(const uint32_t& cmd, const uint32_t& pin)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << cmd;
        wi << pin;
        call.member("PinOperation");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DeviceCommand(const uint32_t& cmd)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << cmd;
        call.member("DeviceCommand");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ScrubberBarControl(const uint32_t& percentage)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << percentage;
        call.member("ScrubberBarControl");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, int32_t, int32_t, uint32_t, uint8_t > GetDvdStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetDvdStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, int32_t, int32_t, uint32_t, uint8_t > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void DeviceStatusEvent(const uint32_t& event) = 0;
    virtual void PlayingStatusEvent(const ::DBus::Struct< uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& playingStatusData) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _DeviceStatusEvent_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t event;
        ri >> event;
        DeviceStatusEvent(event);
    }
    void _PlayingStatusEvent_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t > playingStatusData;
        ri >> playingStatusData;
        PlayingStatusEvent(playingStatusData);
    }
};

} } 
namespace com {
namespace jci {

class settings_proxy
: public ::DBus::InterfaceProxy
{
public:

    settings_proxy()
    : ::DBus::InterfaceProxy("com.jci.settings")
    {
        connect_signal(settings_proxy, OnChangeSignal_Settings_U8, _OnChangeSignal_Settings_U8_stub);
        connect_signal(settings_proxy, OnChangeSignal_Settings_S16, _OnChangeSignal_Settings_S16_stub);
        connect_signal(settings_proxy, OnChangeSignal_Settings_U32, _OnChangeSignal_Settings_U32_stub);
        connect_signal(settings_proxy, OnChangeSignal_Settings_BLM_Settings_pChar, _OnChangeSignal_Settings_BLM_Settings_pChar_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t Connect(const std::string& client_name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client_name;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Disconnect(const std::string& client_name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client_name;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void Get_Settings_U8(const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint32_t& user_fun, const uint32_t& key_actions, uint8_t& val, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << user_fun;
        wi << key_actions;
        call.member("Get_Settings_U8");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> val;
        ri >> user_fun_out;
        ri >> status;
    }

    void Set_Settings_U8(const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint8_t& val, const uint32_t& user_fun, const uint32_t& key_actions, uint8_t& val_ret, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << val;
        wi << user_fun;
        wi << key_actions;
        call.member("Set_Settings_U8");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> val_ret;
        ri >> user_fun_out;
        ri >> status;
    }

    void OnChange_Settings_U8(const std::string& client_name, const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint32_t& user_signalcb_fun, const uint32_t& user_fun, const uint32_t& key_actions, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client_name;
        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << user_signalcb_fun;
        wi << user_fun;
        wi << key_actions;
        call.member("OnChange_Settings_U8");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> user_fun_out;
        ri >> status;
    }

    void Reset_Settings_U8(const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint32_t& user_fun, const uint32_t& key_actions, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << user_fun;
        wi << key_actions;
        call.member("Reset_Settings_U8");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> user_fun_out;
        ri >> status;
    }

    void Get_Settings_S16(const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint32_t& user_fun, const uint32_t& key_actions, int16_t& val, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << user_fun;
        wi << key_actions;
        call.member("Get_Settings_S16");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> val;
        ri >> user_fun_out;
        ri >> status;
    }

    void Set_Settings_S16(const std::string& key_path, const std::string& key_group, const std::string& key_name, const int16_t& val, const uint32_t& user_fun, const uint32_t& key_actions, int16_t& val_ret, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << val;
        wi << user_fun;
        wi << key_actions;
        call.member("Set_Settings_S16");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> val_ret;
        ri >> user_fun_out;
        ri >> status;
    }

    void OnChange_Settings_S16(const std::string& client_name, const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint32_t& user_signalcb_fun, const uint32_t& user_fun, const uint32_t& key_actions, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client_name;
        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << user_signalcb_fun;
        wi << user_fun;
        wi << key_actions;
        call.member("OnChange_Settings_S16");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> user_fun_out;
        ri >> status;
    }

    void Reset_Settings_S16(const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint32_t& user_fun, const uint32_t& key_actions, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << user_fun;
        wi << key_actions;
        call.member("Reset_Settings_S16");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> user_fun_out;
        ri >> status;
    }

    void Get_Settings_U32(const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint32_t& user_fun, const uint32_t& key_actions, uint32_t& val, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << user_fun;
        wi << key_actions;
        call.member("Get_Settings_U32");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> val;
        ri >> user_fun_out;
        ri >> status;
    }

    void Set_Settings_U32(const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint32_t& val, const uint32_t& user_fun, const uint32_t& key_actions, uint32_t& val_ret, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << val;
        wi << user_fun;
        wi << key_actions;
        call.member("Set_Settings_U32");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> val_ret;
        ri >> user_fun_out;
        ri >> status;
    }

    void OnChange_Settings_U32(const std::string& client_name, const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint32_t& user_signalcb_fun, const uint32_t& user_fun, const uint32_t& key_actions, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client_name;
        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << user_signalcb_fun;
        wi << user_fun;
        wi << key_actions;
        call.member("OnChange_Settings_U32");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> user_fun_out;
        ri >> status;
    }

    void Reset_Settings_U32(const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint32_t& user_fun, const uint32_t& key_actions, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << user_fun;
        wi << key_actions;
        call.member("Reset_Settings_U32");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> user_fun_out;
        ri >> status;
    }

    void Get_Settings_BLM_Settings_pChar(const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint32_t& user_fun, const uint32_t& key_actions, std::string& val, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << user_fun;
        wi << key_actions;
        call.member("Get_Settings_BLM_Settings_pChar");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> val;
        ri >> user_fun_out;
        ri >> status;
    }

    void Set_Settings_BLM_Settings_pChar(const std::string& key_path, const std::string& key_group, const std::string& key_name, const std::string& val, const uint32_t& user_fun, const uint32_t& key_actions, std::string& val_ret, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << val;
        wi << user_fun;
        wi << key_actions;
        call.member("Set_Settings_BLM_Settings_pChar");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> val_ret;
        ri >> user_fun_out;
        ri >> status;
    }

    void OnChange_Settings_BLM_Settings_pChar(const std::string& client_name, const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint32_t& user_signalcb_fun, const uint32_t& user_fun, const uint32_t& key_actions, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << client_name;
        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << user_signalcb_fun;
        wi << user_fun;
        wi << key_actions;
        call.member("OnChange_Settings_BLM_Settings_pChar");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> user_fun_out;
        ri >> status;
    }

    void Reset_Settings_BLM_Settings_pChar(const std::string& key_path, const std::string& key_group, const std::string& key_name, const uint32_t& user_fun, const uint32_t& key_actions, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key_path;
        wi << key_group;
        wi << key_name;
        wi << user_fun;
        wi << key_actions;
        call.member("Reset_Settings_BLM_Settings_pChar");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> user_fun_out;
        ri >> status;
    }

    void Reset_SettingsGroup(const int16_t& key_group, const uint32_t& user_fun, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << key_group;
        wi << user_fun;
        call.member("Reset_SettingsGroup");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> user_fun_out;
        ri >> status;
    }

    void Settings_RPC(const uint32_t& settings_cmd, const uint32_t& user_fun, uint32_t& user_fun_out, uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << settings_cmd;
        wi << user_fun;
        call.member("Settings_RPC");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> user_fun_out;
        ri >> status;
    }


public:

    /* signal handlers for this interface
     */
    virtual void OnChangeSignal_Settings_U8(const uint8_t& val, const uint32_t& user_fun_out, const uint32_t& status) = 0;
    virtual void OnChangeSignal_Settings_S16(const int16_t& val, const uint32_t& user_fun_out, const uint32_t& status) = 0;
    virtual void OnChangeSignal_Settings_U32(const uint32_t& val, const uint32_t& user_fun_out, const uint32_t& status) = 0;
    virtual void OnChangeSignal_Settings_BLM_Settings_pChar(const std::string& val, const uint32_t& user_fun_out, const uint32_t& status) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _OnChangeSignal_Settings_U8_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t val;
        ri >> val;
        uint32_t user_fun_out;
        ri >> user_fun_out;
        uint32_t status;
        ri >> status;
        OnChangeSignal_Settings_U8(val, user_fun_out, status);
    }
    void _OnChangeSignal_Settings_S16_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t val;
        ri >> val;
        uint32_t user_fun_out;
        ri >> user_fun_out;
        uint32_t status;
        ri >> status;
        OnChangeSignal_Settings_S16(val, user_fun_out, status);
    }
    void _OnChangeSignal_Settings_U32_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t val;
        ri >> val;
        uint32_t user_fun_out;
        ri >> user_fun_out;
        uint32_t status;
        ri >> status;
        OnChangeSignal_Settings_U32(val, user_fun_out, status);
    }
    void _OnChangeSignal_Settings_BLM_Settings_pChar_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string val;
        ri >> val;
        uint32_t user_fun_out;
        ri >> user_fun_out;
        uint32_t status;
        ri >> status;
        OnChangeSignal_Settings_BLM_Settings_pChar(val, user_fun_out, status);
    }
};

} } 
namespace com {
namespace jci {

class xmdata_proxy
: public ::DBus::InterfaceProxy
{
public:

    xmdata_proxy()
    : ::DBus::InterfaceProxy("com.jci.xmdata")
    {
        connect_signal(xmdata_proxy, SubscriptionStatus, _SubscriptionStatus_stub);
        connect_signal(xmdata_proxy, DataServiceSubscription, _DataServiceSubscription_stub);
        connect_signal(xmdata_proxy, DataAvailable, _DataAvailable_stub);
        connect_signal(xmdata_proxy, InstallStatus, _InstallStatus_stub);
        connect_signal(xmdata_proxy, ESNInfo, _ESNInfo_stub);
        connect_signal(xmdata_proxy, VehicleLocation, _VehicleLocation_stub);
        connect_signal(xmdata_proxy, FuelDataUpdated, _FuelDataUpdated_stub);
        connect_signal(xmdata_proxy, StockAdded, _StockAdded_stub);
        connect_signal(xmdata_proxy, StockRemoved, _StockRemoved_stub);
        connect_signal(xmdata_proxy, StockDataUpdated, _StockDataUpdated_stub);
        connect_signal(xmdata_proxy, StockOTAUnAvailable, _StockOTAUnAvailable_stub);
        connect_signal(xmdata_proxy, MoviesDataUpdated, _MoviesDataUpdated_stub);
        connect_signal(xmdata_proxy, WeatherForecastDataUpdated, _WeatherForecastDataUpdated_stub);
        connect_signal(xmdata_proxy, WSAlertDataUpdated, _WSAlertDataUpdated_stub);
        connect_signal(xmdata_proxy, WSHighAlertData, _WSHighAlertData_stub);
        connect_signal(xmdata_proxy, CityListAvailable, _CityListAvailable_stub);
        connect_signal(xmdata_proxy, ParkingDataUpdated, _ParkingDataUpdated_stub);
        connect_signal(xmdata_proxy, SportsDataUpdated, _SportsDataUpdated_stub);
        connect_signal(xmdata_proxy, ShowSXMServices, _ShowSXMServices_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint32_t GetSubscriptionStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetSubscriptionStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetDataServiceSubscriptions()
    {
        ::DBus::CallMessage call;
        call.member("GetDataServiceSubscriptions");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetDataAvailable()
    {
        ::DBus::CallMessage call;
        call.member("GetDataAvailable");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetInstallStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetInstallStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetESN()
    {
        ::DBus::CallMessage call;
        call.member("GetESN");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetVehicleLocation()
    {
        ::DBus::CallMessage call;
        call.member("GetVehicleLocation");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AddStock(const std::string& stockSymbol)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << stockSymbol;
        call.member("AddStock");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RemoveStock(const std::string& stockSymbol)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << stockSymbol;
        call.member("RemoveStock");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetStockCount(int32_t& return_value, uint32_t& count)
    {
        ::DBus::CallMessage call;
        call.member("GetStockCount");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> count;
    }

    int32_t GetWSAlertData()
    {
        ::DBus::CallMessage call;
        call.member("GetWSAlertData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SaveWSAlertSetting(const bool& popUpSetting)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << popUpSetting;
        call.member("SaveWSAlertSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetWSAlertSetting(int32_t& return_value, bool& popUpSetting)
    {
        ::DBus::CallMessage call;
        call.member("GetWSAlertSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> popUpSetting;
    }

    void WSHighAlertDataOverride(const uint32_t& alertID)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << alertID;
        call.member("WSHighAlertDataOverride");
        ::DBus::Message ret = invoke_method (call);
    }

    void GetWSHighAlertData(uint32_t& alertID, std::string& alertName, uint16_t& alertPriority, std::string& alertDesc, uint32_t& alertAvailability)
    {
        ::DBus::CallMessage call;
        call.member("GetWSHighAlertData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> alertID;
        ri >> alertName;
        ri >> alertPriority;
        ri >> alertDesc;
        ri >> alertAvailability;
    }

    uint32_t SelectState(const std::string& stateName)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << stateName;
        call.member("SelectState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t SelectCity(const std::string& cityName)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << cityName;
        call.member("SelectCity");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void GetRecentCities(uint32_t& return_value, ::DBus::Struct< std::vector< std::string > >& cityList)
    {
        ::DBus::CallMessage call;
        call.member("GetRecentCities");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> cityList;
    }

    uint32_t SetSelectedRate(const uint32_t& rateType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << rateType;
        call.member("SetSelectedRate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void GetSelectedRate(uint32_t& return_value, uint32_t& rateType)
    {
        ::DBus::CallMessage call;
        call.member("GetSelectedRate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> rateType;
    }

    int32_t SaveParkingCountrySetting(const uint32_t& parkingCountry)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << parkingCountry;
        call.member("SaveParkingCountrySetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetParkingCountrySetting()
    {
        ::DBus::CallMessage call;
        call.member("GetParkingCountrySetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void GetLastViewedSportTeamList(uint32_t& return_value, ::DBus::Struct< std::vector< std::string > >& sportsList)
    {
        ::DBus::CallMessage call;
        call.member("GetLastViewedSportTeamList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> sportsList;
    }

    uint32_t SelectSportTeam(const std::string& teamInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << teamInfo;
        call.member("SelectSportTeam");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t DisplayNNGServices(const uint32_t& service)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << service;
        call.member("DisplayNNGServices");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SaveFuelSetting(const uint32_t& fuelType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fuelType;
        call.member("SaveFuelSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SaveFuelBrandSetting(const ::DBus::Struct< std::vector< std::string > >& brandList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << brandList;
        call.member("SaveFuelBrandSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SaveFuelCountrySetting(const uint32_t& fuelCountry)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fuelCountry;
        call.member("SaveFuelCountrySetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetFuelSetting()
    {
        ::DBus::CallMessage call;
        call.member("GetFuelSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void GetFuelBrandSetting(uint32_t& return_value, ::DBus::Struct< std::vector< std::string > >& brandList)
    {
        ::DBus::CallMessage call;
        call.member("GetFuelBrandSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> brandList;
    }

    uint32_t GetFuelCountrySetting()
    {
        ::DBus::CallMessage call;
        call.member("GetFuelCountrySetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void GetWeatherCitySelect(bool& selected, std::string& cityName)
    {
        ::DBus::CallMessage call;
        call.member("GetWeatherCitySelect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> selected;
        ri >> cityName;
    }


public:

    /* signal handlers for this interface
     */
    virtual void SubscriptionStatus(const ::DBus::Struct< uint32_t, uint8_t, uint32_t, std::string, std::string >& subscriptionDetails) = 0;
    virtual void DataServiceSubscription(const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t > > >& dataSubscriptions) = 0;
    virtual void DataAvailable(const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t > > >& dataAvailable) = 0;
    virtual void InstallStatus(const int32_t& status) = 0;
    virtual void ESNInfo(const std::string& esn_val ) = 0;
    virtual void VehicleLocation(const double& latitude, const double& longitude, const double& heading) = 0;
    virtual void FuelDataUpdated(const uint32_t& count) = 0;
    virtual void StockAdded(const uint32_t& isAdded) = 0;
    virtual void StockRemoved(const bool& isRemoved) = 0;
    virtual void StockDataUpdated(const uint32_t& count) = 0;
    virtual void StockOTAUnAvailable() = 0;
    virtual void MoviesDataUpdated(const uint32_t& count) = 0;
    virtual void WeatherForecastDataUpdated(const uint32_t& count) = 0;
    virtual void WSAlertDataUpdated(const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string, uint16_t, std::string > > >& wSAlertData) = 0;
    virtual void WSHighAlertData(const uint16_t& alertPriority) = 0;
    virtual void CityListAvailable(const uint32_t& count) = 0;
    virtual void ParkingDataUpdated(const uint32_t& count) = 0;
    virtual void SportsDataUpdated(const uint32_t& listType, const bool& flag) = 0;
    virtual void ShowSXMServices() = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _SubscriptionStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint8_t, uint32_t, std::string, std::string > subscriptionDetails;
        ri >> subscriptionDetails;
        SubscriptionStatus(subscriptionDetails);
    }
    void _DataServiceSubscription_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t > > > dataSubscriptions;
        ri >> dataSubscriptions;
        DataServiceSubscription(dataSubscriptions);
    }
    void _DataAvailable_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t > > > dataAvailable;
        ri >> dataAvailable;
        DataAvailable(dataAvailable);
    }
    void _InstallStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t status;
        ri >> status;
        InstallStatus(status);
    }
    void _ESNInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string esn_val ;
        ri >> esn_val ;
        ESNInfo(esn_val );
    }
    void _VehicleLocation_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        double latitude;
        ri >> latitude;
        double longitude;
        ri >> longitude;
        double heading;
        ri >> heading;
        VehicleLocation(latitude, longitude, heading);
    }
    void _FuelDataUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t count;
        ri >> count;
        FuelDataUpdated(count);
    }
    void _StockAdded_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t isAdded;
        ri >> isAdded;
        StockAdded(isAdded);
    }
    void _StockRemoved_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool isRemoved;
        ri >> isRemoved;
        StockRemoved(isRemoved);
    }
    void _StockDataUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t count;
        ri >> count;
        StockDataUpdated(count);
    }
    void _StockOTAUnAvailable_stub(const ::DBus::SignalMessage &sig)
    {
        StockOTAUnAvailable();
    }
    void _MoviesDataUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t count;
        ri >> count;
        MoviesDataUpdated(count);
    }
    void _WeatherForecastDataUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t count;
        ri >> count;
        WeatherForecastDataUpdated(count);
    }
    void _WSAlertDataUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string, uint16_t, std::string > > > wSAlertData;
        ri >> wSAlertData;
        WSAlertDataUpdated(wSAlertData);
    }
    void _WSHighAlertData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t alertPriority;
        ri >> alertPriority;
        WSHighAlertData(alertPriority);
    }
    void _CityListAvailable_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t count;
        ri >> count;
        CityListAvailable(count);
    }
    void _ParkingDataUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t count;
        ri >> count;
        ParkingDataUpdated(count);
    }
    void _SportsDataUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t listType;
        ri >> listType;
        bool flag;
        ri >> flag;
        SportsDataUpdated(listType, flag);
    }
    void _ShowSXMServices_stub(const ::DBus::SignalMessage &sig)
    {
        ShowSXMServices();
    }
};

} } 
namespace com {
namespace jci {

class btrvr_proxy
: public ::DBus::InterfaceProxy
{
public:

    btrvr_proxy()
    : ::DBus::InterfaceProxy("com.jci.btrvr")
    {
        connect_signal(btrvr_proxy, RemoteVrStatusResp, _RemoteVrStatusResp_stub);
        connect_signal(btrvr_proxy, DontShowSettingResp, _DontShowSettingResp_stub);
        connect_signal(btrvr_proxy, ShowWinkSettingResp, _ShowWinkSettingResp_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t StartRemoteVr()
    {
        ::DBus::CallMessage call;
        call.member("StartRemoteVr");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t StopRemoteVr()
    {
        ::DBus::CallMessage call;
        call.member("StopRemoteVr");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t EnableEyesFreemode()
    {
        ::DBus::CallMessage call;
        call.member("EnableEyesFreemode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DisableEyesFreeMode()
    {
        ::DBus::CallMessage call;
        call.member("DisableEyesFreeMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetRemoteVrStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetRemoteVrStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetDontShowSetting(const uint32_t& dontShowSettingValue)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dontShowSettingValue;
        call.member("SetDontShowSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetDontShowSetting()
    {
        ::DBus::CallMessage call;
        call.member("GetDontShowSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void RemoteVrStatusResp(const uint32_t& status) = 0;
    virtual void DontShowSettingResp(const uint32_t& dontShowSettingValue) = 0;
    virtual void ShowWinkSettingResp(const uint32_t& showWinkSettingValue) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _RemoteVrStatusResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t status;
        ri >> status;
        RemoteVrStatusResp(status);
    }
    void _DontShowSettingResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t dontShowSettingValue;
        ri >> dontShowSettingValue;
        DontShowSettingResp(dontShowSettingValue);
    }
    void _ShowWinkSettingResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t showWinkSettingValue;
        ri >> showWinkSettingValue;
        ShowWinkSettingResp(showWinkSettingValue);
    }
};

} } 
namespace com {
namespace jci {
namespace vbs {

class bcm_proxy
: public ::DBus::InterfaceProxy
{
public:

    bcm_proxy()
    : ::DBus::InterfaceProxy("com.jci.vbs.bcm")
    {
        connect_signal(bcm_proxy, CarSpeedResp, _CarSpeedResp_stub);
        connect_signal(bcm_proxy, CarSpeedThresholdNotification, _CarSpeedThresholdNotification_stub);
        connect_signal(bcm_proxy, AccidentTriggerNotifiction, _AccidentTriggerNotifiction_stub);
        connect_signal(bcm_proxy, PSM_Information1, _PSM_Information1_stub);
        connect_signal(bcm_proxy, BSM_Information, _BSM_Information_stub);
        connect_signal(bcm_proxy, PublicCanStatusNotification, _PublicCanStatusNotification_stub);
        connect_signal(bcm_proxy, PrivateCanStatusNotification, _PrivateCanStatusNotification_stub);
        connect_signal(bcm_proxy, engineConfigResp, _engineConfigResp_stub);
        connect_signal(bcm_proxy, IgnitionControl_Status, _IgnitionControl_Status_stub);
        connect_signal(bcm_proxy, NoSpeedRestrict_TouchDisplay, _NoSpeedRestrict_TouchDisplay_stub);
        connect_signal(bcm_proxy, BatteryVoltageFlag, _BatteryVoltageFlag_stub);
        connect_signal(bcm_proxy, BrakePedalDepressedStatus, _BrakePedalDepressedStatus_stub);
        connect_signal(bcm_proxy, GearPosNotification, _GearPosNotification_stub);
        connect_signal(bcm_proxy, TransmChangeLeverPositionNotification, _TransmChangeLeverPositionNotification_stub);
        connect_signal(bcm_proxy, PrkBrkActvNotification, _PrkBrkActvNotification_stub);
        connect_signal(bcm_proxy, PASCDNotification, _PASCDNotification_stub);
        connect_signal(bcm_proxy, WheelSpeedNotification, _WheelSpeedNotification_stub);
        connect_signal(bcm_proxy, VideoRestrictNotification, _VideoRestrictNotification_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint32_t GetCarSpeed(const uint32_t& speedUnit)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << speedUnit;
        call.member("GetCarSpeed");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetCarSpeedThrshld(const uint8_t& speedUnit)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << speedUnit;
        call.member("GetCarSpeedThrshld");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetPSMInfo()
    {
        ::DBus::CallMessage call;
        call.member("GetPSMInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< bool, bool, uint8_t, uint8_t, uint8_t, bool, bool, bool, bool, bool, bool, uint8_t, uint8_t > GetBSMInfo()
    {
        ::DBus::CallMessage call;
        call.member("GetBSMInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< bool, bool, uint8_t, uint8_t, uint8_t, bool, bool, bool, bool, bool, bool, uint8_t, uint8_t > argout;
        ri >> argout;
        return argout;
    }

    uint8_t getEngineTransmissionType()
    {
        ::DBus::CallMessage call;
        call.member("getEngineTransmissionType");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetIgnitionStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetIgnitionStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetPublicCanStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetPublicCanStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetPrivateCanStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetPrivateCanStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetNoSpeedRestrict_TouchDisplay()
    {
        ::DBus::CallMessage call;
        call.member("GetNoSpeedRestrict_TouchDisplay");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetTouchDisplayCarSpeedThrshld(const uint8_t& speedUnit)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << speedUnit;
        call.member("GetTouchDisplayCarSpeedThrshld");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetFuelCutOffStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetFuelCutOffStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetBrkPedalDepressedStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetBrkPedalDepressedStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetGearPos()
    {
        ::DBus::CallMessage call;
        call.member("GetGearPos");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetTransmChangeLeverPosition()
    {
        ::DBus::CallMessage call;
        call.member("GetTransmChangeLeverPosition");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetPrkBrkActv()
    {
        ::DBus::CallMessage call;
        call.member("GetPrkBrkActv");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< std::vector< uint8_t > > GetPASCD()
    {
        ::DBus::CallMessage call;
        call.member("GetPASCD");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< std::vector< uint8_t > > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint64_t > GetWheelSpeed()
    {
        ::DBus::CallMessage call;
        call.member("GetWheelSpeed");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint64_t > argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetVideoRestrict()
    {
        ::DBus::CallMessage call;
        call.member("GetVideoRestrict");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void CarSpeedResp(const uint32_t& carSpeed) = 0;
    virtual void CarSpeedThresholdNotification(const uint8_t& carSpeedThrshld) = 0;
    virtual void AccidentTriggerNotifiction(const uint8_t& fuelCutOff) = 0;
    virtual void PSM_Information1(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& psInformation) = 0;
    virtual void BSM_Information(const ::DBus::Struct< bool, bool, uint8_t, uint8_t, uint8_t, bool, bool, bool, bool, bool, bool, uint8_t, uint8_t >& bsmInformation) = 0;
    virtual void PublicCanStatusNotification(const uint8_t& publicCanStat) = 0;
    virtual void PrivateCanStatusNotification(const uint8_t& privateCanStat) = 0;
    virtual void engineConfigResp(const uint8_t& engineConfigType, const ::DBus::Struct< uint8_t >& engineConfigValue) = 0;
    virtual void IgnitionControl_Status(const uint8_t& ignitionControl) = 0;
    virtual void NoSpeedRestrict_TouchDisplay(const uint8_t& noSpeedRestrict) = 0;
    virtual void BatteryVoltageFlag(const bool& batt_volt_flag) = 0;
    virtual void BrakePedalDepressedStatus(const uint8_t& brkPedalDepressed) = 0;
    virtual void GearPosNotification(const uint8_t& gearPos) = 0;
    virtual void TransmChangeLeverPositionNotification(const uint8_t& transmChangeLeverPos) = 0;
    virtual void PrkBrkActvNotification(const uint8_t& prkBrkActv) = 0;
    virtual void PASCDNotification(const ::DBus::Struct< std::vector< uint8_t > >& pascdInformation) = 0;
    virtual void WheelSpeedNotification(const ::DBus::Struct< uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint64_t >& wsInformation) = 0;
    virtual void VideoRestrictNotification(const uint8_t& videoRestrict) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _CarSpeedResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t carSpeed;
        ri >> carSpeed;
        CarSpeedResp(carSpeed);
    }
    void _CarSpeedThresholdNotification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t carSpeedThrshld;
        ri >> carSpeedThrshld;
        CarSpeedThresholdNotification(carSpeedThrshld);
    }
    void _AccidentTriggerNotifiction_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t fuelCutOff;
        ri >> fuelCutOff;
        AccidentTriggerNotifiction(fuelCutOff);
    }
    void _PSM_Information1_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t > psInformation;
        ri >> psInformation;
        PSM_Information1(psInformation);
    }
    void _BSM_Information_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< bool, bool, uint8_t, uint8_t, uint8_t, bool, bool, bool, bool, bool, bool, uint8_t, uint8_t > bsmInformation;
        ri >> bsmInformation;
        BSM_Information(bsmInformation);
    }
    void _PublicCanStatusNotification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t publicCanStat;
        ri >> publicCanStat;
        PublicCanStatusNotification(publicCanStat);
    }
    void _PrivateCanStatusNotification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t privateCanStat;
        ri >> privateCanStat;
        PrivateCanStatusNotification(privateCanStat);
    }
    void _engineConfigResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t engineConfigType;
        ri >> engineConfigType;
        ::DBus::Struct< uint8_t > engineConfigValue;
        ri >> engineConfigValue;
        engineConfigResp(engineConfigType, engineConfigValue);
    }
    void _IgnitionControl_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t ignitionControl;
        ri >> ignitionControl;
        IgnitionControl_Status(ignitionControl);
    }
    void _NoSpeedRestrict_TouchDisplay_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t noSpeedRestrict;
        ri >> noSpeedRestrict;
        NoSpeedRestrict_TouchDisplay(noSpeedRestrict);
    }
    void _BatteryVoltageFlag_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool batt_volt_flag;
        ri >> batt_volt_flag;
        BatteryVoltageFlag(batt_volt_flag);
    }
    void _BrakePedalDepressedStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t brkPedalDepressed;
        ri >> brkPedalDepressed;
        BrakePedalDepressedStatus(brkPedalDepressed);
    }
    void _GearPosNotification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t gearPos;
        ri >> gearPos;
        GearPosNotification(gearPos);
    }
    void _TransmChangeLeverPositionNotification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t transmChangeLeverPos;
        ri >> transmChangeLeverPos;
        TransmChangeLeverPositionNotification(transmChangeLeverPos);
    }
    void _PrkBrkActvNotification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t prkBrkActv;
        ri >> prkBrkActv;
        PrkBrkActvNotification(prkBrkActv);
    }
    void _PASCDNotification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > pascdInformation;
        ri >> pascdInformation;
        PASCDNotification(pascdInformation);
    }
    void _WheelSpeedNotification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, uint64_t > wsInformation;
        ri >> wsInformation;
        WheelSpeedNotification(wsInformation);
    }
    void _VideoRestrictNotification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t videoRestrict;
        ri >> videoRestrict;
        VideoRestrictNotification(videoRestrict);
    }
};

} } } 
namespace com {
namespace jci {
namespace vbs {

class drvididm_proxy
: public ::DBus::InterfaceProxy
{
public:

    drvididm_proxy()
    : ::DBus::InterfaceProxy("com.jci.vbs.drvididm")
    {
        connect_signal(drvididm_proxy, Ignition_Status, _Ignition_Status_stub);
        connect_signal(drvididm_proxy, Eng_StartKey, _Eng_StartKey_stub);
        connect_signal(drvididm_proxy, EngineState, _EngineState_stub);
        connect_signal(drvididm_proxy, IDM_SD_Evl_D_Num, _IDM_SD_Evl_D_Num_stub);
        connect_signal(drvididm_proxy, CAN_Missing_Error, _CAN_Missing_Error_stub);
        connect_signal(drvididm_proxy, Sds_TotNG_Par_D_Rq_2, _Sds_TotNG_Par_D_Rq_2_stub);
        connect_signal(drvididm_proxy, CstmzStat_Ind_Clr_OnOff, _CstmzStat_Ind_Clr_OnOff_stub);
        connect_signal(drvididm_proxy, IDM_SD_CalcInfo_Category, _IDM_SD_CalcInfo_Category_stub);
        connect_signal(drvididm_proxy, IDM_SD_CalcInfo_Value, _IDM_SD_CalcInfo_Value_stub);
        connect_signal(drvididm_proxy, Sds_TotSD_Avl_D_Actl, _Sds_TotSD_Avl_D_Actl_stub);
        connect_signal(drvididm_proxy, Sds_SD_Stage_D_Actl, _Sds_SD_Stage_D_Actl_stub);
        connect_signal(drvididm_proxy, Sds_TotSD_Point_D_Actl_2, _Sds_TotSD_Point_D_Actl_2_stub);
        connect_signal(drvididm_proxy, EndDis_IDM_Req, _EndDis_IDM_Req_stub);
        connect_signal(drvididm_proxy, StDis_IDM_Req, _StDis_IDM_Req_stub);
        connect_signal(drvididm_proxy, CstmzRsp_Status, _CstmzRsp_Status_stub);
        connect_signal(drvididm_proxy, Sds_SD_Stage_D_Actl2, _Sds_SD_Stage_D_Actl2_stub);
        connect_signal(drvididm_proxy, Stat_Ign_5s, _Stat_Ign_5s_stub);
        connect_signal(drvididm_proxy, driverIdentification, _driverIdentification_stub);
        connect_signal(drvididm_proxy, Data_Ack_DriverNumber, _Data_Ack_DriverNumber_stub);
        connect_signal(drvididm_proxy, All_sinal_Idm, _All_sinal_Idm_stub);
        connect_signal(drvididm_proxy, All_sinal_Drv, _All_sinal_Drv_stub);
        connect_signal(drvididm_proxy, Timer_Expired_1min, _Timer_Expired_1min_stub);
        connect_signal(drvididm_proxy, CstmzRsp_49bStatus, _CstmzRsp_49bStatus_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t BLM_Startup_Initiated(const bool& drvididm_blm_init)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << drvididm_blm_init;
        call.member("BLM_Startup_Initiated");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t IDM_AmbientDisplay_Request(const uint8_t& cstmzRq_Ind_Clr_OnOff)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << cstmzRq_Ind_Clr_OnOff;
        call.member("IDM_AmbientDisplay_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t BLM_Startup_Initiated_Driver(const bool& drvididm_blm_init_driver)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << drvididm_blm_init_driver;
        call.member("BLM_Startup_Initiated_Driver");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DI_Reliable_Delivery(const uint8_t& reliable_dr_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << reliable_dr_id;
        call.member("DI_Reliable_Delivery");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t CurrentScore_Hec(const uint8_t& current_score_hec)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << current_score_hec;
        call.member("CurrentScore_Hec");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void Ignition_Status(const uint16_t& ign_sts) = 0;
    virtual void Eng_StartKey(const uint16_t& eng_start_key) = 0;
    virtual void EngineState(const uint16_t& engine_state) = 0;
    virtual void IDM_SD_Evl_D_Num(const uint16_t& idm_SD_EvlDNum) = 0;
    virtual void CAN_Missing_Error(const int16_t& can_miss_Err) = 0;
    virtual void Sds_TotNG_Par_D_Rq_2(const uint16_t& sds_TotNGPar_Req2) = 0;
    virtual void CstmzStat_Ind_Clr_OnOff(const uint8_t& cstmzStat_Clr_Req) = 0;
    virtual void IDM_SD_CalcInfo_Category(const int16_t& idm_calculateInfo_category) = 0;
    virtual void IDM_SD_CalcInfo_Value(const int16_t& idm_calculateInfo_value) = 0;
    virtual void Sds_TotSD_Avl_D_Actl(const uint8_t& sds_TotSD_AvlDActl) = 0;
    virtual void Sds_SD_Stage_D_Actl(const uint8_t& sds_SD_StageDActl) = 0;
    virtual void Sds_TotSD_Point_D_Actl_2(const int16_t& sds_TotSD_PointDActl2) = 0;
    virtual void EndDis_IDM_Req(const uint8_t& endDis_IDMReq) = 0;
    virtual void StDis_IDM_Req(const uint8_t& stDis_IDMReq) = 0;
    virtual void CstmzRsp_Status(const uint8_t& cstmzRspStatus) = 0;
    virtual void Sds_SD_Stage_D_Actl2(const uint8_t& sds_SD_StageDActl2) = 0;
    virtual void Stat_Ign_5s(const bool& stat_Ign5s) = 0;
    virtual void driverIdentification(const uint8_t& driverId) = 0;
    virtual void Data_Ack_DriverNumber(const bool& data_ackdrivernumber) = 0;
    virtual void All_sinal_Idm(const bool& allsinal_idm) = 0;
    virtual void All_sinal_Drv(const bool& allsinal_drv) = 0;
    virtual void Timer_Expired_1min() = 0;
    virtual void CstmzRsp_49bStatus(const uint8_t& cstmzRspStatus_49b) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Ignition_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t ign_sts;
        ri >> ign_sts;
        Ignition_Status(ign_sts);
    }
    void _Eng_StartKey_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t eng_start_key;
        ri >> eng_start_key;
        Eng_StartKey(eng_start_key);
    }
    void _EngineState_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t engine_state;
        ri >> engine_state;
        EngineState(engine_state);
    }
    void _IDM_SD_Evl_D_Num_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t idm_SD_EvlDNum;
        ri >> idm_SD_EvlDNum;
        IDM_SD_Evl_D_Num(idm_SD_EvlDNum);
    }
    void _CAN_Missing_Error_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t can_miss_Err;
        ri >> can_miss_Err;
        CAN_Missing_Error(can_miss_Err);
    }
    void _Sds_TotNG_Par_D_Rq_2_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t sds_TotNGPar_Req2;
        ri >> sds_TotNGPar_Req2;
        Sds_TotNG_Par_D_Rq_2(sds_TotNGPar_Req2);
    }
    void _CstmzStat_Ind_Clr_OnOff_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t cstmzStat_Clr_Req;
        ri >> cstmzStat_Clr_Req;
        CstmzStat_Ind_Clr_OnOff(cstmzStat_Clr_Req);
    }
    void _IDM_SD_CalcInfo_Category_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t idm_calculateInfo_category;
        ri >> idm_calculateInfo_category;
        IDM_SD_CalcInfo_Category(idm_calculateInfo_category);
    }
    void _IDM_SD_CalcInfo_Value_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t idm_calculateInfo_value;
        ri >> idm_calculateInfo_value;
        IDM_SD_CalcInfo_Value(idm_calculateInfo_value);
    }
    void _Sds_TotSD_Avl_D_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t sds_TotSD_AvlDActl;
        ri >> sds_TotSD_AvlDActl;
        Sds_TotSD_Avl_D_Actl(sds_TotSD_AvlDActl);
    }
    void _Sds_SD_Stage_D_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t sds_SD_StageDActl;
        ri >> sds_SD_StageDActl;
        Sds_SD_Stage_D_Actl(sds_SD_StageDActl);
    }
    void _Sds_TotSD_Point_D_Actl_2_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t sds_TotSD_PointDActl2;
        ri >> sds_TotSD_PointDActl2;
        Sds_TotSD_Point_D_Actl_2(sds_TotSD_PointDActl2);
    }
    void _EndDis_IDM_Req_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t endDis_IDMReq;
        ri >> endDis_IDMReq;
        EndDis_IDM_Req(endDis_IDMReq);
    }
    void _StDis_IDM_Req_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t stDis_IDMReq;
        ri >> stDis_IDMReq;
        StDis_IDM_Req(stDis_IDMReq);
    }
    void _CstmzRsp_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t cstmzRspStatus;
        ri >> cstmzRspStatus;
        CstmzRsp_Status(cstmzRspStatus);
    }
    void _Sds_SD_Stage_D_Actl2_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t sds_SD_StageDActl2;
        ri >> sds_SD_StageDActl2;
        Sds_SD_Stage_D_Actl2(sds_SD_StageDActl2);
    }
    void _Stat_Ign_5s_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool stat_Ign5s;
        ri >> stat_Ign5s;
        Stat_Ign_5s(stat_Ign5s);
    }
    void _driverIdentification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t driverId;
        ri >> driverId;
        driverIdentification(driverId);
    }
    void _Data_Ack_DriverNumber_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool data_ackdrivernumber;
        ri >> data_ackdrivernumber;
        Data_Ack_DriverNumber(data_ackdrivernumber);
    }
    void _All_sinal_Idm_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool allsinal_idm;
        ri >> allsinal_idm;
        All_sinal_Idm(allsinal_idm);
    }
    void _All_sinal_Drv_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool allsinal_drv;
        ri >> allsinal_drv;
        All_sinal_Drv(allsinal_drv);
    }
    void _Timer_Expired_1min_stub(const ::DBus::SignalMessage &sig)
    {
        Timer_Expired_1min();
    }
    void _CstmzRsp_49bStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t cstmzRspStatus_49b;
        ri >> cstmzRspStatus_49b;
        CstmzRsp_49bStatus(cstmzRspStatus_49b);
    }
};

} } } 
namespace com {
namespace jci {
namespace vbs {

class cd_proxy
: public ::DBus::InterfaceProxy
{
public:

    cd_proxy()
    : ::DBus::InterfaceProxy("com.jci.vbs.cd")
    {
        connect_signal(cd_proxy, cdDVDStatusResp, _cdDVDStatusResp_stub);
        connect_signal(cd_proxy, cdDTVStatusResp, _cdDTVStatusResp_stub);
        connect_signal(cd_proxy, metaDataResponse, _metaDataResponse_stub);
        connect_signal(cd_proxy, trackPlayStatus, _trackPlayStatus_stub);
        connect_signal(cd_proxy, cdSourceChangeResponse, _cdSourceChangeResponse_stub);
        connect_signal(cd_proxy, cdDvdConfigStatusResponse, _cdDvdConfigStatusResponse_stub);
        connect_signal(cd_proxy, cdTrackFolderList, _cdTrackFolderList_stub);
        connect_signal(cd_proxy, cdDvdFolderContents, _cdDvdFolderContents_stub);
        connect_signal(cd_proxy, cdDvdVersionResp, _cdDvdVersionResp_stub);
        connect_signal(cd_proxy, cdDvdCurrTrackFoldernum, _cdDvdCurrTrackFoldernum_stub);
        connect_signal(cd_proxy, GetAllCDVDStatusResp, _GetAllCDVDStatusResp_stub);
        connect_signal(cd_proxy, DTV_VideoSource_Change_Response, _DTV_VideoSource_Change_Response_stub);
        connect_signal(cd_proxy, DTVSourceChangeResponse, _DTVSourceChangeResponse_stub);
        connect_signal(cd_proxy, DTVReady, _DTVReady_stub);
        connect_signal(cd_proxy, BeepControlDTVResponse, _BeepControlDTVResponse_stub);
        connect_signal(cd_proxy, BeepControlDVDResponse, _BeepControlDVDResponse_stub);
        connect_signal(cd_proxy, DTVMaxAllowedMovieRating, _DTVMaxAllowedMovieRating_stub);
        connect_signal(cd_proxy, DTVRoutineTestResponse, _DTVRoutineTestResponse_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint8_t PlayCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("PlayCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t PauseCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("PauseCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t NextTrackCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("NextTrackCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t PreviousTrackCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("PreviousTrackCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t FastForwardCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("FastForwardCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t FastReverseCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("FastReverseCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t EjectCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("EjectCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t FolderUpCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("FolderUpCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t FolderDownCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("FolderDownCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t UpdateDiscCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("UpdateDiscCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t ScanCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("ScanCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t SlowForwardCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("SlowForwardCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t SlowRewindCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("SlowRewindCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GotoMenuCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("GotoMenuCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GotoPlayerMenuCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("GotoPlayerMenuCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t RepeatCDRequest(const uint8_t& trackFolderRepeat)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << trackFolderRepeat;
        call.member("RepeatCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t RandomCDRequest(const uint8_t& trackFolderRandom)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << trackFolderRandom;
        call.member("RandomCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t SubtitleSettingCDRequest(const uint8_t& subtitleSetting)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << subtitleSetting;
        call.member("SubtitleSettingCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t DirectTrackSeekCDRequest(const uint32_t& directTrackSeek)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << directTrackSeek;
        call.member("DirectTrackSeekCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t MultiAngleCDRequest(const uint8_t& multiAngle)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << multiAngle;
        call.member("MultiAngleCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t DVDMenuOperationCDCommand(const uint8_t& dVDMenuOperationCmd)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dVDMenuOperationCmd;
        call.member("DVDMenuOperationCDCommand");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t PlaybackJumpCDRequest(const uint8_t& playbackJump, const uint8_t& playbackJumpPercentage)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << playbackJump;
        wi << playbackJumpPercentage;
        call.member("PlaybackJumpCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t DVDAspectRatioChange(const uint8_t& dVDAspectRatioValue)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dVDAspectRatioValue;
        call.member("DVDAspectRatioChange");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t TrackFolderListRequest(const uint8_t& listDirectoryType, const uint8_t& listTypeReq, const uint16_t& folderIndexReq, const uint16_t& indexReqStart, const uint16_t& indexReqStop)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << listDirectoryType;
        wi << listTypeReq;
        wi << folderIndexReq;
        wi << indexReqStart;
        wi << indexReqStop;
        call.member("TrackFolderListRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetMetaDataCDRequest()
    {
        ::DBus::CallMessage call;
        call.member("GetMetaDataCDRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetCDDVDReadyStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetCDDVDReadyStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetCDDVDStatus(const uint8_t& statusType, const uint8_t& metadataType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << statusType;
        wi << metadataType;
        call.member("GetCDDVDStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetOperationStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetOperationStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetDiscType()
    {
        ::DBus::CallMessage call;
        call.member("GetDiscType");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetCDDTVStatus(const uint8_t& statusType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << statusType;
        call.member("GetCDDTVStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetDVDConfigStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetDVDConfigStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint16_t GetMaxAllowedMovieRatingRequest()
    {
        ::DBus::CallMessage call;
        call.member("GetMaxAllowedMovieRatingRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint16_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t DVDParentalCntlNotification(const uint8_t& parentalCntlType, const uint16_t& parentalCntlVal)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << parentalCntlType;
        wi << parentalCntlVal;
        call.member("DVDParentalCntlNotification");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetAllCDDVDStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetAllCDDVDStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t TouchPanelID(const uint16_t& touchXCoord, const uint16_t& touchYCoord)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << touchXCoord;
        wi << touchYCoord;
        call.member("TouchPanelID");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t TVControlRequest(const uint8_t& controlCmdType, const uint8_t& controlCmdVal)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << controlCmdType;
        wi << controlCmdVal;
        call.member("TVControlRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t DTV_VideoSource_Change_Request(const uint8_t& videoSrcChange)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << videoSrcChange;
        call.member("DTV_VideoSource_Change_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetCDTVRoutineTestRespStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetCDTVRoutineTestRespStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t RoutineTest_Request(const uint8_t& routineTestType, const uint8_t& routineTestVal)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << routineTestType;
        wi << routineTestVal;
        call.member("RoutineTest_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void cdDVDStatusResp(const ::DBus::Struct< uint8_t, std::vector< uint8_t > >& cdDvdStatus) = 0;
    virtual void cdDTVStatusResp(const uint8_t& cdDtvStatusType, const uint8_t& cdDtvStatusValue) = 0;
    virtual void metaDataResponse(const ::DBus::Struct< std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t > >& metaDataResp) = 0;
    virtual void trackPlayStatus(const ::DBus::Struct< uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& trackStatus) = 0;
    virtual void cdSourceChangeResponse(const uint8_t& onTargetChngResp, const uint8_t& offTargetChngResp) = 0;
    virtual void cdDvdConfigStatusResponse(const uint8_t& cdDvdConfigStatusResp) = 0;
    virtual void cdTrackFolderList(const ::DBus::Struct< uint8_t, uint8_t, uint16_t, uint16_t, std::vector< uint8_t > >& trackFolderListInfo) = 0;
    virtual void cdDvdFolderContents(const ::DBus::Struct< uint8_t, uint16_t, uint16_t, uint16_t >& folderContents) = 0;
    virtual void cdDvdVersionResp(const ::DBus::Struct< std::vector< uint8_t >, std::vector< uint8_t > >& ccdDvdVersion) = 0;
    virtual void cdDvdCurrTrackFoldernum(const uint8_t& currTrackFoldernum) = 0;
    virtual void GetAllCDVDStatusResp(const ::DBus::Struct< std::vector< uint8_t >, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, std::vector< uint8_t > >& cDVDStat) = 0;
    virtual void DTV_VideoSource_Change_Response(const uint8_t& videoSrcChange) = 0;
    virtual void DTVSourceChangeResponse(const uint8_t& onTargetChngResp, const uint8_t& offTargetChngResp) = 0;
    virtual void DTVReady(const uint8_t& dTVReady) = 0;
    virtual void BeepControlDTVResponse(const uint8_t& beepControlResponse) = 0;
    virtual void BeepControlDVDResponse(const uint8_t& beepControlResponse) = 0;
    virtual void DTVMaxAllowedMovieRating(const uint16_t& maxAllowedMovieRatingStatusValue) = 0;
    virtual void DTVRoutineTestResponse(const uint8_t& cdDtvConfigStatusResp) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _cdDVDStatusResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< uint8_t > > cdDvdStatus;
        ri >> cdDvdStatus;
        cdDVDStatusResp(cdDvdStatus);
    }
    void _cdDTVStatusResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t cdDtvStatusType;
        ri >> cdDtvStatusType;
        uint8_t cdDtvStatusValue;
        ri >> cdDtvStatusValue;
        cdDTVStatusResp(cdDtvStatusType, cdDtvStatusValue);
    }
    void _metaDataResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t > > metaDataResp;
        ri >> metaDataResp;
        metaDataResponse(metaDataResp);
    }
    void _trackPlayStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t > trackStatus;
        ri >> trackStatus;
        trackPlayStatus(trackStatus);
    }
    void _cdSourceChangeResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t onTargetChngResp;
        ri >> onTargetChngResp;
        uint8_t offTargetChngResp;
        ri >> offTargetChngResp;
        cdSourceChangeResponse(onTargetChngResp, offTargetChngResp);
    }
    void _cdDvdConfigStatusResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t cdDvdConfigStatusResp;
        ri >> cdDvdConfigStatusResp;
        cdDvdConfigStatusResponse(cdDvdConfigStatusResp);
    }
    void _cdTrackFolderList_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint16_t, uint16_t, std::vector< uint8_t > > trackFolderListInfo;
        ri >> trackFolderListInfo;
        cdTrackFolderList(trackFolderListInfo);
    }
    void _cdDvdFolderContents_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint16_t, uint16_t, uint16_t > folderContents;
        ri >> folderContents;
        cdDvdFolderContents(folderContents);
    }
    void _cdDvdVersionResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t >, std::vector< uint8_t > > ccdDvdVersion;
        ri >> ccdDvdVersion;
        cdDvdVersionResp(ccdDvdVersion);
    }
    void _cdDvdCurrTrackFoldernum_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t currTrackFoldernum;
        ri >> currTrackFoldernum;
        cdDvdCurrTrackFoldernum(currTrackFoldernum);
    }
    void _GetAllCDVDStatusResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t >, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, std::vector< uint8_t > > cDVDStat;
        ri >> cDVDStat;
        GetAllCDVDStatusResp(cDVDStat);
    }
    void _DTV_VideoSource_Change_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t videoSrcChange;
        ri >> videoSrcChange;
        DTV_VideoSource_Change_Response(videoSrcChange);
    }
    void _DTVSourceChangeResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t onTargetChngResp;
        ri >> onTargetChngResp;
        uint8_t offTargetChngResp;
        ri >> offTargetChngResp;
        DTVSourceChangeResponse(onTargetChngResp, offTargetChngResp);
    }
    void _DTVReady_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t dTVReady;
        ri >> dTVReady;
        DTVReady(dTVReady);
    }
    void _BeepControlDTVResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t beepControlResponse;
        ri >> beepControlResponse;
        BeepControlDTVResponse(beepControlResponse);
    }
    void _BeepControlDVDResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t beepControlResponse;
        ri >> beepControlResponse;
        BeepControlDVDResponse(beepControlResponse);
    }
    void _DTVMaxAllowedMovieRating_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t maxAllowedMovieRatingStatusValue;
        ri >> maxAllowedMovieRatingStatusValue;
        DTVMaxAllowedMovieRating(maxAllowedMovieRatingStatusValue);
    }
    void _DTVRoutineTestResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t cdDtvConfigStatusResp;
        ri >> cdDtvConfigStatusResp;
        DTVRoutineTestResponse(cdDtvConfigStatusResp);
    }
};

} } } 
namespace com {
namespace jci {
namespace vbs {

class radio_proxy
: public ::DBus::InterfaceProxy
{
public:

    radio_proxy()
    : ::DBus::InterfaceProxy("com.jci.vbs.radio")
    {
        connect_signal(radio_proxy, Tuner_Response, _Tuner_Response_stub);
        connect_signal(radio_proxy, FrequencyLastKeep_Response, _FrequencyLastKeep_Response_stub);
        connect_signal(radio_proxy, HARWrite_Response, _HARWrite_Response_stub);
        connect_signal(radio_proxy, PTY_Response, _PTY_Response_stub);
        connect_signal(radio_proxy, PTYChange_Notification, _PTYChange_Notification_stub);
        connect_signal(radio_proxy, AF_Response, _AF_Response_stub);
        connect_signal(radio_proxy, REG_Response, _REG_Response_stub);
        connect_signal(radio_proxy, HD_Response, _HD_Response_stub);
        connect_signal(radio_proxy, HD_Tuner_Response, _HD_Tuner_Response_stub);
        connect_signal(radio_proxy, HD_PSD_Response, _HD_PSD_Response_stub);
        connect_signal(radio_proxy, TA_Response, _TA_Response_stub);
        connect_signal(radio_proxy, RDS_Response, _RDS_Response_stub);
        connect_signal(radio_proxy, Metadata_Response, _Metadata_Response_stub);
        connect_signal(radio_proxy, AudioSetting_Response, _AudioSetting_Response_stub);
        connect_signal(radio_proxy, ACU_Response, _ACU_Response_stub);
        connect_signal(radio_proxy, StationList_Response, _StationList_Response_stub);
        connect_signal(radio_proxy, PresetInfo_Response, _PresetInfo_Response_stub);
        connect_signal(radio_proxy, Text_Response, _Text_Response_stub);
        connect_signal(radio_proxy, HD_SISStatus_Response, _HD_SISStatus_Response_stub);
        connect_signal(radio_proxy, TAUSourceIndex_Response, _TAUSourceIndex_Response_stub);
        connect_signal(radio_proxy, AMP_Response, _AMP_Response_stub);
        connect_signal(radio_proxy, TAControl_Interrupt_Response, _TAControl_Interrupt_Response_stub);
        connect_signal(radio_proxy, TAUSoftwareVersion_Response, _TAUSoftwareVersion_Response_stub);
        connect_signal(radio_proxy, XM_RefreshStatus_Response, _XM_RefreshStatus_Response_stub);
        connect_signal(radio_proxy, XM_RadioStatus_Response, _XM_RadioStatus_Response_stub);
        connect_signal(radio_proxy, XM_Mute_Status_Response, _XM_Mute_Status_Response_stub);
        connect_signal(radio_proxy, AUX_Status_Response, _AUX_Status_Response_stub);
        connect_signal(radio_proxy, TrackChange, _TrackChange_stub);
        connect_signal(radio_proxy, StationChange, _StationChange_stub);
        connect_signal(radio_proxy, ModeChange, _ModeChange_stub);
        connect_signal(radio_proxy, OffOnNotification, _OffOnNotification_stub);
        connect_signal(radio_proxy, DestinationCode, _DestinationCode_stub);
        connect_signal(radio_proxy, DestinationType, _DestinationType_stub);
        connect_signal(radio_proxy, XM_ConfigStatus, _XM_ConfigStatus_stub);
        connect_signal(radio_proxy, ConnectionStatus, _ConnectionStatus_stub);
        connect_signal(radio_proxy, RsesConnectStatus, _RsesConnectStatus_stub);
        connect_signal(radio_proxy, iTunes_TaggingInfo, _iTunes_TaggingInfo_stub);
        connect_signal(radio_proxy, XM_MAP_Info, _XM_MAP_Info_stub);
        connect_signal(radio_proxy, XM_Signal_Info, _XM_Signal_Info_stub);
        connect_signal(radio_proxy, RDS_HAR_Response, _RDS_HAR_Response_stub);
        connect_signal(radio_proxy, RDS_TAInterrupt_Response, _RDS_TAInterrupt_Response_stub);
        connect_signal(radio_proxy, TAU_TestMode_Response, _TAU_TestMode_Response_stub);
        connect_signal(radio_proxy, XM_Title_Response, _XM_Title_Response_stub);
        connect_signal(radio_proxy, XM_Metadata_Notification, _XM_Metadata_Notification_stub);
        connect_signal(radio_proxy, HD_MetadataChange_Notification, _HD_MetadataChange_Notification_stub);
        connect_signal(radio_proxy, HD_Tuner2_Status_Response, _HD_Tuner2_Status_Response_stub);
        connect_signal(radio_proxy, Text_Notification, _Text_Notification_stub);
        connect_signal(radio_proxy, HD_ID3_XHDR_Response, _HD_ID3_XHDR_Response_stub);
        connect_signal(radio_proxy, XM_ModuleData_Response, _XM_ModuleData_Response_stub);
        connect_signal(radio_proxy, XM_SerialNumber_Response, _XM_SerialNumber_Response_stub);
        connect_signal(radio_proxy, HD_ErrorStatusResponse, _HD_ErrorStatusResponse_stub);
        connect_signal(radio_proxy, HD_RadioNumBlend_Response, _HD_RadioNumBlend_Response_stub);
        connect_signal(radio_proxy, SignalInfoChange_Response, _SignalInfoChange_Response_stub);
        connect_signal(radio_proxy, XM_MAP_DuplicateChannelNotification, _XM_MAP_DuplicateChannelNotification_stub);
        connect_signal(radio_proxy, HD_BER_Status, _HD_BER_Status_stub);
        connect_signal(radio_proxy, HD_BCTL_Status, _HD_BCTL_Status_stub);
        connect_signal(radio_proxy, RDS_AlarmInterrupt_Response, _RDS_AlarmInterrupt_Response_stub);
        connect_signal(radio_proxy, New4ARegionInfo, _New4ARegionInfo_stub);
        connect_signal(radio_proxy, NewJapanRegionInfo, _NewJapanRegionInfo_stub);
        connect_signal(radio_proxy, DAB_ChStatus_Response, _DAB_ChStatus_Response_stub);
        connect_signal(radio_proxy, DAB_Mode_Status, _DAB_Mode_Status_stub);
        connect_signal(radio_proxy, DAB_FMLinkSetting_Status, _DAB_FMLinkSetting_Status_stub);
        connect_signal(radio_proxy, DAB_LinkSetting_Status, _DAB_LinkSetting_Status_stub);
        connect_signal(radio_proxy, DAB_List_Status, _DAB_List_Status_stub);
        connect_signal(radio_proxy, DAB_BandSelectSetting_Status, _DAB_BandSelectSetting_Status_stub);
        connect_signal(radio_proxy, DAB_RadioText_Status, _DAB_RadioText_Status_stub);
        connect_signal(radio_proxy, DAB_SignalStrength_Status, _DAB_SignalStrength_Status_stub);
        connect_signal(radio_proxy, DAB_DiagMode_Status, _DAB_DiagMode_Status_stub);
        connect_signal(radio_proxy, DAB_EnsembleListMgmtInfo_Response, _DAB_EnsembleListMgmtInfo_Response_stub);
        connect_signal(radio_proxy, DAB_EnsembleInfoList_Response, _DAB_EnsembleInfoList_Response_stub);
        connect_signal(radio_proxy, DAB_CompoListMgmtInfo_Response, _DAB_CompoListMgmtInfo_Response_stub);
        connect_signal(radio_proxy, DAB_CompoInfoList_Response, _DAB_CompoInfoList_Response_stub);
        connect_signal(radio_proxy, DAB_Label_Response, _DAB_Label_Response_stub);
        connect_signal(radio_proxy, DAB_TAUConfig_Status, _DAB_TAUConfig_Status_stub);
        connect_signal(radio_proxy, DAB_Info_Status, _DAB_Info_Status_stub);
        connect_signal(radio_proxy, DAB_Diag_Status, _DAB_Diag_Status_stub);
        connect_signal(radio_proxy, DAB_List_Current_State, _DAB_List_Current_State_stub);
        connect_signal(radio_proxy, DAB_Text_Info_Status, _DAB_Text_Info_Status_stub);
        connect_signal(radio_proxy, TauXmhSts_XmModulePowerSts, _TauXmhSts_XmModulePowerSts_stub);
        connect_signal(radio_proxy, TauXmhSts_SxiCommandReq, _TauXmhSts_SxiCommandReq_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint8_t Tune_Request(const ::DBus::Struct< uint8_t, uint8_t >& tune)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tune;
        call.member("Tune_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t Seek_Request(const uint8_t& seek)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << seek;
        call.member("Seek_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t QuickSeek_Request(const uint8_t& quickSeek)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << quickSeek;
        call.member("QuickSeek_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t Scan_Request(const uint8_t& scan)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << scan;
        call.member("Scan_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t DirectControl(const ::DBus::Struct< double, uint16_t, uint8_t >& directControl)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << directControl;
        call.member("DirectControl");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t Control1_Request(const uint8_t& hARWrite)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hARWrite;
        call.member("Control1_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t PTY_Request(const uint8_t& pty)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pty;
        call.member("PTY_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t RDS_AF_Request(const uint8_t& aF)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << aF;
        call.member("RDS_AF_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t RDS_REG_Request(const uint8_t& rEG)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << rEG;
        call.member("RDS_REG_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t HD_Request(const uint8_t& hD)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hD;
        call.member("HD_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t TA_Request(const uint8_t& tA)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tA;
        call.member("TA_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t SubTunerControl_Request(const ::DBus::Struct< uint8_t, uint16_t >& subTunerReq)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << subTunerReq;
        call.member("SubTunerControl_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t HD_ChannelUp_Request(const uint8_t& hDChannelUp)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hDChannelUp;
        call.member("HD_ChannelUp_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t HD_ErrorRateDisplayMode_Request(const uint8_t& hDErrorRateDisplayMode, const uint8_t& hDTunerType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hDErrorRateDisplayMode;
        wi << hDTunerType;
        call.member("HD_ErrorRateDisplayMode_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t HD_PageNumber_Request(const uint8_t& hDPageNumber)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hDPageNumber;
        call.member("HD_PageNumber_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t HD_DiagTestNum_Request(const uint8_t& hDDiagTestNum)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hDDiagTestNum;
        call.member("HD_DiagTestNum_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t HD_Parameter1_Request(const uint8_t& hDParameter1)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hDParameter1;
        call.member("HD_Parameter1_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t HD_Parameter2_Request(const uint8_t& hDParameter2)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hDParameter2;
        call.member("HD_Parameter2_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t HD_RadioErrorStatus_Request(const uint8_t& hDRadioErrorStatus)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hDRadioErrorStatus;
        call.member("HD_RadioErrorStatus_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t Mute_Request(const ::DBus::Struct< uint8_t, uint8_t >& mute)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mute;
        call.member("Mute_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t Vol_Request(const uint8_t& vol)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << vol;
        call.member("Vol_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t AudioSettings_Request(const ::DBus::Struct< uint8_t, uint8_t >& audioSettings)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << audioSettings;
        call.member("AudioSettings_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t ACUInitialization_Request(const uint8_t& aCUIn)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << aCUIn;
        call.member("ACUInitialization_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t ACUAudioPilot_Request(const uint8_t& audioPilot)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << audioPilot;
        call.member("ACUAudioPilot_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t ACUCenterPoint_Request(const uint8_t& centerPoint)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << centerPoint;
        call.member("ACUCenterPoint_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t StationListCreation_Request(const uint8_t& request, const uint8_t& dest_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        wi << dest_id;
        call.member("StationListCreation_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t Text_Request(const uint8_t& textReq)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << textReq;
        call.member("Text_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t HD_SISStatus_Request(const uint8_t& sISReq)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sISReq;
        call.member("HD_SISStatus_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t HD_PSD_Request(const uint8_t& pSDRequest)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pSDRequest;
        call.member("HD_PSD_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t HD_ErrorStatus_Request(const uint8_t& errorStatusReq)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << errorStatusReq;
        call.member("HD_ErrorStatus_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t AUTO_M_Request(const uint8_t& autoM)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << autoM;
        call.member("AUTO_M_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t XM_DirectType_Request(const uint8_t& directType, const uint8_t& stepCH, const uint8_t& stepSID)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << directType;
        wi << stepCH;
        wi << stepSID;
        call.member("XM_DirectType_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t XM_RelativeTune_Request(const uint8_t& step, const uint8_t& tuneDirection)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << step;
        wi << tuneDirection;
        call.member("XM_RelativeTune_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t XM_Diag_Request(const uint8_t& diagRequest)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << diagRequest;
        call.member("XM_Diag_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t XM_ExpandedDiagMode_Request(const uint8_t& expDiagMode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << expDiagMode;
        call.member("XM_ExpandedDiagMode_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t XM_Mute_Request(const uint8_t& muteReq)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << muteReq;
        call.member("XM_Mute_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t ElectricField_Request(const uint8_t& signalStrength)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << signalStrength;
        call.member("ElectricField_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t Test_Mode_Variation_Page_Antenna_Request(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t >& testMode_Variation_Page_Antenna)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << testMode_Variation_Page_Antenna;
        call.member("Test_Mode_Variation_Page_Antenna_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t AutoStore_Request(const uint8_t& autostore)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << autostore;
        call.member("AutoStore_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetConnStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetConnStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t AUX_GetConnStatus()
    {
        ::DBus::CallMessage call;
        call.member("AUX_GetConnStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t XM_Config_GetStatus()
    {
        ::DBus::CallMessage call;
        call.member("XM_Config_GetStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetDestinationType()
    {
        ::DBus::CallMessage call;
        call.member("GetDestinationType");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetRadioID()
    {
        ::DBus::CallMessage call;
        call.member("GetRadioID");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetHDOnOffStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetHDOnOffStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetTAOnOffStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetTAOnOffStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetHARFreqSetting()
    {
        ::DBus::CallMessage call;
        call.member("GetHARFreqSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetCurrentGenreSetting()
    {
        ::DBus::CallMessage call;
        call.member("GetCurrentGenreSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetAlternateFreqOnOffStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetAlternateFreqOnOffStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetRegionLockOnOffStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetRegionLockOnOffStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t XM_SendSignalInfoRequest(const uint8_t& xMSignalInfoReqType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << xMSignalInfoReqType;
        call.member("XM_SendSignalInfoRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t HD_GetTunerResponse()
    {
        ::DBus::CallMessage call;
        call.member("HD_GetTunerResponse");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetTunerResponse()
    {
        ::DBus::CallMessage call;
        call.member("GetTunerResponse");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t XM_GetRadioStatusResponse()
    {
        ::DBus::CallMessage call;
        call.member("XM_GetRadioStatusResponse");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t Get4ARegionInfo()
    {
        ::DBus::CallMessage call;
        call.member("Get4ARegionInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetJapanRegionInfo()
    {
        ::DBus::CallMessage call;
        call.member("GetJapanRegionInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t DAB_Command_Request(const ::DBus::Struct< uint8_t, uint8_t, uint16_t, uint16_t >& dabCmdReq)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dabCmdReq;
        call.member("DAB_Command_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t DAB_Control_Request(const ::DBus::Struct< uint8_t, uint8_t >& dabCtrlReq)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dabCtrlReq;
        call.member("DAB_Control_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< bool, bool, bool > DAB_Get_InfoStatus()
    {
        ::DBus::CallMessage call;
        call.member("DAB_Get_InfoStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< bool, bool, bool > argout;
        ri >> argout;
        return argout;
    }

    uint8_t DAB_Get_SignalStrength()
    {
        ::DBus::CallMessage call;
        call.member("DAB_Get_SignalStrength");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint8_t, std::vector< uint8_t >, uint16_t, uint16_t, uint8_t > DAB_Get_ChStatus()
    {
        ::DBus::CallMessage call;
        call.member("DAB_Get_ChStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint8_t, std::vector< uint8_t >, uint16_t, uint16_t, uint8_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint8_t, uint8_t > DAB_Get_ModeStatus()
    {
        ::DBus::CallMessage call;
        call.member("DAB_Get_ModeStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint8_t, uint8_t > argout;
        ri >> argout;
        return argout;
    }

    uint8_t DAB_Get_ListUpdateStatus()
    {
        ::DBus::CallMessage call;
        call.member("DAB_Get_ListUpdateStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t DAB_DirectControl(const ::DBus::Struct< std::vector< uint8_t >, uint16_t, uint16_t, uint8_t >& directCtrl)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << directCtrl;
        call.member("DAB_DirectControl");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t DAB_Get_Link_Status()
    {
        ::DBus::CallMessage call;
        call.member("DAB_Get_Link_Status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t DAB_Get_FMLink_Status()
    {
        ::DBus::CallMessage call;
        call.member("DAB_Get_FMLink_Status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t DAB_Get_BandSelect_Status()
    {
        ::DBus::CallMessage call;
        call.member("DAB_Get_BandSelect_Status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint8_t, uint8_t > DAB_Get_TAUStatus()
    {
        ::DBus::CallMessage call;
        call.member("DAB_Get_TAUStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint8_t, uint8_t > argout;
        ri >> argout;
        return argout;
    }

    uint8_t DAB_InterruptNotification(const uint8_t& notify)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << notify;
        call.member("DAB_InterruptNotification");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t XM_SxiPowerSts(const uint8_t& sxiPowerSts)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sxiPowerSts;
        call.member("XM_SxiPowerSts");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t XM_SxiBaudRate(const uint8_t& sxiBaudRate)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sxiBaudRate;
        call.member("XM_SxiBaudRate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t XM_XmModuleResetReq(const uint8_t& xmModuleResetReq)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << xmModuleResetReq;
        call.member("XM_XmModuleResetReq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint8_t, uint8_t > TauXmhSts_getXmModulePowerSts()
    {
        ::DBus::CallMessage call;
        call.member("TauXmhSts_getXmModulePowerSts");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint8_t, uint8_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint8_t, uint8_t > TauXmhSts_getSxiCommandReq()
    {
        ::DBus::CallMessage call;
        call.member("TauXmhSts_getSxiCommandReq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint8_t, uint8_t > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void Tuner_Response(const ::DBus::Struct< std::vector< uint8_t >, uint16_t >& tunerStatus) = 0;
    virtual void FrequencyLastKeep_Response(const uint8_t& lastKeepFrequency) = 0;
    virtual void HARWrite_Response(const uint8_t& frequency) = 0;
    virtual void PTY_Response(const uint8_t& recPTYResponse, const uint8_t& selPTYResponse) = 0;
    virtual void PTYChange_Notification(const uint8_t& radioPTY) = 0;
    virtual void AF_Response(const uint8_t& aFResponse) = 0;
    virtual void REG_Response(const uint8_t& rEGResponse) = 0;
    virtual void HD_Response(const uint8_t& hDResponse) = 0;
    virtual void HD_Tuner_Response(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, std::vector< uint8_t >, uint8_t >& hDTunerResponse) = 0;
    virtual void HD_PSD_Response(const uint8_t& hDPSDResponse) = 0;
    virtual void TA_Response(const uint8_t& tAResponse) = 0;
    virtual void RDS_Response(const uint8_t& rDSResponse) = 0;
    virtual void Metadata_Response(const uint8_t& metadata) = 0;
    virtual void AudioSetting_Response(const ::DBus::Struct< uint8_t, uint8_t >& audioSettings) = 0;
    virtual void ACU_Response(const uint8_t& aCUResponse) = 0;
    virtual void StationList_Response(const uint8_t& stationListResp) = 0;
    virtual void PresetInfo_Response(const uint8_t& presetInfoResponse) = 0;
    virtual void Text_Response(const ::DBus::Struct< uint8_t, std::vector< uint8_t > >& textResponse) = 0;
    virtual void HD_SISStatus_Response(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, std::vector< uint8_t > >& hDStatusResponse) = 0;
    virtual void TAUSourceIndex_Response(const uint8_t& sourceIndex, const uint8_t& tauSourceStatus) = 0;
    virtual void AMP_Response(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& aMPStatus) = 0;
    virtual void TAControl_Interrupt_Response(const uint8_t& interrupt) = 0;
    virtual void TAUSoftwareVersion_Response(const ::DBus::Struct< uint32_t, uint32_t >& softwareVersion) = 0;
    virtual void XM_RefreshStatus_Response(const uint8_t& xMRefreshStatus) = 0;
    virtual void XM_RadioStatus_Response(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& xMRadioStatus) = 0;
    virtual void XM_Mute_Status_Response(const uint8_t& xMMuteStatus) = 0;
    virtual void AUX_Status_Response(const uint8_t& aUXStatus) = 0;
    virtual void TrackChange(const uint8_t& trackChangeStatus) = 0;
    virtual void StationChange(const double& stationChangeStatus) = 0;
    virtual void ModeChange(const ::DBus::Struct< uint8_t, std::vector< uint8_t > >& modeChangeStatus) = 0;
    virtual void OffOnNotification(const uint8_t& radioOnOffStatus) = 0;
    virtual void DestinationCode(const uint8_t& radioDestinationCode) = 0;
    virtual void DestinationType(const uint8_t& radioDestinationType) = 0;
    virtual void XM_ConfigStatus(const uint8_t& radioXMConfigStat) = 0;
    virtual void ConnectionStatus(const uint8_t& radioConnectionStatus) = 0;
    virtual void RsesConnectStatus(const uint8_t& radioReesConnStat) = 0;
    virtual void iTunes_TaggingInfo(const ::DBus::Struct< uint8_t, std::vector< uint8_t > >& iTunesTaggingData) = 0;
    virtual void XM_MAP_Info(const uint8_t& xmMapInfo) = 0;
    virtual void XM_Signal_Info(const ::DBus::Struct< std::vector< uint8_t > >& xmSignalInfo) = 0;
    virtual void RDS_HAR_Response(const uint8_t& hARfrequency, const uint8_t& hAROnStatus) = 0;
    virtual void RDS_TAInterrupt_Response(const uint8_t& tAinterrupt) = 0;
    virtual void TAU_TestMode_Response(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& testMode) = 0;
    virtual void XM_Title_Response(const uint8_t& xMTitleResponse) = 0;
    virtual void XM_Metadata_Notification(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t >& xmMetadataNotification) = 0;
    virtual void HD_MetadataChange_Notification(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t >& hDMetadataChangeNotification) = 0;
    virtual void HD_Tuner2_Status_Response(const ::DBus::Struct< uint8_t, uint16_t >& hDRadioTuner2Status) = 0;
    virtual void Text_Notification(const uint8_t& textNotification) = 0;
    virtual void HD_ID3_XHDR_Response(const ::DBus::Struct< std::vector< uint8_t > >& hd_ID3_XHDR) = 0;
    virtual void XM_ModuleData_Response(const ::DBus::Struct< uint8_t, std::vector< uint8_t >, uint8_t, uint8_t, uint8_t, std::vector< uint8_t > >& xmModuleData) = 0;
    virtual void XM_SerialNumber_Response(const ::DBus::Struct< uint32_t, uint32_t >& xmSerialNumber) = 0;
    virtual void HD_ErrorStatusResponse(const ::DBus::Struct< std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, uint8_t, uint8_t, uint8_t >& hdErrorStatus) = 0;
    virtual void HD_RadioNumBlend_Response(const uint16_t& hDRadioNumBlend) = 0;
    virtual void SignalInfoChange_Response(const uint8_t& signalInfoChange) = 0;
    virtual void XM_MAP_DuplicateChannelNotification(const uint8_t& sid, const uint8_t& channelNumber) = 0;
    virtual void HD_BER_Status(const uint8_t& berStatus) = 0;
    virtual void HD_BCTL_Status(const uint8_t& bctlStatus) = 0;
    virtual void RDS_AlarmInterrupt_Response(const uint8_t& alarmInterrupt) = 0;
    virtual void New4ARegionInfo(const uint8_t& region) = 0;
    virtual void NewJapanRegionInfo(const uint8_t& region) = 0;
    virtual void DAB_ChStatus_Response(const ::DBus::Struct< uint8_t, std::vector< uint8_t >, uint16_t, uint16_t, uint8_t >& dabChStatus) = 0;
    virtual void DAB_Mode_Status(const ::DBus::Struct< uint8_t, uint8_t >& dabModeStatus) = 0;
    virtual void DAB_FMLinkSetting_Status(const uint8_t& dabFMLink) = 0;
    virtual void DAB_LinkSetting_Status(const uint8_t& dabLink) = 0;
    virtual void DAB_List_Status(const uint8_t& listStatus) = 0;
    virtual void DAB_BandSelectSetting_Status(const uint8_t& dabBandSelecting) = 0;
    virtual void DAB_RadioText_Status(const uint8_t& dabRadioText) = 0;
    virtual void DAB_SignalStrength_Status(const uint8_t& dabSigStrgth) = 0;
    virtual void DAB_DiagMode_Status(const uint8_t& dabDiagMode) = 0;
    virtual void DAB_EnsembleListMgmtInfo_Response(const ::DBus::Struct< uint8_t, uint8_t >& ensListMgmtInfo) = 0;
    virtual void DAB_EnsembleInfoList_Response(const ::DBus::Struct< uint8_t, uint8_t, uint16_t, std::vector< uint8_t >, std::vector< uint8_t > >& ensInfoList) = 0;
    virtual void DAB_CompoListMgmtInfo_Response(const ::DBus::Struct< uint8_t, uint16_t, uint16_t >& compoListMgmtInfo) = 0;
    virtual void DAB_CompoInfoList_Response(const ::DBus::Struct< uint8_t, uint8_t, uint16_t, uint16_t, uint8_t, std::vector< uint8_t > >& compoInfoList) = 0;
    virtual void DAB_Label_Response(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, std::vector< uint8_t > >& labelResp) = 0;
    virtual void DAB_TAUConfig_Status(const ::DBus::Struct< uint8_t, uint8_t >& configStatus) = 0;
    virtual void DAB_Info_Status(const uint8_t& dabInfoStatus) = 0;
    virtual void DAB_Diag_Status(const ::DBus::Struct< uint8_t, uint16_t, uint32_t, std::vector< uint8_t >, uint8_t, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t >& diagResp) = 0;
    virtual void DAB_List_Current_State(const uint8_t& dabListCurrentState, const uint8_t& dabListType) = 0;
    virtual void DAB_Text_Info_Status(const uint8_t& dabTextInfoStatus, const uint8_t& dabContentType) = 0;
    virtual void TauXmhSts_XmModulePowerSts(const ::DBus::Struct< uint8_t, uint8_t >& xmModulePowerSts) = 0;
    virtual void TauXmhSts_SxiCommandReq(const ::DBus::Struct< uint8_t, uint8_t >& sxiCommandReq) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Tuner_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t >, uint16_t > tunerStatus;
        ri >> tunerStatus;
        Tuner_Response(tunerStatus);
    }
    void _FrequencyLastKeep_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t lastKeepFrequency;
        ri >> lastKeepFrequency;
        FrequencyLastKeep_Response(lastKeepFrequency);
    }
    void _HARWrite_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t frequency;
        ri >> frequency;
        HARWrite_Response(frequency);
    }
    void _PTY_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t recPTYResponse;
        ri >> recPTYResponse;
        uint8_t selPTYResponse;
        ri >> selPTYResponse;
        PTY_Response(recPTYResponse, selPTYResponse);
    }
    void _PTYChange_Notification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t radioPTY;
        ri >> radioPTY;
        PTYChange_Notification(radioPTY);
    }
    void _AF_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t aFResponse;
        ri >> aFResponse;
        AF_Response(aFResponse);
    }
    void _REG_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t rEGResponse;
        ri >> rEGResponse;
        REG_Response(rEGResponse);
    }
    void _HD_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t hDResponse;
        ri >> hDResponse;
        HD_Response(hDResponse);
    }
    void _HD_Tuner_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, std::vector< uint8_t >, uint8_t > hDTunerResponse;
        ri >> hDTunerResponse;
        HD_Tuner_Response(hDTunerResponse);
    }
    void _HD_PSD_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t hDPSDResponse;
        ri >> hDPSDResponse;
        HD_PSD_Response(hDPSDResponse);
    }
    void _TA_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t tAResponse;
        ri >> tAResponse;
        TA_Response(tAResponse);
    }
    void _RDS_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t rDSResponse;
        ri >> rDSResponse;
        RDS_Response(rDSResponse);
    }
    void _Metadata_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t metadata;
        ri >> metadata;
        Metadata_Response(metadata);
    }
    void _AudioSetting_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t > audioSettings;
        ri >> audioSettings;
        AudioSetting_Response(audioSettings);
    }
    void _ACU_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t aCUResponse;
        ri >> aCUResponse;
        ACU_Response(aCUResponse);
    }
    void _StationList_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t stationListResp;
        ri >> stationListResp;
        StationList_Response(stationListResp);
    }
    void _PresetInfo_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t presetInfoResponse;
        ri >> presetInfoResponse;
        PresetInfo_Response(presetInfoResponse);
    }
    void _Text_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< uint8_t > > textResponse;
        ri >> textResponse;
        Text_Response(textResponse);
    }
    void _HD_SISStatus_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, std::vector< uint8_t > > hDStatusResponse;
        ri >> hDStatusResponse;
        HD_SISStatus_Response(hDStatusResponse);
    }
    void _TAUSourceIndex_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t sourceIndex;
        ri >> sourceIndex;
        uint8_t tauSourceStatus;
        ri >> tauSourceStatus;
        TAUSourceIndex_Response(sourceIndex, tauSourceStatus);
    }
    void _AMP_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t > aMPStatus;
        ri >> aMPStatus;
        AMP_Response(aMPStatus);
    }
    void _TAControl_Interrupt_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t interrupt;
        ri >> interrupt;
        TAControl_Interrupt_Response(interrupt);
    }
    void _TAUSoftwareVersion_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > softwareVersion;
        ri >> softwareVersion;
        TAUSoftwareVersion_Response(softwareVersion);
    }
    void _XM_RefreshStatus_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t xMRefreshStatus;
        ri >> xMRefreshStatus;
        XM_RefreshStatus_Response(xMRefreshStatus);
    }
    void _XM_RadioStatus_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t > xMRadioStatus;
        ri >> xMRadioStatus;
        XM_RadioStatus_Response(xMRadioStatus);
    }
    void _XM_Mute_Status_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t xMMuteStatus;
        ri >> xMMuteStatus;
        XM_Mute_Status_Response(xMMuteStatus);
    }
    void _AUX_Status_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t aUXStatus;
        ri >> aUXStatus;
        AUX_Status_Response(aUXStatus);
    }
    void _TrackChange_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t trackChangeStatus;
        ri >> trackChangeStatus;
        TrackChange(trackChangeStatus);
    }
    void _StationChange_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        double stationChangeStatus;
        ri >> stationChangeStatus;
        StationChange(stationChangeStatus);
    }
    void _ModeChange_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< uint8_t > > modeChangeStatus;
        ri >> modeChangeStatus;
        ModeChange(modeChangeStatus);
    }
    void _OffOnNotification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t radioOnOffStatus;
        ri >> radioOnOffStatus;
        OffOnNotification(radioOnOffStatus);
    }
    void _DestinationCode_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t radioDestinationCode;
        ri >> radioDestinationCode;
        DestinationCode(radioDestinationCode);
    }
    void _DestinationType_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t radioDestinationType;
        ri >> radioDestinationType;
        DestinationType(radioDestinationType);
    }
    void _XM_ConfigStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t radioXMConfigStat;
        ri >> radioXMConfigStat;
        XM_ConfigStatus(radioXMConfigStat);
    }
    void _ConnectionStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t radioConnectionStatus;
        ri >> radioConnectionStatus;
        ConnectionStatus(radioConnectionStatus);
    }
    void _RsesConnectStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t radioReesConnStat;
        ri >> radioReesConnStat;
        RsesConnectStatus(radioReesConnStat);
    }
    void _iTunes_TaggingInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< uint8_t > > iTunesTaggingData;
        ri >> iTunesTaggingData;
        iTunes_TaggingInfo(iTunesTaggingData);
    }
    void _XM_MAP_Info_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t xmMapInfo;
        ri >> xmMapInfo;
        XM_MAP_Info(xmMapInfo);
    }
    void _XM_Signal_Info_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > xmSignalInfo;
        ri >> xmSignalInfo;
        XM_Signal_Info(xmSignalInfo);
    }
    void _RDS_HAR_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t hARfrequency;
        ri >> hARfrequency;
        uint8_t hAROnStatus;
        ri >> hAROnStatus;
        RDS_HAR_Response(hARfrequency, hAROnStatus);
    }
    void _RDS_TAInterrupt_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t tAinterrupt;
        ri >> tAinterrupt;
        RDS_TAInterrupt_Response(tAinterrupt);
    }
    void _TAU_TestMode_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t > testMode;
        ri >> testMode;
        TAU_TestMode_Response(testMode);
    }
    void _XM_Title_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t xMTitleResponse;
        ri >> xMTitleResponse;
        XM_Title_Response(xMTitleResponse);
    }
    void _XM_Metadata_Notification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t > xmMetadataNotification;
        ri >> xmMetadataNotification;
        XM_Metadata_Notification(xmMetadataNotification);
    }
    void _HD_MetadataChange_Notification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint16_t > hDMetadataChangeNotification;
        ri >> hDMetadataChangeNotification;
        HD_MetadataChange_Notification(hDMetadataChangeNotification);
    }
    void _HD_Tuner2_Status_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint16_t > hDRadioTuner2Status;
        ri >> hDRadioTuner2Status;
        HD_Tuner2_Status_Response(hDRadioTuner2Status);
    }
    void _Text_Notification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t textNotification;
        ri >> textNotification;
        Text_Notification(textNotification);
    }
    void _HD_ID3_XHDR_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > hd_ID3_XHDR;
        ri >> hd_ID3_XHDR;
        HD_ID3_XHDR_Response(hd_ID3_XHDR);
    }
    void _XM_ModuleData_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< uint8_t >, uint8_t, uint8_t, uint8_t, std::vector< uint8_t > > xmModuleData;
        ri >> xmModuleData;
        XM_ModuleData_Response(xmModuleData);
    }
    void _XM_SerialNumber_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > xmSerialNumber;
        ri >> xmSerialNumber;
        XM_SerialNumber_Response(xmSerialNumber);
    }
    void _HD_ErrorStatusResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, uint8_t, uint8_t, uint8_t > hdErrorStatus;
        ri >> hdErrorStatus;
        HD_ErrorStatusResponse(hdErrorStatus);
    }
    void _HD_RadioNumBlend_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t hDRadioNumBlend;
        ri >> hDRadioNumBlend;
        HD_RadioNumBlend_Response(hDRadioNumBlend);
    }
    void _SignalInfoChange_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t signalInfoChange;
        ri >> signalInfoChange;
        SignalInfoChange_Response(signalInfoChange);
    }
    void _XM_MAP_DuplicateChannelNotification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t sid;
        ri >> sid;
        uint8_t channelNumber;
        ri >> channelNumber;
        XM_MAP_DuplicateChannelNotification(sid, channelNumber);
    }
    void _HD_BER_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t berStatus;
        ri >> berStatus;
        HD_BER_Status(berStatus);
    }
    void _HD_BCTL_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t bctlStatus;
        ri >> bctlStatus;
        HD_BCTL_Status(bctlStatus);
    }
    void _RDS_AlarmInterrupt_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t alarmInterrupt;
        ri >> alarmInterrupt;
        RDS_AlarmInterrupt_Response(alarmInterrupt);
    }
    void _New4ARegionInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t region;
        ri >> region;
        New4ARegionInfo(region);
    }
    void _NewJapanRegionInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t region;
        ri >> region;
        NewJapanRegionInfo(region);
    }
    void _DAB_ChStatus_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< uint8_t >, uint16_t, uint16_t, uint8_t > dabChStatus;
        ri >> dabChStatus;
        DAB_ChStatus_Response(dabChStatus);
    }
    void _DAB_Mode_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t > dabModeStatus;
        ri >> dabModeStatus;
        DAB_Mode_Status(dabModeStatus);
    }
    void _DAB_FMLinkSetting_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t dabFMLink;
        ri >> dabFMLink;
        DAB_FMLinkSetting_Status(dabFMLink);
    }
    void _DAB_LinkSetting_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t dabLink;
        ri >> dabLink;
        DAB_LinkSetting_Status(dabLink);
    }
    void _DAB_List_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t listStatus;
        ri >> listStatus;
        DAB_List_Status(listStatus);
    }
    void _DAB_BandSelectSetting_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t dabBandSelecting;
        ri >> dabBandSelecting;
        DAB_BandSelectSetting_Status(dabBandSelecting);
    }
    void _DAB_RadioText_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t dabRadioText;
        ri >> dabRadioText;
        DAB_RadioText_Status(dabRadioText);
    }
    void _DAB_SignalStrength_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t dabSigStrgth;
        ri >> dabSigStrgth;
        DAB_SignalStrength_Status(dabSigStrgth);
    }
    void _DAB_DiagMode_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t dabDiagMode;
        ri >> dabDiagMode;
        DAB_DiagMode_Status(dabDiagMode);
    }
    void _DAB_EnsembleListMgmtInfo_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t > ensListMgmtInfo;
        ri >> ensListMgmtInfo;
        DAB_EnsembleListMgmtInfo_Response(ensListMgmtInfo);
    }
    void _DAB_EnsembleInfoList_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint16_t, std::vector< uint8_t >, std::vector< uint8_t > > ensInfoList;
        ri >> ensInfoList;
        DAB_EnsembleInfoList_Response(ensInfoList);
    }
    void _DAB_CompoListMgmtInfo_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint16_t, uint16_t > compoListMgmtInfo;
        ri >> compoListMgmtInfo;
        DAB_CompoListMgmtInfo_Response(compoListMgmtInfo);
    }
    void _DAB_CompoInfoList_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint16_t, uint16_t, uint8_t, std::vector< uint8_t > > compoInfoList;
        ri >> compoInfoList;
        DAB_CompoInfoList_Response(compoInfoList);
    }
    void _DAB_Label_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, std::vector< uint8_t > > labelResp;
        ri >> labelResp;
        DAB_Label_Response(labelResp);
    }
    void _DAB_TAUConfig_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t > configStatus;
        ri >> configStatus;
        DAB_TAUConfig_Status(configStatus);
    }
    void _DAB_Info_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t dabInfoStatus;
        ri >> dabInfoStatus;
        DAB_Info_Status(dabInfoStatus);
    }
    void _DAB_Diag_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint16_t, uint32_t, std::vector< uint8_t >, uint8_t, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t, uint16_t, uint16_t, uint8_t, uint8_t, uint8_t > diagResp;
        ri >> diagResp;
        DAB_Diag_Status(diagResp);
    }
    void _DAB_List_Current_State_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t dabListCurrentState;
        ri >> dabListCurrentState;
        uint8_t dabListType;
        ri >> dabListType;
        DAB_List_Current_State(dabListCurrentState, dabListType);
    }
    void _DAB_Text_Info_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t dabTextInfoStatus;
        ri >> dabTextInfoStatus;
        uint8_t dabContentType;
        ri >> dabContentType;
        DAB_Text_Info_Status(dabTextInfoStatus, dabContentType);
    }
    void _TauXmhSts_XmModulePowerSts_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t > xmModulePowerSts;
        ri >> xmModulePowerSts;
        TauXmhSts_XmModulePowerSts(xmModulePowerSts);
    }
    void _TauXmhSts_SxiCommandReq_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t > sxiCommandReq;
        ri >> sxiCommandReq;
        TauXmhSts_SxiCommandReq(sxiCommandReq);
    }
};

} } } 
namespace com {
namespace jci {
namespace vbs {

class navi_proxy
: public ::DBus::InterfaceProxy
{
public:

    navi_proxy()
    : ::DBus::InterfaceProxy("com.jci.vbs.navi")
    {
        connect_signal(navi_proxy, FuelTypeResp, _FuelTypeResp_stub);
        connect_signal(navi_proxy, HUDResp, _HUDResp_stub);
        connect_signal(navi_proxy, TSRResp, _TSRResp_stub);
        connect_signal(navi_proxy, GccConfigMgmtResp, _GccConfigMgmtResp_stub);
        connect_signal(navi_proxy, TSRFeatureMode, _TSRFeatureMode_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint8_t GetFuelType()
    {
        ::DBus::CallMessage call;
        call.member("GetFuelType");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetHUDStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetHUDStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetTSRStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetTSRStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetTSRMode()
    {
        ::DBus::CallMessage call;
        call.member("GetTSRMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t TMCServiceListReq(const uint8_t& tmcSrvceLstReq)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tmcSrvceLstReq;
        call.member("TMCServiceListReq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t TMCSelectReq(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& tmcSelectReq)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tmcSelectReq;
        call.member("TMCSelectReq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t SetHUDDisplayMsgReq(const ::DBus::Struct< uint32_t, uint16_t, uint8_t, uint16_t, uint8_t, uint8_t >& hudDisplayMsg)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hudDisplayMsg;
        call.member("SetHUDDisplayMsgReq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t SetRecommLaneReq(const ::DBus::Struct< std::vector< uint8_t > >& hudRecommLaneInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hudRecommLaneInfo;
        call.member("SetRecommLaneReq");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t SetTSRNavigationSignal(const ::DBus::Struct< uint8_t, bool, bool, uint8_t >& tsrNavigation)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tsrNavigation;
        call.member("SetTSRNavigationSignal");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    std::string GetVINData()
    {
        ::DBus::CallMessage call;
        call.member("GetVINData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void FuelTypeResp(const uint8_t& fuelType) = 0;
    virtual void HUDResp(const uint8_t& hudStatus) = 0;
    virtual void TSRResp(const uint8_t& tsrStatus) = 0;
    virtual void GccConfigMgmtResp(const ::DBus::Struct< std::vector< uint8_t > >& vin_Character) = 0;
    virtual void TSRFeatureMode(const uint8_t& tsrMode) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _FuelTypeResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t fuelType;
        ri >> fuelType;
        FuelTypeResp(fuelType);
    }
    void _HUDResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t hudStatus;
        ri >> hudStatus;
        HUDResp(hudStatus);
    }
    void _TSRResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t tsrStatus;
        ri >> tsrStatus;
        TSRResp(tsrStatus);
    }
    void _GccConfigMgmtResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > vin_Character;
        ri >> vin_Character;
        GccConfigMgmtResp(vin_Character);
    }
    void _TSRFeatureMode_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t tsrMode;
        ri >> tsrMode;
        TSRFeatureMode(tsrMode);
    }
};

} } } 
namespace com {
namespace jci {
namespace vbs {
namespace navi {

class tmc_proxy
: public ::DBus::InterfaceProxy
{
public:

    tmc_proxy()
    : ::DBus::InterfaceProxy("com.jci.vbs.navi.tmc")
    {
        connect_signal(tmc_proxy, ServiceListResponse, _ServiceListResponse_stub);
        connect_signal(tmc_proxy, ResponseToTMCSelection, _ResponseToTMCSelection_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint8_t NaviCompassVal(const uint8_t& compass)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << compass;
        call.member("NaviCompassVal");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t NaviSignal(const uint8_t& navi)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << navi;
        call.member("NaviSignal");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t SetHUD_Display_Msg2(const ::DBus::Struct< std::string, uint8_t >& guidancePointData)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << guidancePointData;
        call.member("SetHUD_Display_Msg2");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void ServiceListResponse(const ::DBus::Struct< uint8_t, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t > >& providerList) = 0;
    virtual void ResponseToTMCSelection(const uint8_t& rdstmcOperation, const uint8_t& tmcSearchMode, const uint8_t& countryCode, const uint8_t& locationTableNumber, const uint8_t& serviceIdentifier, const uint8_t& quality, const uint8_t& receptionStatus) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ServiceListResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t >, std::vector< uint8_t > > providerList;
        ri >> providerList;
        ServiceListResponse(providerList);
    }
    void _ResponseToTMCSelection_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t rdstmcOperation;
        ri >> rdstmcOperation;
        uint8_t tmcSearchMode;
        ri >> tmcSearchMode;
        uint8_t countryCode;
        ri >> countryCode;
        uint8_t locationTableNumber;
        ri >> locationTableNumber;
        uint8_t serviceIdentifier;
        ri >> serviceIdentifier;
        uint8_t quality;
        ri >> quality;
        uint8_t receptionStatus;
        ri >> receptionStatus;
        ResponseToTMCSelection(rdstmcOperation, tmcSearchMode, countryCode, locationTableNumber, serviceIdentifier, quality, receptionStatus);
    }
};

} } } } 
namespace com {
namespace jci {
namespace vbs {

class am_proxy
: public ::DBus::InterfaceProxy
{
public:

    am_proxy()
    : ::DBus::InterfaceProxy("com.jci.vbs.am")
    {
        connect_signal(am_proxy, AudioProfileStatus, _AudioProfileStatus_stub);
        connect_signal(am_proxy, MuteStatus, _MuteStatus_stub);
        connect_signal(am_proxy, UnMuteStatus, _UnMuteStatus_stub);
        connect_signal(am_proxy, SourceSelectResponse, _SourceSelectResponse_stub);
        connect_signal(am_proxy, VolumeStatus, _VolumeStatus_stub);
        connect_signal(am_proxy, TAUSourceChangeResponse, _TAUSourceChangeResponse_stub);
        connect_signal(am_proxy, EntertainmentMuteStatus, _EntertainmentMuteStatus_stub);
        connect_signal(am_proxy, LastModeStatus, _LastModeStatus_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint8_t SetMute(const uint8_t& muteType, const uint8_t& rampTime)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << muteType;
        wi << rampTime;
        call.member("SetMute");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t SetUnMute(const uint8_t& muteType, const uint8_t& rampTime)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << muteType;
        wi << rampTime;
        call.member("SetUnMute");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t SourceSelect(const std::string& source1, const std::string& source2, const std::string& source3, const std::string& sourceOff, const std::string& cMU_Audio_Left, const std::string& cMU_Audio_Right)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << source1;
        wi << source2;
        wi << source3;
        wi << sourceOff;
        wi << cMU_Audio_Left;
        wi << cMU_Audio_Right;
        call.member("SourceSelect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t SetVolume(const uint8_t& volumeType, const uint32_t& controlValue, const int32_t& volumeValue, const std::string& volSrcGrp)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << volumeType;
        wi << controlValue;
        wi << volumeValue;
        wi << volSrcGrp;
        call.member("SetVolume");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t SetAudioProfile(const uint8_t& controlValue, const uint8_t& audioProfileType, const int32_t& audioProfileValue, const int32_t& lastProfile)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << controlValue;
        wi << audioProfileType;
        wi << audioProfileValue;
        wi << lastProfile;
        call.member("SetAudioProfile");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    void GetVolumeStatus(const std::string& volSrcGrp, std::string& retVolSrcGrp, int32_t& volumeValue, uint8_t& return_value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << volSrcGrp;
        call.member("GetVolumeStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> retVolSrcGrp;
        ri >> volumeValue;
        ri >> return_value;
    }

    uint8_t GetEntertainmentMuteStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetEntertainmentMuteStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetLastMode()
    {
        ::DBus::CallMessage call;
        call.member("GetLastMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t SetLastMode(const std::string& activeSource, const std::string& prevSource, const std::string& broadcastSource)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << activeSource;
        wi << prevSource;
        wi << broadcastSource;
        call.member("SetLastMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    void GetAudioProfileStatus(const uint8_t& profileType, int32_t& profileValue, uint8_t& return_value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << profileType;
        call.member("GetAudioProfileStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> profileValue;
        ri >> return_value;
    }

    void GetMuteStatus(const uint8_t& muteType, uint8_t& muteValue, uint8_t& return_value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << muteType;
        call.member("GetMuteStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> muteValue;
        ri >> return_value;
    }

    uint8_t SetVolumeVolMgr(const uint8_t& bthfVol, const uint8_t& ringToneVol, const uint8_t& naviVol)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << bthfVol;
        wi << ringToneVol;
        wi << naviVol;
        call.member("SetVolumeVolMgr");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    void GetActiveSource(std::string& ret_ActiveSrc, std::string& ret_InterruptSrc, uint8_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("GetActiveSource");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> ret_ActiveSrc;
        ri >> ret_InterruptSrc;
        ri >> return_value;
    }


public:

    /* signal handlers for this interface
     */
    virtual void AudioProfileStatus(const uint8_t& audioProfileType, const int32_t& audioProfileValue) = 0;
    virtual void MuteStatus(const uint8_t& muteType) = 0;
    virtual void UnMuteStatus(const uint8_t& muteType) = 0;
    virtual void SourceSelectResponse(const std::string& source1, const std::string& source2, const std::string& source3, const std::string& sourceOff) = 0;
    virtual void VolumeStatus(const uint8_t& volumeType, const std::string& volSrcGrp, const int32_t& volumeValue) = 0;
    virtual void TAUSourceChangeResponse(const ::DBus::Struct< uint8_t, uint8_t >& srcChangeResp) = 0;
    virtual void EntertainmentMuteStatus(const uint8_t& entertainmentMuteStat) = 0;
    virtual void LastModeStatus(const uint8_t& entertainmentMuteStatus, const std::string& lastActiveSource, const std::string& lastPrevSource, const std::string& lastBroadcastSource, const std::string& currentSource, const uint8_t& cdStatus, const uint8_t& cdDiskType, const uint8_t& auxStatus) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _AudioProfileStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t audioProfileType;
        ri >> audioProfileType;
        int32_t audioProfileValue;
        ri >> audioProfileValue;
        AudioProfileStatus(audioProfileType, audioProfileValue);
    }
    void _MuteStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t muteType;
        ri >> muteType;
        MuteStatus(muteType);
    }
    void _UnMuteStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t muteType;
        ri >> muteType;
        UnMuteStatus(muteType);
    }
    void _SourceSelectResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string source1;
        ri >> source1;
        std::string source2;
        ri >> source2;
        std::string source3;
        ri >> source3;
        std::string sourceOff;
        ri >> sourceOff;
        SourceSelectResponse(source1, source2, source3, sourceOff);
    }
    void _VolumeStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t volumeType;
        ri >> volumeType;
        std::string volSrcGrp;
        ri >> volSrcGrp;
        int32_t volumeValue;
        ri >> volumeValue;
        VolumeStatus(volumeType, volSrcGrp, volumeValue);
    }
    void _TAUSourceChangeResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t > srcChangeResp;
        ri >> srcChangeResp;
        TAUSourceChangeResponse(srcChangeResp);
    }
    void _EntertainmentMuteStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t entertainmentMuteStat;
        ri >> entertainmentMuteStat;
        EntertainmentMuteStatus(entertainmentMuteStat);
    }
    void _LastModeStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t entertainmentMuteStatus;
        ri >> entertainmentMuteStatus;
        std::string lastActiveSource;
        ri >> lastActiveSource;
        std::string lastPrevSource;
        ri >> lastPrevSource;
        std::string lastBroadcastSource;
        ri >> lastBroadcastSource;
        std::string currentSource;
        ri >> currentSource;
        uint8_t cdStatus;
        ri >> cdStatus;
        uint8_t cdDiskType;
        ri >> cdDiskType;
        uint8_t auxStatus;
        ri >> auxStatus;
        LastModeStatus(entertainmentMuteStatus, lastActiveSource, lastPrevSource, lastBroadcastSource, currentSource, cdStatus, cdDiskType, auxStatus);
    }
};

} } } 
namespace com {
namespace jci {
namespace vbs {

class diag_proxy
: public ::DBus::InterfaceProxy
{
public:

    diag_proxy()
    : ::DBus::InterfaceProxy("com.jci.vbs.diag")
    {
        connect_signal(diag_proxy, GetFaultStatus_Response, _GetFaultStatus_Response_stub);
        connect_signal(diag_proxy, ClearFault_Response, _ClearFault_Response_stub);
        connect_signal(diag_proxy, Clear_HMIResponse, _Clear_HMIResponse_stub);
        connect_signal(diag_proxy, GetRoutineStatus_Response, _GetRoutineStatus_Response_stub);
        connect_signal(diag_proxy, GetData_Response, _GetData_Response_stub);
        connect_signal(diag_proxy, GGDSData_Request, _GGDSData_Request_stub);
        connect_signal(diag_proxy, GGDSRoutine_Request, _GGDSRoutine_Request_stub);
        connect_signal(diag_proxy, GetVehicleInfoData_Response, _GetVehicleInfoData_Response_stub);
        connect_signal(diag_proxy, GetSystemFailureError_Response, _GetSystemFailureError_Response_stub);
        connect_signal(diag_proxy, GetTAUVehicleInfoData_Response, _GetTAUVehicleInfoData_Response_stub);
        connect_signal(diag_proxy, Session_Notification, _Session_Notification_stub);
        connect_signal(diag_proxy, Vip_Reset_Notification, _Vip_Reset_Notification_stub);
        connect_signal(diag_proxy, ReadPermanentDTCLog_Response, _ReadPermanentDTCLog_Response_stub);
        connect_signal(diag_proxy, ReadPermanentDTCLogCounter_Response, _ReadPermanentDTCLogCounter_Response_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint32_t SetFault_Request(const uint32_t& fault_ID)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fault_ID;
        call.member("SetFault_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t ClearSingleFault_Request(const uint32_t& fault_ID)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fault_ID;
        call.member("ClearSingleFault_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetFaultStatus_Request(const ::DBus::Struct< std::vector< uint32_t >, uint8_t >& fault_ID_List)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fault_ID_List;
        call.member("GetFaultStatus_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t ReadCMUFaults_Request()
    {
        ::DBus::CallMessage call;
        call.member("ReadCMUFaults_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t ReadAVCFaults_Request()
    {
        ::DBus::CallMessage call;
        call.member("ReadAVCFaults_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t ClearFaults_Request(const ::DBus::Struct< std::vector< uint32_t >, uint8_t >& fault_ID_List)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fault_ID_List;
        call.member("ClearFaults_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t ClearFaults_HMIRequest()
    {
        ::DBus::CallMessage call;
        call.member("ClearFaults_HMIRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t Routine_Request(const uint8_t& routineID, const uint16_t& routine_Param)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << routineID;
        wi << routine_Param;
        call.member("Routine_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t Data_Request(const uint8_t& dIDNo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dIDNo;
        call.member("Data_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GGDS_Data_Response(const ::DBus::Struct< uint8_t, std::vector< uint8_t > >& data_response)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << data_response;
        call.member("GGDS_Data_Response");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GGDS_Routine_Response(const ::DBus::Struct< uint32_t, uint8_t, uint8_t >& routine_response)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << routine_response;
        call.member("GGDS_Routine_Response");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t TestScreen_Status_Response(const uint8_t& testScreenStatus)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << testScreenStatus;
        call.member("TestScreen_Status_Response");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t TAU_Vehicle_Info_Data_Request(const uint8_t& dIDNo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dIDNo;
        call.member("TAU_Vehicle_Info_Data_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t > BLM_Ready_Vehicle_Info_Data_Request()
    {
        ::DBus::CallMessage call;
        call.member("BLM_Ready_Vehicle_Info_Data_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t > argout;
        ri >> argout;
        return argout;
    }

    uint32_t GenericMessage_Request(const uint32_t& signalRequest)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << signalRequest;
        call.member("GenericMessage_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t PermanentDTCLog_Request()
    {
        ::DBus::CallMessage call;
        call.member("PermanentDTCLog_Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t Send_SXM_ESN(const ::DBus::Struct< std::vector< uint8_t > >& vbs_SXM_ESN)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << vbs_SXM_ESN;
        call.member("Send_SXM_ESN");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void GetFaultStatus_Response(const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint8_t > >, uint8_t >& faultStatus) = 0;
    virtual void ClearFault_Response(const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint8_t > >, uint8_t >& clearFaultAck) = 0;
    virtual void Clear_HMIResponse(const ::DBus::Struct< uint32_t, uint8_t, uint8_t >& clearHMIResponse) = 0;
    virtual void GetRoutineStatus_Response(const ::DBus::Struct< uint32_t, uint8_t, uint8_t >& routineResponse) = 0;
    virtual void GetData_Response(const ::DBus::Struct< uint8_t, std::vector< uint8_t > >& dIDResponse) = 0;
    virtual void GGDSData_Request(const uint8_t& gGDSDataRequest) = 0;
    virtual void GGDSRoutine_Request(const uint8_t& gGDSRoutineRequest) = 0;
    virtual void GetVehicleInfoData_Response(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& data_vehicle_info) = 0;
    virtual void GetSystemFailureError_Response(const uint8_t& error_id, const uint8_t& error_status) = 0;
    virtual void GetTAUVehicleInfoData_Response(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint32_t, uint8_t, uint8_t >& data_vehicle_info_tau) = 0;
    virtual void Session_Notification(const uint8_t& sessionID) = 0;
    virtual void Vip_Reset_Notification() = 0;
    virtual void ReadPermanentDTCLog_Response(const ::DBus::Struct< std::vector< uint8_t > >& dtc_log) = 0;
    virtual void ReadPermanentDTCLogCounter_Response(const ::DBus::Struct< std::vector< uint16_t >, uint8_t >& dtc_log_counter) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _GetFaultStatus_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint8_t > >, uint8_t > faultStatus;
        ri >> faultStatus;
        GetFaultStatus_Response(faultStatus);
    }
    void _ClearFault_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint8_t > >, uint8_t > clearFaultAck;
        ri >> clearFaultAck;
        ClearFault_Response(clearFaultAck);
    }
    void _Clear_HMIResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint8_t, uint8_t > clearHMIResponse;
        ri >> clearHMIResponse;
        Clear_HMIResponse(clearHMIResponse);
    }
    void _GetRoutineStatus_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint8_t, uint8_t > routineResponse;
        ri >> routineResponse;
        GetRoutineStatus_Response(routineResponse);
    }
    void _GetData_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< uint8_t > > dIDResponse;
        ri >> dIDResponse;
        GetData_Response(dIDResponse);
    }
    void _GGDSData_Request_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t gGDSDataRequest;
        ri >> gGDSDataRequest;
        GGDSData_Request(gGDSDataRequest);
    }
    void _GGDSRoutine_Request_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t gGDSRoutineRequest;
        ri >> gGDSRoutineRequest;
        GGDSRoutine_Request(gGDSRoutineRequest);
    }
    void _GetVehicleInfoData_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t > data_vehicle_info;
        ri >> data_vehicle_info;
        GetVehicleInfoData_Response(data_vehicle_info);
    }
    void _GetSystemFailureError_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t error_id;
        ri >> error_id;
        uint8_t error_status;
        ri >> error_status;
        GetSystemFailureError_Response(error_id, error_status);
    }
    void _GetTAUVehicleInfoData_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint16_t, uint8_t, uint8_t, uint32_t, uint8_t, uint8_t > data_vehicle_info_tau;
        ri >> data_vehicle_info_tau;
        GetTAUVehicleInfoData_Response(data_vehicle_info_tau);
    }
    void _Session_Notification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t sessionID;
        ri >> sessionID;
        Session_Notification(sessionID);
    }
    void _Vip_Reset_Notification_stub(const ::DBus::SignalMessage &sig)
    {
        Vip_Reset_Notification();
    }
    void _ReadPermanentDTCLog_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > dtc_log;
        ri >> dtc_log;
        ReadPermanentDTCLog_Response(dtc_log);
    }
    void _ReadPermanentDTCLogCounter_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint16_t >, uint8_t > dtc_log_counter;
        ri >> dtc_log_counter;
        ReadPermanentDTCLogCounter_Response(dtc_log_counter);
    }
};

} } } 
namespace com {
namespace jci {
namespace vbs {

class vdt_proxy
: public ::DBus::InterfaceProxy
{
public:

    vdt_proxy()
    : ::DBus::InterfaceProxy("com.jci.vbs.vdt")
    {
        connect_signal(vdt_proxy, SISS_EngineState, _SISS_EngineState_stub);
        connect_signal(vdt_proxy, SISSStatus, _SISSStatus_stub);
        connect_signal(vdt_proxy, DR_EVM_MSG, _DR_EVM_MSG_stub);
        connect_signal(vdt_proxy, Veh_V_ActlEng, _Veh_V_ActlEng_stub);
        connect_signal(vdt_proxy, VehVActlEng_D_Qf, _VehVActlEng_D_Qf_stub);
        connect_signal(vdt_proxy, OdoCount, _OdoCount_stub);
        connect_signal(vdt_proxy, FuelPulse, _FuelPulse_stub);
        connect_signal(vdt_proxy, OdoCount_2, _OdoCount_2_stub);
        connect_signal(vdt_proxy, FuelPulse_2, _FuelPulse_2_stub);
        connect_signal(vdt_proxy, EngAout_N_Actl, _EngAout_N_Actl_stub);
        connect_signal(vdt_proxy, ApedPos_Pc_ActlArb, _ApedPos_Pc_ActlArb_stub);
        connect_signal(vdt_proxy, ApedPosPcActl_D_Qf, _ApedPosPcActl_D_Qf_stub);
        connect_signal(vdt_proxy, SteWhlComp_An_Est, _SteWhlComp_An_Est_stub);
        connect_signal(vdt_proxy, VehLong_A_Actl, _VehLong_A_Actl_stub);
        connect_signal(vdt_proxy, FSC_Diag_Rx, _FSC_Diag_Rx_stub);
        connect_signal(vdt_proxy, HEC_Diag_Rx, _HEC_Diag_Rx_stub);
        connect_signal(vdt_proxy, HEVHEC_Diag_Rx, _HEVHEC_Diag_Rx_stub);
        connect_signal(vdt_proxy, FBCM_Diag_Rx, _FBCM_Diag_Rx_stub);
        connect_signal(vdt_proxy, EPAS_Diag_Rx, _EPAS_Diag_Rx_stub);
        connect_signal(vdt_proxy, SSU_Diag_Rx, _SSU_Diag_Rx_stub);
        connect_signal(vdt_proxy, AFS_Diag_Rx, _AFS_Diag_Rx_stub);
        connect_signal(vdt_proxy, RCM_Diag_Rx, _RCM_Diag_Rx_stub);
        connect_signal(vdt_proxy, REGEN_Diag_Sig_Rx, _REGEN_Diag_Sig_Rx_stub);
        connect_signal(vdt_proxy, ABS_Diag_Rx, _ABS_Diag_Rx_stub);
        connect_signal(vdt_proxy, AWD_Diag_Rx, _AWD_Diag_Rx_stub);
        connect_signal(vdt_proxy, CCM_Diag_Rx, _CCM_Diag_Rx_stub);
        connect_signal(vdt_proxy, ICA_Diag_Rx, _ICA_Diag_Rx_stub);
        connect_signal(vdt_proxy, AMP_Diag_Rx, _AMP_Diag_Rx_stub);
        connect_signal(vdt_proxy, EATC_Diag_Rx, _EATC_Diag_Rx_stub);
        connect_signal(vdt_proxy, RBCM_Diag_Rx, _RBCM_Diag_Rx_stub);
        connect_signal(vdt_proxy, BSM_RVM_Diag_Rx, _BSM_RVM_Diag_Rx_stub);
        connect_signal(vdt_proxy, PCM_DTC, _PCM_DTC_stub);
        connect_signal(vdt_proxy, TCM_DTC, _TCM_DTC_stub);
        connect_signal(vdt_proxy, ECB_Diag_Rx, _ECB_Diag_Rx_stub);
        connect_signal(vdt_proxy, PLK_Diag_Rx, _PLK_Diag_Rx_stub);
        connect_signal(vdt_proxy, HEV_Diag_Rx, _HEV_Diag_Rx_stub);
        connect_signal(vdt_proxy, ACN_Diag_Rx, _ACN_Diag_Rx_stub);
        connect_signal(vdt_proxy, Ignition_Status, _Ignition_Status_stub);
        connect_signal(vdt_proxy, Lateral_Acceleration, _Lateral_Acceleration_stub);
        connect_signal(vdt_proxy, CAN_Missing_Ind, _CAN_Missing_Ind_stub);
        connect_signal(vdt_proxy, EOLDriveChartDisplay, _EOLDriveChartDisplay_stub);
        connect_signal(vdt_proxy, EOLMyDoctorDisplay, _EOLMyDoctorDisplay_stub);
        connect_signal(vdt_proxy, EOLDriveChart_Log_Distance, _EOLDriveChart_Log_Distance_stub);
        connect_signal(vdt_proxy, EOLDriveChart_DataTrans, _EOLDriveChart_DataTrans_stub);
        connect_signal(vdt_proxy, IgnitionStatus_TSec, _IgnitionStatus_TSec_stub);
        connect_signal(vdt_proxy, LampActivationNotify, _LampActivationNotify_stub);
        connect_signal(vdt_proxy, FuelType, _FuelType_stub);
        connect_signal(vdt_proxy, OnOdrDataFullyReceived, _OnOdrDataFullyReceived_stub);
        connect_signal(vdt_proxy, Total_Distance, _Total_Distance_stub);
        connect_signal(vdt_proxy, GlobalRealTime, _GlobalRealTime_stub);
        connect_signal(vdt_proxy, Sds_TotSD_Point_D_Actl_2, _Sds_TotSD_Point_D_Actl_2_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t BLM_Startup_Initiated(const bool& vdt_blm_init)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << vdt_blm_init;
        call.member("BLM_Startup_Initiated");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void SISS_EngineState(const uint8_t& sISS_EngineState) = 0;
    virtual void SISSStatus(const bool& sISSStatus) = 0;
    virtual void DR_EVM_MSG(const uint8_t& dR_EVM_MSG) = 0;
    virtual void Veh_V_ActlEng(const uint16_t& veh_V_ActlEng) = 0;
    virtual void VehVActlEng_D_Qf(const uint8_t& vehVActlEng_D_Qf) = 0;
    virtual void OdoCount(const uint8_t& odoCount) = 0;
    virtual void FuelPulse(const uint8_t& fuelPulse) = 0;
    virtual void OdoCount_2(const uint8_t& odoCount_2) = 0;
    virtual void FuelPulse_2(const uint8_t& fuelPulse_2) = 0;
    virtual void EngAout_N_Actl(const uint16_t& engAout_N_Actl) = 0;
    virtual void ApedPos_Pc_ActlArb(const uint16_t& apedPos_Pc_ActlArb) = 0;
    virtual void ApedPosPcActl_D_Qf(const uint8_t& apedPosPcActl_D_Qf) = 0;
    virtual void SteWhlComp_An_Est(const uint16_t& steWhlComp_An_Est) = 0;
    virtual void VehLong_A_Actl(const uint16_t& vehLong_A_Actl) = 0;
    virtual void FSC_Diag_Rx(const uint64_t& fSC_Diag_Rx) = 0;
    virtual void HEC_Diag_Rx(const uint64_t& hEC_Diag_Rx) = 0;
    virtual void HEVHEC_Diag_Rx(const uint64_t& hEVHEC_Diag_Rx) = 0;
    virtual void FBCM_Diag_Rx(const uint64_t& fBCM_Diag_Rx) = 0;
    virtual void EPAS_Diag_Rx(const uint64_t& ePAS_Diag_Rx) = 0;
    virtual void SSU_Diag_Rx(const uint64_t& sSU_Diag_Rx) = 0;
    virtual void AFS_Diag_Rx(const uint64_t& aFS_Diag_Rx) = 0;
    virtual void RCM_Diag_Rx(const uint64_t& rCM_Diag_Rx) = 0;
    virtual void REGEN_Diag_Sig_Rx(const uint64_t& rEGEN_Diag_Sig_Rx) = 0;
    virtual void ABS_Diag_Rx(const uint64_t& aBS_Diag_Rx) = 0;
    virtual void AWD_Diag_Rx(const uint64_t& aWD_Diag_Rx) = 0;
    virtual void CCM_Diag_Rx(const uint64_t& cCM_Diag_Rx) = 0;
    virtual void ICA_Diag_Rx(const uint64_t& iCA_Diag_Rx) = 0;
    virtual void AMP_Diag_Rx(const uint64_t& aMP_Diag_Rx) = 0;
    virtual void EATC_Diag_Rx(const uint64_t& eATC_Diag_Rx) = 0;
    virtual void RBCM_Diag_Rx(const uint64_t& rBCM_Diag_Rx) = 0;
    virtual void BSM_RVM_Diag_Rx(const uint64_t& bSM_RVM_Diag_Rx) = 0;
    virtual void PCM_DTC(const uint64_t& pCM_DTC) = 0;
    virtual void TCM_DTC(const uint64_t& tCM_DTC) = 0;
    virtual void ECB_Diag_Rx(const uint64_t& eCB_Diag_Rx) = 0;
    virtual void PLK_Diag_Rx(const uint64_t& pLK_Diag_Rx) = 0;
    virtual void HEV_Diag_Rx(const uint64_t& hEV_Diag_Rx) = 0;
    virtual void ACN_Diag_Rx(const uint64_t& aCN_Diag_Rx) = 0;
    virtual void Ignition_Status(const uint8_t& ignition_Status) = 0;
    virtual void Lateral_Acceleration(const uint16_t& lateral_Acceleration) = 0;
    virtual void CAN_Missing_Ind(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& canMissFlag) = 0;
    virtual void EOLDriveChartDisplay(const uint8_t& eOLDriveChartDisplay) = 0;
    virtual void EOLMyDoctorDisplay(const uint8_t& eOLMyDoctorDisplay) = 0;
    virtual void EOLDriveChart_Log_Distance(const uint8_t& eOLDriveChart_Log_Distance) = 0;
    virtual void EOLDriveChart_DataTrans(const uint8_t& eOLDriveChart_DataTrans) = 0;
    virtual void IgnitionStatus_TSec(const uint8_t& tSec, const uint8_t& ignStat) = 0;
    virtual void LampActivationNotify(const uint8_t& lampType, const uint8_t& isLampActivated) = 0;
    virtual void FuelType(const uint8_t& fuelType) = 0;
    virtual void OnOdrDataFullyReceived() = 0;
    virtual void Total_Distance(const uint32_t& total_Distance) = 0;
    virtual void GlobalRealTime(const uint32_t& globalRealTime) = 0;
    virtual void Sds_TotSD_Point_D_Actl_2(const uint8_t& sds_TotSD_Point_D_Actl_2) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _SISS_EngineState_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t sISS_EngineState;
        ri >> sISS_EngineState;
        SISS_EngineState(sISS_EngineState);
    }
    void _SISSStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool sISSStatus;
        ri >> sISSStatus;
        SISSStatus(sISSStatus);
    }
    void _DR_EVM_MSG_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t dR_EVM_MSG;
        ri >> dR_EVM_MSG;
        DR_EVM_MSG(dR_EVM_MSG);
    }
    void _Veh_V_ActlEng_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t veh_V_ActlEng;
        ri >> veh_V_ActlEng;
        Veh_V_ActlEng(veh_V_ActlEng);
    }
    void _VehVActlEng_D_Qf_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t vehVActlEng_D_Qf;
        ri >> vehVActlEng_D_Qf;
        VehVActlEng_D_Qf(vehVActlEng_D_Qf);
    }
    void _OdoCount_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t odoCount;
        ri >> odoCount;
        OdoCount(odoCount);
    }
    void _FuelPulse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t fuelPulse;
        ri >> fuelPulse;
        FuelPulse(fuelPulse);
    }
    void _OdoCount_2_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t odoCount_2;
        ri >> odoCount_2;
        OdoCount_2(odoCount_2);
    }
    void _FuelPulse_2_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t fuelPulse_2;
        ri >> fuelPulse_2;
        FuelPulse_2(fuelPulse_2);
    }
    void _EngAout_N_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t engAout_N_Actl;
        ri >> engAout_N_Actl;
        EngAout_N_Actl(engAout_N_Actl);
    }
    void _ApedPos_Pc_ActlArb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t apedPos_Pc_ActlArb;
        ri >> apedPos_Pc_ActlArb;
        ApedPos_Pc_ActlArb(apedPos_Pc_ActlArb);
    }
    void _ApedPosPcActl_D_Qf_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t apedPosPcActl_D_Qf;
        ri >> apedPosPcActl_D_Qf;
        ApedPosPcActl_D_Qf(apedPosPcActl_D_Qf);
    }
    void _SteWhlComp_An_Est_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t steWhlComp_An_Est;
        ri >> steWhlComp_An_Est;
        SteWhlComp_An_Est(steWhlComp_An_Est);
    }
    void _VehLong_A_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t vehLong_A_Actl;
        ri >> vehLong_A_Actl;
        VehLong_A_Actl(vehLong_A_Actl);
    }
    void _FSC_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t fSC_Diag_Rx;
        ri >> fSC_Diag_Rx;
        FSC_Diag_Rx(fSC_Diag_Rx);
    }
    void _HEC_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t hEC_Diag_Rx;
        ri >> hEC_Diag_Rx;
        HEC_Diag_Rx(hEC_Diag_Rx);
    }
    void _HEVHEC_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t hEVHEC_Diag_Rx;
        ri >> hEVHEC_Diag_Rx;
        HEVHEC_Diag_Rx(hEVHEC_Diag_Rx);
    }
    void _FBCM_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t fBCM_Diag_Rx;
        ri >> fBCM_Diag_Rx;
        FBCM_Diag_Rx(fBCM_Diag_Rx);
    }
    void _EPAS_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t ePAS_Diag_Rx;
        ri >> ePAS_Diag_Rx;
        EPAS_Diag_Rx(ePAS_Diag_Rx);
    }
    void _SSU_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t sSU_Diag_Rx;
        ri >> sSU_Diag_Rx;
        SSU_Diag_Rx(sSU_Diag_Rx);
    }
    void _AFS_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t aFS_Diag_Rx;
        ri >> aFS_Diag_Rx;
        AFS_Diag_Rx(aFS_Diag_Rx);
    }
    void _RCM_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t rCM_Diag_Rx;
        ri >> rCM_Diag_Rx;
        RCM_Diag_Rx(rCM_Diag_Rx);
    }
    void _REGEN_Diag_Sig_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t rEGEN_Diag_Sig_Rx;
        ri >> rEGEN_Diag_Sig_Rx;
        REGEN_Diag_Sig_Rx(rEGEN_Diag_Sig_Rx);
    }
    void _ABS_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t aBS_Diag_Rx;
        ri >> aBS_Diag_Rx;
        ABS_Diag_Rx(aBS_Diag_Rx);
    }
    void _AWD_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t aWD_Diag_Rx;
        ri >> aWD_Diag_Rx;
        AWD_Diag_Rx(aWD_Diag_Rx);
    }
    void _CCM_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t cCM_Diag_Rx;
        ri >> cCM_Diag_Rx;
        CCM_Diag_Rx(cCM_Diag_Rx);
    }
    void _ICA_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t iCA_Diag_Rx;
        ri >> iCA_Diag_Rx;
        ICA_Diag_Rx(iCA_Diag_Rx);
    }
    void _AMP_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t aMP_Diag_Rx;
        ri >> aMP_Diag_Rx;
        AMP_Diag_Rx(aMP_Diag_Rx);
    }
    void _EATC_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t eATC_Diag_Rx;
        ri >> eATC_Diag_Rx;
        EATC_Diag_Rx(eATC_Diag_Rx);
    }
    void _RBCM_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t rBCM_Diag_Rx;
        ri >> rBCM_Diag_Rx;
        RBCM_Diag_Rx(rBCM_Diag_Rx);
    }
    void _BSM_RVM_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t bSM_RVM_Diag_Rx;
        ri >> bSM_RVM_Diag_Rx;
        BSM_RVM_Diag_Rx(bSM_RVM_Diag_Rx);
    }
    void _PCM_DTC_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t pCM_DTC;
        ri >> pCM_DTC;
        PCM_DTC(pCM_DTC);
    }
    void _TCM_DTC_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t tCM_DTC;
        ri >> tCM_DTC;
        TCM_DTC(tCM_DTC);
    }
    void _ECB_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t eCB_Diag_Rx;
        ri >> eCB_Diag_Rx;
        ECB_Diag_Rx(eCB_Diag_Rx);
    }
    void _PLK_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t pLK_Diag_Rx;
        ri >> pLK_Diag_Rx;
        PLK_Diag_Rx(pLK_Diag_Rx);
    }
    void _HEV_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t hEV_Diag_Rx;
        ri >> hEV_Diag_Rx;
        HEV_Diag_Rx(hEV_Diag_Rx);
    }
    void _ACN_Diag_Rx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t aCN_Diag_Rx;
        ri >> aCN_Diag_Rx;
        ACN_Diag_Rx(aCN_Diag_Rx);
    }
    void _Ignition_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t ignition_Status;
        ri >> ignition_Status;
        Ignition_Status(ignition_Status);
    }
    void _Lateral_Acceleration_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t lateral_Acceleration;
        ri >> lateral_Acceleration;
        Lateral_Acceleration(lateral_Acceleration);
    }
    void _CAN_Missing_Ind_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t > canMissFlag;
        ri >> canMissFlag;
        CAN_Missing_Ind(canMissFlag);
    }
    void _EOLDriveChartDisplay_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t eOLDriveChartDisplay;
        ri >> eOLDriveChartDisplay;
        EOLDriveChartDisplay(eOLDriveChartDisplay);
    }
    void _EOLMyDoctorDisplay_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t eOLMyDoctorDisplay;
        ri >> eOLMyDoctorDisplay;
        EOLMyDoctorDisplay(eOLMyDoctorDisplay);
    }
    void _EOLDriveChart_Log_Distance_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t eOLDriveChart_Log_Distance;
        ri >> eOLDriveChart_Log_Distance;
        EOLDriveChart_Log_Distance(eOLDriveChart_Log_Distance);
    }
    void _EOLDriveChart_DataTrans_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t eOLDriveChart_DataTrans;
        ri >> eOLDriveChart_DataTrans;
        EOLDriveChart_DataTrans(eOLDriveChart_DataTrans);
    }
    void _IgnitionStatus_TSec_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t tSec;
        ri >> tSec;
        uint8_t ignStat;
        ri >> ignStat;
        IgnitionStatus_TSec(tSec, ignStat);
    }
    void _LampActivationNotify_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t lampType;
        ri >> lampType;
        uint8_t isLampActivated;
        ri >> isLampActivated;
        LampActivationNotify(lampType, isLampActivated);
    }
    void _FuelType_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t fuelType;
        ri >> fuelType;
        FuelType(fuelType);
    }
    void _OnOdrDataFullyReceived_stub(const ::DBus::SignalMessage &sig)
    {
        OnOdrDataFullyReceived();
    }
    void _Total_Distance_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t total_Distance;
        ri >> total_Distance;
        Total_Distance(total_Distance);
    }
    void _GlobalRealTime_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t globalRealTime;
        ri >> globalRealTime;
        GlobalRealTime(globalRealTime);
    }
    void _Sds_TotSD_Point_D_Actl_2_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t sds_TotSD_Point_D_Actl_2;
        ri >> sds_TotSD_Point_D_Actl_2;
        Sds_TotSD_Point_D_Actl_2(sds_TotSD_Point_D_Actl_2);
    }
};

} } } 
namespace com {
namespace jci {
namespace vbs {

class eem_proxy
: public ::DBus::InterfaceProxy
{
public:

    eem_proxy()
    : ::DBus::InterfaceProxy("com.jci.vbs.eem")
    {
        connect_signal(eem_proxy, CmltAvlFuelE_D_HEC, _CmltAvlFuelE_D_HEC_stub);
        connect_signal(eem_proxy, AvgFuelEco_Rst_HEC, _AvgFuelEco_Rst_HEC_stub);
        connect_signal(eem_proxy, PTiStpRdy_B_Actl, _PTiStpRdy_B_Actl_stub);
        connect_signal(eem_proxy, iStpDenyDPF_B_Actl, _iStpDenyDPF_B_Actl_stub);
        connect_signal(eem_proxy, iStpDenyBatt_B_Actl, _iStpDenyBatt_B_Actl_stub);
        connect_signal(eem_proxy, iStpDenyAC_B_Actl, _iStpDenyAC_B_Actl_stub);
        connect_signal(eem_proxy, SISS_EngineState, _SISS_EngineState_stub);
        connect_signal(eem_proxy, SISS_WarningLamp_G, _SISS_WarningLamp_G_stub);
        connect_signal(eem_proxy, SISS_WarningLamp_R, _SISS_WarningLamp_R_stub);
        connect_signal(eem_proxy, iStpDenyPwStr_B_Actl, _iStpDenyPwStr_B_Actl_stub);
        connect_signal(eem_proxy, iStpDenyBrk_B_Actl, _iStpDenyBrk_B_Actl_stub);
        connect_signal(eem_proxy, iStpDenyNrange_B_Actl, _iStpDenyNrange_B_Actl_stub);
        connect_signal(eem_proxy, iStpKeySta_B_Actl, _iStpKeySta_B_Actl_stub);
        connect_signal(eem_proxy, CpctCrg_Lvl_D_Actl, _CpctCrg_Lvl_D_Actl_stub);
        connect_signal(eem_proxy, RgnPwr_Lvl_D_Actl, _RgnPwr_Lvl_D_Actl_stub);
        connect_signal(eem_proxy, CapToElc_B_Actl, _CapToElc_B_Actl_stub);
        connect_signal(eem_proxy, SISSStatus, _SISSStatus_stub);
        connect_signal(eem_proxy, DistncUnitCnfg_D_Init, _DistncUnitCnfg_D_Init_stub);
        connect_signal(eem_proxy, DistncUnitCnfg_Inh_B_Actl, _DistncUnitCnfg_Inh_B_Actl_stub);
        connect_signal(eem_proxy, iStpReady_Rq, _iStpReady_Rq_stub);
        connect_signal(eem_proxy, FuelType_Delivery, _FuelType_Delivery_stub);
        connect_signal(eem_proxy, REGEN_Types, _REGEN_Types_stub);
        connect_signal(eem_proxy, EndDis_Eco_Req, _EndDis_Eco_Req_stub);
        connect_signal(eem_proxy, CstmzRsp_Trip_Rst_Mde, _CstmzRsp_Trip_Rst_Mde_stub);
        connect_signal(eem_proxy, CstmzStat_Trip_Rst_Mde, _CstmzStat_Trip_Rst_Mde_stub);
        connect_signal(eem_proxy, Ignition_Status, _Ignition_Status_stub);
        connect_signal(eem_proxy, StDis_Eco_Req, _StDis_Eco_Req_stub);
        connect_signal(eem_proxy, CMU_Types, _CMU_Types_stub);
        connect_signal(eem_proxy, CAN_Missing, _CAN_Missing_stub);
        connect_signal(eem_proxy, Reset_at_ACC_Off, _Reset_at_ACC_Off_stub);
        connect_signal(eem_proxy, EngAout_N_Actl, _EngAout_N_Actl_stub);
        connect_signal(eem_proxy, HV_CntRecord2, _HV_CntRecord2_stub);
        connect_signal(eem_proxy, DR_SOC_MON, _DR_SOC_MON_stub);
        connect_signal(eem_proxy, HVSYS2_copy, _HVSYS2_copy_stub);
        connect_signal(eem_proxy, HvEngPcm_Tq_Actl, _HvEngPcm_Tq_Actl_stub);
        connect_signal(eem_proxy, HvTmPcm_Tq_Actl, _HvTmPcm_Tq_Actl_stub);
        connect_signal(eem_proxy, HvRgBrk_Tq_Actl, _HvRgBrk_Tq_Actl_stub);
        connect_signal(eem_proxy, HvMtrGen2Aout_N_Actl, _HvMtrGen2Aout_N_Actl_stub);
        connect_signal(eem_proxy, RvrseLmpReq_D_Actl, _RvrseLmpReq_D_Actl_stub);
        connect_signal(eem_proxy, Sent_Missed_Signal_Flag, _Sent_Missed_Signal_Flag_stub);
        connect_signal(eem_proxy, VehSpeedFlag, _VehSpeedFlag_stub);
        connect_signal(eem_proxy, OneMinuteTimerExpiry, _OneMinuteTimerExpiry_stub);
        connect_signal(eem_proxy, AvgFuelUnitCnfg_D_Init, _AvgFuelUnitCnfg_D_Init_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t AvgFuelEco_Rst_CMU(const bool& fuelEco_Rst_CMU)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fuelEco_Rst_CMU;
        call.member("AvgFuelEco_Rst_CMU");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t CstmzRq_Trip_Rst_Mde(const uint8_t& rq_trip_rst)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << rq_trip_rst;
        call.member("CstmzRq_Trip_Rst_Mde");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t BLM_Startup_Initiated(const bool& eem_blm_init)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << eem_blm_init;
        call.member("BLM_Startup_Initiated");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void CmltAvlFuelE_D_HEC(const uint16_t& cmltAvlFuelE) = 0;
    virtual void AvgFuelEco_Rst_HEC(const bool& fuelEco_Rst) = 0;
    virtual void PTiStpRdy_B_Actl(const bool& pTiStpRdy) = 0;
    virtual void iStpDenyDPF_B_Actl(const bool& denyDPF) = 0;
    virtual void iStpDenyBatt_B_Actl(const bool& iStpDenyBatt) = 0;
    virtual void iStpDenyAC_B_Actl(const bool& iStpDenyAC) = 0;
    virtual void SISS_EngineState(const uint8_t& sISS_EngSt) = 0;
    virtual void SISS_WarningLamp_G(const uint8_t& sISS_WarnLmpG) = 0;
    virtual void SISS_WarningLamp_R(const uint8_t& sISS_WarnLmpR) = 0;
    virtual void iStpDenyPwStr_B_Actl(const bool& denyPwStr) = 0;
    virtual void iStpDenyBrk_B_Actl(const bool& denyBrk) = 0;
    virtual void iStpDenyNrange_B_Actl(const bool& denyNrange) = 0;
    virtual void iStpKeySta_B_Actl(const bool& keySta_B) = 0;
    virtual void CpctCrg_Lvl_D_Actl(const uint8_t& cpctCrg_Lvl) = 0;
    virtual void RgnPwr_Lvl_D_Actl(const uint8_t& rgnPwr_Lvl) = 0;
    virtual void CapToElc_B_Actl(const bool& cap_Elc) = 0;
    virtual void SISSStatus(const bool& s_Status) = 0;
    virtual void DistncUnitCnfg_D_Init(const uint8_t& distnc_Init) = 0;
    virtual void DistncUnitCnfg_Inh_B_Actl(const bool& distnc_Actl) = 0;
    virtual void iStpReady_Rq(const bool& iStpRdy_Rq) = 0;
    virtual void FuelType_Delivery(const uint8_t& fuel_Type) = 0;
    virtual void REGEN_Types(const uint8_t& gccConfigMgmtValue) = 0;
    virtual void EndDis_Eco_Req(const bool& gccConfigMgmtValue) = 0;
    virtual void CstmzRsp_Trip_Rst_Mde(const uint8_t& rsp_trip_rst) = 0;
    virtual void CstmzStat_Trip_Rst_Mde(const uint8_t& stat_trip_rst) = 0;
    virtual void Ignition_Status(const uint16_t& ign_sts) = 0;
    virtual void StDis_Eco_Req(const uint32_t& stDis_Eco) = 0;
    virtual void CMU_Types(const uint8_t& cmu_types) = 0;
    virtual void CAN_Missing(const uint16_t& can_missing_ind) = 0;
    virtual void Reset_at_ACC_Off(const uint8_t& reset_cmu_off) = 0;
    virtual void EngAout_N_Actl(const uint16_t& engAout_N) = 0;
    virtual void HV_CntRecord2(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t >& hev_HV_CntRcrd2) = 0;
    virtual void DR_SOC_MON(const uint8_t& dr_soc) = 0;
    virtual void HVSYS2_copy(const uint8_t& hvsys2_copy_resp) = 0;
    virtual void HvEngPcm_Tq_Actl(const int16_t& hvEngPcm_Tq) = 0;
    virtual void HvTmPcm_Tq_Actl(const int16_t& hvTmPcm_Tq) = 0;
    virtual void HvRgBrk_Tq_Actl(const int16_t& hvRgBrk_Tq) = 0;
    virtual void HvMtrGen2Aout_N_Actl(const int16_t& hvMtrGen2Aout) = 0;
    virtual void RvrseLmpReq_D_Actl(const uint8_t& rvrseLmpReq) = 0;
    virtual void Sent_Missed_Signal_Flag() = 0;
    virtual void VehSpeedFlag(const uint8_t& vehspdflag) = 0;
    virtual void OneMinuteTimerExpiry(const bool& oneMinTmrExpiry) = 0;
    virtual void AvgFuelUnitCnfg_D_Init(const uint8_t& avgfuelunit) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _CmltAvlFuelE_D_HEC_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t cmltAvlFuelE;
        ri >> cmltAvlFuelE;
        CmltAvlFuelE_D_HEC(cmltAvlFuelE);
    }
    void _AvgFuelEco_Rst_HEC_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool fuelEco_Rst;
        ri >> fuelEco_Rst;
        AvgFuelEco_Rst_HEC(fuelEco_Rst);
    }
    void _PTiStpRdy_B_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool pTiStpRdy;
        ri >> pTiStpRdy;
        PTiStpRdy_B_Actl(pTiStpRdy);
    }
    void _iStpDenyDPF_B_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool denyDPF;
        ri >> denyDPF;
        iStpDenyDPF_B_Actl(denyDPF);
    }
    void _iStpDenyBatt_B_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool iStpDenyBatt;
        ri >> iStpDenyBatt;
        iStpDenyBatt_B_Actl(iStpDenyBatt);
    }
    void _iStpDenyAC_B_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool iStpDenyAC;
        ri >> iStpDenyAC;
        iStpDenyAC_B_Actl(iStpDenyAC);
    }
    void _SISS_EngineState_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t sISS_EngSt;
        ri >> sISS_EngSt;
        SISS_EngineState(sISS_EngSt);
    }
    void _SISS_WarningLamp_G_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t sISS_WarnLmpG;
        ri >> sISS_WarnLmpG;
        SISS_WarningLamp_G(sISS_WarnLmpG);
    }
    void _SISS_WarningLamp_R_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t sISS_WarnLmpR;
        ri >> sISS_WarnLmpR;
        SISS_WarningLamp_R(sISS_WarnLmpR);
    }
    void _iStpDenyPwStr_B_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool denyPwStr;
        ri >> denyPwStr;
        iStpDenyPwStr_B_Actl(denyPwStr);
    }
    void _iStpDenyBrk_B_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool denyBrk;
        ri >> denyBrk;
        iStpDenyBrk_B_Actl(denyBrk);
    }
    void _iStpDenyNrange_B_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool denyNrange;
        ri >> denyNrange;
        iStpDenyNrange_B_Actl(denyNrange);
    }
    void _iStpKeySta_B_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool keySta_B;
        ri >> keySta_B;
        iStpKeySta_B_Actl(keySta_B);
    }
    void _CpctCrg_Lvl_D_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t cpctCrg_Lvl;
        ri >> cpctCrg_Lvl;
        CpctCrg_Lvl_D_Actl(cpctCrg_Lvl);
    }
    void _RgnPwr_Lvl_D_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t rgnPwr_Lvl;
        ri >> rgnPwr_Lvl;
        RgnPwr_Lvl_D_Actl(rgnPwr_Lvl);
    }
    void _CapToElc_B_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool cap_Elc;
        ri >> cap_Elc;
        CapToElc_B_Actl(cap_Elc);
    }
    void _SISSStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool s_Status;
        ri >> s_Status;
        SISSStatus(s_Status);
    }
    void _DistncUnitCnfg_D_Init_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t distnc_Init;
        ri >> distnc_Init;
        DistncUnitCnfg_D_Init(distnc_Init);
    }
    void _DistncUnitCnfg_Inh_B_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool distnc_Actl;
        ri >> distnc_Actl;
        DistncUnitCnfg_Inh_B_Actl(distnc_Actl);
    }
    void _iStpReady_Rq_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool iStpRdy_Rq;
        ri >> iStpRdy_Rq;
        iStpReady_Rq(iStpRdy_Rq);
    }
    void _FuelType_Delivery_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t fuel_Type;
        ri >> fuel_Type;
        FuelType_Delivery(fuel_Type);
    }
    void _REGEN_Types_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t gccConfigMgmtValue;
        ri >> gccConfigMgmtValue;
        REGEN_Types(gccConfigMgmtValue);
    }
    void _EndDis_Eco_Req_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool gccConfigMgmtValue;
        ri >> gccConfigMgmtValue;
        EndDis_Eco_Req(gccConfigMgmtValue);
    }
    void _CstmzRsp_Trip_Rst_Mde_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t rsp_trip_rst;
        ri >> rsp_trip_rst;
        CstmzRsp_Trip_Rst_Mde(rsp_trip_rst);
    }
    void _CstmzStat_Trip_Rst_Mde_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t stat_trip_rst;
        ri >> stat_trip_rst;
        CstmzStat_Trip_Rst_Mde(stat_trip_rst);
    }
    void _Ignition_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t ign_sts;
        ri >> ign_sts;
        Ignition_Status(ign_sts);
    }
    void _StDis_Eco_Req_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t stDis_Eco;
        ri >> stDis_Eco;
        StDis_Eco_Req(stDis_Eco);
    }
    void _CMU_Types_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t cmu_types;
        ri >> cmu_types;
        CMU_Types(cmu_types);
    }
    void _CAN_Missing_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t can_missing_ind;
        ri >> can_missing_ind;
        CAN_Missing(can_missing_ind);
    }
    void _Reset_at_ACC_Off_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t reset_cmu_off;
        ri >> reset_cmu_off;
        Reset_at_ACC_Off(reset_cmu_off);
    }
    void _EngAout_N_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t engAout_N;
        ri >> engAout_N;
        EngAout_N_Actl(engAout_N);
    }
    void _HV_CntRecord2_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t > hev_HV_CntRcrd2;
        ri >> hev_HV_CntRcrd2;
        HV_CntRecord2(hev_HV_CntRcrd2);
    }
    void _DR_SOC_MON_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t dr_soc;
        ri >> dr_soc;
        DR_SOC_MON(dr_soc);
    }
    void _HVSYS2_copy_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t hvsys2_copy_resp;
        ri >> hvsys2_copy_resp;
        HVSYS2_copy(hvsys2_copy_resp);
    }
    void _HvEngPcm_Tq_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t hvEngPcm_Tq;
        ri >> hvEngPcm_Tq;
        HvEngPcm_Tq_Actl(hvEngPcm_Tq);
    }
    void _HvTmPcm_Tq_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t hvTmPcm_Tq;
        ri >> hvTmPcm_Tq;
        HvTmPcm_Tq_Actl(hvTmPcm_Tq);
    }
    void _HvRgBrk_Tq_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t hvRgBrk_Tq;
        ri >> hvRgBrk_Tq;
        HvRgBrk_Tq_Actl(hvRgBrk_Tq);
    }
    void _HvMtrGen2Aout_N_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t hvMtrGen2Aout;
        ri >> hvMtrGen2Aout;
        HvMtrGen2Aout_N_Actl(hvMtrGen2Aout);
    }
    void _RvrseLmpReq_D_Actl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t rvrseLmpReq;
        ri >> rvrseLmpReq;
        RvrseLmpReq_D_Actl(rvrseLmpReq);
    }
    void _Sent_Missed_Signal_Flag_stub(const ::DBus::SignalMessage &sig)
    {
        Sent_Missed_Signal_Flag();
    }
    void _VehSpeedFlag_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t vehspdflag;
        ri >> vehspdflag;
        VehSpeedFlag(vehspdflag);
    }
    void _OneMinuteTimerExpiry_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool oneMinTmrExpiry;
        ri >> oneMinTmrExpiry;
        OneMinuteTimerExpiry(oneMinTmrExpiry);
    }
    void _AvgFuelUnitCnfg_D_Init_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t avgfuelunit;
        ri >> avgfuelunit;
        AvgFuelUnitCnfg_D_Init(avgfuelunit);
    }
};

} } } 
namespace com {
namespace jci {

class bthf_proxy
: public ::DBus::InterfaceProxy
{
public:

    bthf_proxy()
    : ::DBus::InterfaceProxy("com.jci.bthf")
    {
        connect_signal(bthf_proxy, CallStatus, _CallStatus_stub);
        connect_signal(bthf_proxy, BatteryIndicator, _BatteryIndicator_stub);
        connect_signal(bthf_proxy, SignalStrength, _SignalStrength_stub);
        connect_signal(bthf_proxy, RoamIndicator, _RoamIndicator_stub);
        connect_signal(bthf_proxy, NewServiceIndicator, _NewServiceIndicator_stub);
        connect_signal(bthf_proxy, PhoneChargeIndicator, _PhoneChargeIndicator_stub);
        connect_signal(bthf_proxy, SmsPresentIndicator, _SmsPresentIndicator_stub);
        connect_signal(bthf_proxy, VoiceMailIndicator, _VoiceMailIndicator_stub);
        connect_signal(bthf_proxy, LowBatteryIndicator, _LowBatteryIndicator_stub);
        connect_signal(bthf_proxy, BthfReadyStatus, _BthfReadyStatus_stub);
        connect_signal(bthf_proxy, BthfBusyReason, _BthfBusyReason_stub);
        connect_signal(bthf_proxy, MicStatus, _MicStatus_stub);
        connect_signal(bthf_proxy, BargeinStatus, _BargeinStatus_stub);
        connect_signal(bthf_proxy, BthfSettingsResponse, _BthfSettingsResponse_stub);
        connect_signal(bthf_proxy, FailureReasonCodes, _FailureReasonCodes_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t Dial(const ::DBus::Struct< std::vector< uint8_t > >& dialNumber, const bool& dialPrompt)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dialNumber;
        wi << dialPrompt;
        call.member("Dial");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t EmergencyDial(const ::DBus::Struct< std::vector< uint8_t > >& dialNumber)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dialNumber;
        call.member("EmergencyDial");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Redial()
    {
        ::DBus::CallMessage call;
        call.member("Redial");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t HangupCall()
    {
        ::DBus::CallMessage call;
        call.member("HangupCall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RejectCall()
    {
        ::DBus::CallMessage call;
        call.member("RejectCall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AcceptCall()
    {
        ::DBus::CallMessage call;
        call.member("AcceptCall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t MuteCall()
    {
        ::DBus::CallMessage call;
        call.member("MuteCall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t UnmuteCall()
    {
        ::DBus::CallMessage call;
        call.member("UnmuteCall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SwapCall()
    {
        ::DBus::CallMessage call;
        call.member("SwapCall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t HeldCall()
    {
        ::DBus::CallMessage call;
        call.member("HeldCall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t UnHeldCall()
    {
        ::DBus::CallMessage call;
        call.member("UnHeldCall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t JoinCall()
    {
        ::DBus::CallMessage call;
        call.member("JoinCall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TransferCall(const int32_t& transferType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << transferType;
        call.member("TransferCall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SendDtmf(const ::DBus::Struct< std::vector< uint8_t > >& dtmfDigits)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dtmfDigits;
        call.member("SendDtmf");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t StartPhoneVr()
    {
        ::DBus::CallMessage call;
        call.member("StartPhoneVr");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t StopPhoneVr()
    {
        ::DBus::CallMessage call;
        call.member("StopPhoneVr");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t StartBargein()
    {
        ::DBus::CallMessage call;
        call.member("StartBargein");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t StopBargein()
    {
        ::DBus::CallMessage call;
        call.member("StopBargein");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t CallSettings(const uint32_t& isIncallAutoXferEnabled, const uint32_t& isOutCallAutoXferEnabled, const uint32_t& isActiveCallAutoXferEnabled)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << isIncallAutoXferEnabled;
        wi << isOutCallAutoXferEnabled;
        wi << isActiveCallAutoXferEnabled;
        call.member("CallSettings");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RingToneSettings(const uint32_t& ringToneTypeSupported)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ringToneTypeSupported;
        call.member("RingToneSettings");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AutoAnswerSettings(const uint32_t& autoAnswerValue)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << autoAnswerValue;
        call.member("AutoAnswerSettings");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RampupRingToneSettings(const uint32_t& isRampUpRingToneSupported)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << isRampUpRingToneSupported;
        call.member("RampupRingToneSettings");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DoNotDisturbSettings(const uint32_t& isDoNotDisturbEnabled)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << isDoNotDisturbEnabled;
        call.member("DoNotDisturbSettings");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t QueryCallStatus()
    {
        ::DBus::CallMessage call;
        call.member("QueryCallStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t EmergencyCallStart()
    {
        ::DBus::CallMessage call;
        call.member("EmergencyCallStart");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t EmergencyCallStop()
    {
        ::DBus::CallMessage call;
        call.member("EmergencyCallStop");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetBthfSettingData()
    {
        ::DBus::CallMessage call;
        call.member("GetBthfSettingData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ResetBthfCommunicationSettings()
    {
        ::DBus::CallMessage call;
        call.member("ResetBthfCommunicationSettings");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void CallStatus(const uint32_t& bthfstate, const uint32_t& call1status, const uint32_t& call2status, const ::DBus::Struct< std::vector< uint8_t > >& call1Number, const ::DBus::Struct< std::vector< uint8_t > >& call2Number) = 0;
    virtual void BatteryIndicator(const uint32_t& minValue, const uint32_t& maxValue, const uint32_t& currentValue) = 0;
    virtual void SignalStrength(const uint32_t& minValue, const uint32_t& maxValue, const uint32_t& currentValue) = 0;
    virtual void RoamIndicator(const uint32_t& value) = 0;
    virtual void NewServiceIndicator(const bool& value) = 0;
    virtual void PhoneChargeIndicator(const uint32_t& value) = 0;
    virtual void SmsPresentIndicator(const bool& value) = 0;
    virtual void VoiceMailIndicator(const bool& value) = 0;
    virtual void LowBatteryIndicator(const bool& value) = 0;
    virtual void BthfReadyStatus(const uint32_t& hftReady, const uint32_t& reasonCode) = 0;
    virtual void BthfBusyReason(const uint32_t& busyReason) = 0;
    virtual void MicStatus(const bool& isMicMuted) = 0;
    virtual void BargeinStatus(const bool& isBargeinActive) = 0;
    virtual void BthfSettingsResponse(const ::DBus::Struct< std::vector< uint8_t > >& callsettings) = 0;
    virtual void FailureReasonCodes(const uint32_t& errorType) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _CallStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t bthfstate;
        ri >> bthfstate;
        uint32_t call1status;
        ri >> call1status;
        uint32_t call2status;
        ri >> call2status;
        ::DBus::Struct< std::vector< uint8_t > > call1Number;
        ri >> call1Number;
        ::DBus::Struct< std::vector< uint8_t > > call2Number;
        ri >> call2Number;
        CallStatus(bthfstate, call1status, call2status, call1Number, call2Number);
    }
    void _BatteryIndicator_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t minValue;
        ri >> minValue;
        uint32_t maxValue;
        ri >> maxValue;
        uint32_t currentValue;
        ri >> currentValue;
        BatteryIndicator(minValue, maxValue, currentValue);
    }
    void _SignalStrength_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t minValue;
        ri >> minValue;
        uint32_t maxValue;
        ri >> maxValue;
        uint32_t currentValue;
        ri >> currentValue;
        SignalStrength(minValue, maxValue, currentValue);
    }
    void _RoamIndicator_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t value;
        ri >> value;
        RoamIndicator(value);
    }
    void _NewServiceIndicator_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool value;
        ri >> value;
        NewServiceIndicator(value);
    }
    void _PhoneChargeIndicator_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t value;
        ri >> value;
        PhoneChargeIndicator(value);
    }
    void _SmsPresentIndicator_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool value;
        ri >> value;
        SmsPresentIndicator(value);
    }
    void _VoiceMailIndicator_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool value;
        ri >> value;
        VoiceMailIndicator(value);
    }
    void _LowBatteryIndicator_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool value;
        ri >> value;
        LowBatteryIndicator(value);
    }
    void _BthfReadyStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t hftReady;
        ri >> hftReady;
        uint32_t reasonCode;
        ri >> reasonCode;
        BthfReadyStatus(hftReady, reasonCode);
    }
    void _BthfBusyReason_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t busyReason;
        ri >> busyReason;
        BthfBusyReason(busyReason);
    }
    void _MicStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool isMicMuted;
        ri >> isMicMuted;
        MicStatus(isMicMuted);
    }
    void _BargeinStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool isBargeinActive;
        ri >> isBargeinActive;
        BargeinStatus(isBargeinActive);
    }
    void _BthfSettingsResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > callsettings;
        ri >> callsettings;
        BthfSettingsResponse(callsettings);
    }
    void _FailureReasonCodes_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t errorType;
        ri >> errorType;
        FailureReasonCodes(errorType);
    }
};

} } 
namespace com {
namespace jci {

class bca_proxy
: public ::DBus::InterfaceProxy
{
public:

    bca_proxy()
    : ::DBus::InterfaceProxy("com.jci.bca")
    {
        connect_signal(bca_proxy, DontShowOnConnectionSettingStatusResp, _DontShowOnConnectionSettingStatusResp_stub);
        connect_signal(bca_proxy, ConnectionStatusResp, _ConnectionStatusResp_stub);
        connect_signal(bca_proxy, HftReadyStatus, _HftReadyStatus_stub);
        connect_signal(bca_proxy, ReadyStatus, _ReadyStatus_stub);
        connect_signal(bca_proxy, AddStatusResp, _AddStatusResp_stub);
        connect_signal(bca_proxy, DeviceUnbarringStatusResp, _DeviceUnbarringStatusResp_stub);
        connect_signal(bca_proxy, DeviceBluetoothSettingResp, _DeviceBluetoothSettingResp_stub);
        connect_signal(bca_proxy, AvailablePairedListResp, _AvailablePairedListResp_stub);
        connect_signal(bca_proxy, SupportedProfilesResp, _SupportedProfilesResp_stub);
        connect_signal(bca_proxy, FirstHfpSupportedInfo, _FirstHfpSupportedInfo_stub);
        connect_signal(bca_proxy, CarPlayConnectionStatus, _CarPlayConnectionStatus_stub);
        connect_signal(bca_proxy, AAutoEnableBt, _AAutoEnableBt_stub);
        connect_signal(bca_proxy, AAutoNoEntryAvailable, _AAutoNoEntryAvailable_stub);
        connect_signal(bca_proxy, ReqStartAndroidAutoPairing, _ReqStartAndroidAutoPairing_stub);
        connect_signal(bca_proxy, ReqStopAndroidAutoPairing, _ReqStopAndroidAutoPairing_stub);
        connect_signal(bca_proxy, ReqDeleteDevice, _ReqDeleteDevice_stub);
        connect_signal(bca_proxy, AAPairingSeqResult, _AAPairingSeqResult_stub);
        connect_signal(bca_proxy, AndroidAutoPairingTimeout, _AndroidAutoPairingTimeout_stub);
        connect_signal(bca_proxy, RequestStartAutoDownload, _RequestStartAutoDownload_stub);
        connect_signal(bca_proxy, DisableBluetoothRsp, _DisableBluetoothRsp_stub);
        connect_signal(bca_proxy, ConnectingCarPlayError, _ConnectingCarPlayError_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t ConnectRequest(const uint32_t& serviceId, const uint32_t& btDeviceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << serviceId;
        wi << btDeviceId;
        call.member("ConnectRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ConnectRequestHfpAndAvp(const uint32_t& btDeviceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << btDeviceId;
        call.member("ConnectRequestHfpAndAvp");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DisconnectRequest(const uint32_t& serviceId, const uint32_t& btDeviceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << serviceId;
        wi << btDeviceId;
        call.member("DisconnectRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DisconnectRequestHfpAndAvp(const uint32_t& btHfpDeviceId, const uint32_t& btAvpDeviceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << btHfpDeviceId;
        wi << btAvpDeviceId;
        call.member("DisconnectRequestHfpAndAvp");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t CancelConnect(const bool& cancelConnect)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << cancelConnect;
        call.member("CancelConnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetConnectStatus(const uint32_t& serviceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << serviceId;
        call.member("GetConnectStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, ::DBus::Struct< std::vector< uint8_t > > > QueryConnectStatus(const uint32_t& serviceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << serviceId;
        call.member("QueryConnectStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, ::DBus::Struct< std::vector< uint8_t > > > argout;
        ri >> argout;
        return argout;
    }

    int32_t UnbarDevice(const uint32_t& btDeviceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << btDeviceId;
        call.member("UnbarDevice");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t BluetoothOn(const bool& isInfoToBeUpdatedToFlash)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << isInfoToBeUpdatedToFlash;
        call.member("BluetoothOn");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t BluetoothOff(const bool& isInfoToBeUpdatedToFlash)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << isInfoToBeUpdatedToFlash;
        call.member("BluetoothOff");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t StartAdd(const uint32_t& addServiceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << addServiceId;
        call.member("StartAdd");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ConnectAll(const uint32_t& btDeviceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << btDeviceId;
        call.member("ConnectAll");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DisconnectAll()
    {
        ::DBus::CallMessage call;
        call.member("DisconnectAll");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetServiceId(const uint32_t& serviceType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << serviceType;
        call.member("GetServiceId");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ReadBluetoothSetting()
    {
        ::DBus::CallMessage call;
        call.member("ReadBluetoothSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AvailablePairedDeviceList()
    {
        ::DBus::CallMessage call;
        call.member("AvailablePairedDeviceList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetFeatureStatus(int32_t& isbcaReady, int32_t& reasonCode)
    {
        ::DBus::CallMessage call;
        call.member("GetFeatureStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> isbcaReady;
        ri >> reasonCode;
    }

    int32_t SupportedProfiles(const uint32_t& btDeviceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << btDeviceId;
        call.member("SupportedProfiles");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetDontShowOnConnectionSetting(const uint32_t& btDeviceId, const bool& setting)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << btDeviceId;
        wi << setting;
        call.member("SetDontShowOnConnectionSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetDontShowOnConnectionSetting(const uint32_t& btDeviceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << btDeviceId;
        call.member("GetDontShowOnConnectionSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AAutoEnableBtResponse(const uint32_t& select)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << select;
        call.member("AAutoEnableBtResponse");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AAutoNoEntryAvailableResponse(const uint32_t& select)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << select;
        call.member("AAutoNoEntryAvailableResponse");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PairingStatus(const uint32_t& status, const uint32_t& error)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << status;
        wi << error;
        call.member("PairingStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DeviceDeleteStatus(const uint32_t& deleteStatus)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << deleteStatus;
        call.member("DeviceDeleteStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t CallStatus(const uint32_t& bthfstate, const uint32_t& call1status, const uint32_t& call2status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << bthfstate;
        wi << call1status;
        wi << call2status;
        call.member("CallStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetCommSettingsResetStatus(const uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << status;
        call.member("SetCommSettingsResetStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetMP911EmergencyCallStatus(const uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << status;
        call.member("SetMP911EmergencyCallStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void DontShowOnConnectionSettingStatusResp(const uint32_t& btDeviceId, const bool& setting) = 0;
    virtual void ConnectionStatusResp(const uint32_t& serviceId, const uint32_t& connStatus, const uint32_t& btDeviceId, const uint32_t& status, const ::DBus::Struct< std::vector< uint8_t > >& terminalPath) = 0;
    virtual void HftReadyStatus(const uint32_t& hftReady, const uint32_t& reasonCode, const uint32_t& appId) = 0;
    virtual void ReadyStatus(const uint32_t& isReady, const uint32_t& reasonCode) = 0;
    virtual void AddStatusResp(const uint32_t& addServiceId, const uint32_t& status) = 0;
    virtual void DeviceUnbarringStatusResp(const uint32_t& btDeviceId, const uint32_t& status) = 0;
    virtual void DeviceBluetoothSettingResp(const bool& btSetting) = 0;
    virtual void AvailablePairedListResp(const uint32_t& totalPairedDevices, const ::DBus::Struct< std::vector< uint8_t > >& pairedDeviceList) = 0;
    virtual void SupportedProfilesResp(const ::DBus::Struct< std::vector< uint8_t > >& supportedProfiles) = 0;
    virtual void FirstHfpSupportedInfo(const bool& isHfpSupportedDevicePresent) = 0;
    virtual void CarPlayConnectionStatus(const uint32_t& connStatus, const uint32_t& carPlayDeviceId) = 0;
    virtual void AAutoEnableBt() = 0;
    virtual void AAutoNoEntryAvailable(const uint32_t& deleteDeviceId) = 0;
    virtual void ReqStartAndroidAutoPairing() = 0;
    virtual void ReqStopAndroidAutoPairing() = 0;
    virtual void ReqDeleteDevice(const uint32_t& deleteDeviceId) = 0;
    virtual void AAPairingSeqResult(const bool& result) = 0;
    virtual void AndroidAutoPairingTimeout() = 0;
    virtual void RequestStartAutoDownload(const uint32_t& btDeviceId) = 0;
    virtual void DisableBluetoothRsp(const uint32_t& activeCallStatus) = 0;
    virtual void ConnectingCarPlayError() = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _DontShowOnConnectionSettingStatusResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t btDeviceId;
        ri >> btDeviceId;
        bool setting;
        ri >> setting;
        DontShowOnConnectionSettingStatusResp(btDeviceId, setting);
    }
    void _ConnectionStatusResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t serviceId;
        ri >> serviceId;
        uint32_t connStatus;
        ri >> connStatus;
        uint32_t btDeviceId;
        ri >> btDeviceId;
        uint32_t status;
        ri >> status;
        ::DBus::Struct< std::vector< uint8_t > > terminalPath;
        ri >> terminalPath;
        ConnectionStatusResp(serviceId, connStatus, btDeviceId, status, terminalPath);
    }
    void _HftReadyStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t hftReady;
        ri >> hftReady;
        uint32_t reasonCode;
        ri >> reasonCode;
        uint32_t appId;
        ri >> appId;
        HftReadyStatus(hftReady, reasonCode, appId);
    }
    void _ReadyStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t isReady;
        ri >> isReady;
        uint32_t reasonCode;
        ri >> reasonCode;
        ReadyStatus(isReady, reasonCode);
    }
    void _AddStatusResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t addServiceId;
        ri >> addServiceId;
        uint32_t status;
        ri >> status;
        AddStatusResp(addServiceId, status);
    }
    void _DeviceUnbarringStatusResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t btDeviceId;
        ri >> btDeviceId;
        uint32_t status;
        ri >> status;
        DeviceUnbarringStatusResp(btDeviceId, status);
    }
    void _DeviceBluetoothSettingResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool btSetting;
        ri >> btSetting;
        DeviceBluetoothSettingResp(btSetting);
    }
    void _AvailablePairedListResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t totalPairedDevices;
        ri >> totalPairedDevices;
        ::DBus::Struct< std::vector< uint8_t > > pairedDeviceList;
        ri >> pairedDeviceList;
        AvailablePairedListResp(totalPairedDevices, pairedDeviceList);
    }
    void _SupportedProfilesResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > supportedProfiles;
        ri >> supportedProfiles;
        SupportedProfilesResp(supportedProfiles);
    }
    void _FirstHfpSupportedInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool isHfpSupportedDevicePresent;
        ri >> isHfpSupportedDevicePresent;
        FirstHfpSupportedInfo(isHfpSupportedDevicePresent);
    }
    void _CarPlayConnectionStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t connStatus;
        ri >> connStatus;
        uint32_t carPlayDeviceId;
        ri >> carPlayDeviceId;
        CarPlayConnectionStatus(connStatus, carPlayDeviceId);
    }
    void _AAutoEnableBt_stub(const ::DBus::SignalMessage &sig)
    {
        AAutoEnableBt();
    }
    void _AAutoNoEntryAvailable_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t deleteDeviceId;
        ri >> deleteDeviceId;
        AAutoNoEntryAvailable(deleteDeviceId);
    }
    void _ReqStartAndroidAutoPairing_stub(const ::DBus::SignalMessage &sig)
    {
        ReqStartAndroidAutoPairing();
    }
    void _ReqStopAndroidAutoPairing_stub(const ::DBus::SignalMessage &sig)
    {
        ReqStopAndroidAutoPairing();
    }
    void _ReqDeleteDevice_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t deleteDeviceId;
        ri >> deleteDeviceId;
        ReqDeleteDevice(deleteDeviceId);
    }
    void _AAPairingSeqResult_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool result;
        ri >> result;
        AAPairingSeqResult(result);
    }
    void _AndroidAutoPairingTimeout_stub(const ::DBus::SignalMessage &sig)
    {
        AndroidAutoPairingTimeout();
    }
    void _RequestStartAutoDownload_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t btDeviceId;
        ri >> btDeviceId;
        RequestStartAutoDownload(btDeviceId);
    }
    void _DisableBluetoothRsp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t activeCallStatus;
        ri >> activeCallStatus;
        DisableBluetoothRsp(activeCallStatus);
    }
    void _ConnectingCarPlayError_stub(const ::DBus::SignalMessage &sig)
    {
        ConnectingCarPlayError();
    }
};

} } 
namespace com {
namespace jci {

class CD_proxy
: public ::DBus::InterfaceProxy
{
public:

    CD_proxy()
    : ::DBus::InterfaceProxy("com.jci.CD")
    {
        connect_signal(CD_proxy, Status, _Status_stub);
        connect_signal(CD_proxy, Ready_Status, _Ready_Status_stub);
        connect_signal(CD_proxy, Repeat_Settings_Status, _Repeat_Settings_Status_stub);
        connect_signal(CD_proxy, Random_Settings_Status, _Random_Settings_Status_stub);
        connect_signal(CD_proxy, Track_Play_Status, _Track_Play_Status_stub);
        connect_signal(CD_proxy, Metadata_Response, _Metadata_Response_stub);
        connect_signal(CD_proxy, SourceChange_Response, _SourceChange_Response_stub);
        connect_signal(CD_proxy, RoutineTest_Response, _RoutineTest_Response_stub);
        connect_signal(CD_proxy, Total_Track_Number, _Total_Track_Number_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t SourceChange_Req()
    {
        ::DBus::CallMessage call;
        call.member("SourceChange_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Eject_Req()
    {
        ::DBus::CallMessage call;
        call.member("Eject_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Play_Req()
    {
        ::DBus::CallMessage call;
        call.member("Play_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Pause_Req()
    {
        ::DBus::CallMessage call;
        call.member("Pause_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Previous_Req()
    {
        ::DBus::CallMessage call;
        call.member("Previous_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Next_Req()
    {
        ::DBus::CallMessage call;
        call.member("Next_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetRepeat_Req(const uint8_t& repeat)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << repeat;
        call.member("SetRepeat_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetRandom_Req(const uint8_t& random)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << random;
        call.member("SetRandom_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Scan_Req()
    {
        ::DBus::CallMessage call;
        call.member("Scan_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t FastForward_Req()
    {
        ::DBus::CallMessage call;
        call.member("FastForward_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t FastRewind_Req()
    {
        ::DBus::CallMessage call;
        call.member("FastRewind_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetCDReadyStatus_Req(uint8_t& cD_Ready_Status, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("GetCDReadyStatus_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> cD_Ready_Status;
        ri >> return_value;
    }

    ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t > GetCDStatus_Req()
    {
        ::DBus::CallMessage call;
        call.member("GetCDStatus_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t > argout;
        ri >> argout;
        return argout;
    }

    void Get_Availability_Req(uint8_t& cD_RoutineTest_Response, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("Get_Availability_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> cD_RoutineTest_Response;
        ri >> return_value;
    }

    ::DBus::Struct< uint8_t, std::string, uint8_t, bool, bool > UserSelection_Req(const uint8_t& itemType, const uint16_t& index)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << itemType;
        wi << index;
        call.member("UserSelection_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint8_t, std::string, uint8_t, bool, bool > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint8_t, std::string, uint8_t, bool, bool > UserSelection_VR_Req(const uint8_t& itemType, const uint16_t& index)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << itemType;
        wi << index;
        call.member("UserSelection_VR_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint8_t, std::string, uint8_t, bool, bool > argout;
        ri >> argout;
        return argout;
    }

    void GetFolderContents_Req(const uint16_t& index, const uint16_t& itemsCount, ::DBus::Struct< std::vector< ::DBus::Struct< uint16_t, uint8_t, std::string > > >& itemList, int16_t& listSize, int16_t& totalItemsInFolder)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << index;
        wi << itemsCount;
        call.member("GetFolderContents_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> itemList;
        ri >> listSize;
        ri >> totalItemsInFolder;
    }


public:

    /* signal handlers for this interface
     */
    virtual void Status(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t >& cD_status) = 0;
    virtual void Ready_Status(const uint8_t& ready_status) = 0;
    virtual void Repeat_Settings_Status(const uint8_t& repeat_status) = 0;
    virtual void Random_Settings_Status(const uint8_t& random_status) = 0;
    virtual void Track_Play_Status(const ::DBus::Struct< uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& cD_Track_Play_Status) = 0;
    virtual void Metadata_Response(const ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string >& metadata_Response) = 0;
    virtual void SourceChange_Response(const uint8_t& change_Response) = 0;
    virtual void RoutineTest_Response(const uint8_t& routineTest_Response) = 0;
    virtual void Total_Track_Number(const uint16_t& total_track_number) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t > cD_status;
        ri >> cD_status;
        Status(cD_status);
    }
    void _Ready_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t ready_status;
        ri >> ready_status;
        Ready_Status(ready_status);
    }
    void _Repeat_Settings_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t repeat_status;
        ri >> repeat_status;
        Repeat_Settings_Status(repeat_status);
    }
    void _Random_Settings_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t random_status;
        ri >> random_status;
        Random_Settings_Status(random_status);
    }
    void _Track_Play_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t > cD_Track_Play_Status;
        ri >> cD_Track_Play_Status;
        Track_Play_Status(cD_Track_Play_Status);
    }
    void _Metadata_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string > metadata_Response;
        ri >> metadata_Response;
        Metadata_Response(metadata_Response);
    }
    void _SourceChange_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t change_Response;
        ri >> change_Response;
        SourceChange_Response(change_Response);
    }
    void _RoutineTest_Response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t routineTest_Response;
        ri >> routineTest_Response;
        RoutineTest_Response(routineTest_Response);
    }
    void _Total_Track_Number_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t total_track_number;
        ri >> total_track_number;
        Total_Track_Number(total_track_number);
    }
};

} } 
namespace com {
namespace jci {

class navi2IHU_proxy
: public ::DBus::InterfaceProxy
{
public:

    navi2IHU_proxy()
    : ::DBus::InterfaceProxy("com.jci.navi2IHU")
    {
        connect_signal(navi2IHU_proxy, NaviStateUpdate, _NaviStateUpdate_stub);
        connect_signal(navi2IHU_proxy, ReadyToShowNavi, _ReadyToShowNavi_stub);
        connect_signal(navi2IHU_proxy, RequestShowNavigation, _RequestShowNavigation_stub);
        connect_signal(navi2IHU_proxy, NaviButtonPressed, _NaviButtonPressed_stub);
        connect_signal(navi2IHU_proxy, DialPhoneNumber, _DialPhoneNumber_stub);
        connect_signal(navi2IHU_proxy, NaviconDestinationRequest, _NaviconDestinationRequest_stub);
        connect_signal(navi2IHU_proxy, LanguageChangeFinished, _LanguageChangeFinished_stub);
        connect_signal(navi2IHU_proxy, LanguageChangeFinishedEx, _LanguageChangeFinishedEx_stub);
        connect_signal(navi2IHU_proxy, FactoryResetFinished, _FactoryResetFinished_stub);
        connect_signal(navi2IHU_proxy, CurrentLocationInfo, _CurrentLocationInfo_stub);
        connect_signal(navi2IHU_proxy, VolumeScreenFocusChanged, _VolumeScreenFocusChanged_stub);
        connect_signal(navi2IHU_proxy, RequestScreenMode, _RequestScreenMode_stub);
        connect_signal(navi2IHU_proxy, ReadyToShowNaviEx, _ReadyToShowNaviEx_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void ShowNavigation()
    {
        ::DBus::CallMessage call;
        call.member("ShowNavigation");
        ::DBus::Message ret = invoke_method (call);
    }

    void ClearStack()
    {
        ::DBus::CallMessage call;
        call.member("ClearStack");
        ::DBus::Message ret = invoke_method (call);
    }

    void FavoriteLongPress()
    {
        ::DBus::CallMessage call;
        call.member("FavoriteLongPress");
        ::DBus::Message ret = invoke_method (call);
    }

    void NaviButtonPress()
    {
        ::DBus::CallMessage call;
        call.member("NaviButtonPress");
        ::DBus::Message ret = invoke_method (call);
    }

    void NaviFocusStatusUpdate(const int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << status;
        call.member("NaviFocusStatusUpdate");
        ::DBus::Message ret = invoke_method (call);
    }

    void RequestShowNavigationDenied()
    {
        ::DBus::CallMessage call;
        call.member("RequestShowNavigationDenied");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t DisplayXMServices(const uint32_t& screen)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << screen;
        call.member("DisplayXMServices");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetCurrentNaviState()
    {
        ::DBus::CallMessage call;
        call.member("GetCurrentNaviState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void NavigateToAddress(const std::string& name, const std::string& addressLine1, const std::string& addressLine2, const std::string& city, const std::string& stateProvince, const std::string& country, const std::string& code, const double& latitude, const double& longitude)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << addressLine1;
        wi << addressLine2;
        wi << city;
        wi << stateProvince;
        wi << country;
        wi << code;
        wi << latitude;
        wi << longitude;
        call.member("NavigateToAddress");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetLanguage(const int32_t& language)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << language;
        call.member("SetLanguage");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetLanguageEx(const int32_t& display_language, const bool& vr_supported, const int32_t& vr_language, const int32_t& tts_language, const int32_t& keyboard_language)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << display_language;
        wi << vr_supported;
        wi << vr_language;
        wi << tts_language;
        wi << keyboard_language;
        call.member("SetLanguageEx");
        ::DBus::Message ret = invoke_method (call);
    }

    void FactoryReset()
    {
        ::DBus::CallMessage call;
        call.member("FactoryReset");
        ::DBus::Message ret = invoke_method (call);
    }

    void GetCurrentLocationInfo(const bool& locinfoneeded)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << locinfoneeded;
        call.member("GetCurrentLocationInfo");
        ::DBus::Message ret = invoke_method (call);
    }

    bool GetVolumeScreenFocusStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetVolumeScreenFocusStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void NaviStateUpdate(const int32_t& state) = 0;
    virtual void ReadyToShowNavi() = 0;
    virtual void RequestShowNavigation() = 0;
    virtual void NaviButtonPressed(const int32_t& buttonPressedID) = 0;
    virtual void DialPhoneNumber(const std::string& phoneNumber, const std::string& name) = 0;
    virtual void NaviconDestinationRequest(const std::string& name, const double& latitude, const double& longitude) = 0;
    virtual void LanguageChangeFinished(const bool& status, const int32_t& language) = 0;
    virtual void LanguageChangeFinishedEx(const bool& status, const int32_t& display_language, const int32_t& vr_language, const int32_t& tts_language, const int32_t& keyboard_language) = 0;
    virtual void FactoryResetFinished(const bool& status) = 0;
    virtual void CurrentLocationInfo(const double& latitude, const double& longitude, const int32_t& altitude, const int32_t& altitudeUnit, const bool& isValidInfo, const double& heading, const bool& isHeadingValid, const uint8_t& compassDirection) = 0;
    virtual void VolumeScreenFocusChanged(const bool& volumeScreenInFocus) = 0;
    virtual void RequestScreenMode(const int32_t& screenMode) = 0;
    virtual void ReadyToShowNaviEx(const int32_t& screenMode) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _NaviStateUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t state;
        ri >> state;
        NaviStateUpdate(state);
    }
    void _ReadyToShowNavi_stub(const ::DBus::SignalMessage &sig)
    {
        ReadyToShowNavi();
    }
    void _RequestShowNavigation_stub(const ::DBus::SignalMessage &sig)
    {
        RequestShowNavigation();
    }
    void _NaviButtonPressed_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t buttonPressedID;
        ri >> buttonPressedID;
        NaviButtonPressed(buttonPressedID);
    }
    void _DialPhoneNumber_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string phoneNumber;
        ri >> phoneNumber;
        std::string name;
        ri >> name;
        DialPhoneNumber(phoneNumber, name);
    }
    void _NaviconDestinationRequest_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string name;
        ri >> name;
        double latitude;
        ri >> latitude;
        double longitude;
        ri >> longitude;
        NaviconDestinationRequest(name, latitude, longitude);
    }
    void _LanguageChangeFinished_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool status;
        ri >> status;
        int32_t language;
        ri >> language;
        LanguageChangeFinished(status, language);
    }
    void _LanguageChangeFinishedEx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool status;
        ri >> status;
        int32_t display_language;
        ri >> display_language;
        int32_t vr_language;
        ri >> vr_language;
        int32_t tts_language;
        ri >> tts_language;
        int32_t keyboard_language;
        ri >> keyboard_language;
        LanguageChangeFinishedEx(status, display_language, vr_language, tts_language, keyboard_language);
    }
    void _FactoryResetFinished_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool status;
        ri >> status;
        FactoryResetFinished(status);
    }
    void _CurrentLocationInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        double latitude;
        ri >> latitude;
        double longitude;
        ri >> longitude;
        int32_t altitude;
        ri >> altitude;
        int32_t altitudeUnit;
        ri >> altitudeUnit;
        bool isValidInfo;
        ri >> isValidInfo;
        double heading;
        ri >> heading;
        bool isHeadingValid;
        ri >> isHeadingValid;
        uint8_t compassDirection;
        ri >> compassDirection;
        CurrentLocationInfo(latitude, longitude, altitude, altitudeUnit, isValidInfo, heading, isHeadingValid, compassDirection);
    }
    void _VolumeScreenFocusChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool volumeScreenInFocus;
        ri >> volumeScreenInFocus;
        VolumeScreenFocusChanged(volumeScreenInFocus);
    }
    void _RequestScreenMode_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t screenMode;
        ri >> screenMode;
        RequestScreenMode(screenMode);
    }
    void _ReadyToShowNaviEx_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t screenMode;
        ri >> screenMode;
        ReadyToShowNaviEx(screenMode);
    }
};

} } 
namespace com {
namespace jci {
namespace navi2IHU {

class VR_proxy
: public ::DBus::InterfaceProxy
{
public:

    VR_proxy()
    : ::DBus::InterfaceProxy("com.jci.navi2IHU.VR")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void VREvent(const std::string& eventId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << eventId;
        call.member("VREvent");
        ::DBus::Message ret = invoke_method (call);
    }

    void SelectedListItem(const int32_t& seletedItem)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << seletedItem;
        call.member("SelectedListItem");
        ::DBus::Message ret = invoke_method (call);
    }

    void JpjIntermediateHypothesis(const ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t >& jpjHypothesis)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << jpjHypothesis;
        call.member("JpjIntermediateHypothesis");
        ::DBus::Message ret = invoke_method (call);
    }

    void JpjVDEHypothesisList(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t > > >& jpjHypothesisList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << jpjHypothesisList;
        call.member("JpjVDEHypothesisList");
        ::DBus::Message ret = invoke_method (call);
    }

    void VDEHypothesisList(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t > > >& vDEList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << vDEList;
        call.member("VDEHypothesisList");
        ::DBus::Message ret = invoke_method (call);
    }

    void NavigateToPOI(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< std::string > > >& poiCategoryName)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << poiCategoryName;
        call.member("NavigateToPOI");
        ::DBus::Message ret = invoke_method (call);
    }

    void AddWaypointPOI(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< std::string > > >& poiCategoryName)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << poiCategoryName;
        call.member("AddWaypointPOI");
        ::DBus::Message ret = invoke_method (call);
    }

    void SimpleHypothesisList(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< uint32_t > > >& idList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << idList;
        call.member("SimpleHypothesisList");
        ::DBus::Message ret = invoke_method (call);
    }

    void ModeChanged(const int32_t& modality)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << modality;
        call.member("ModeChanged");
        ::DBus::Message ret = invoke_method (call);
    }

    void UniVDEHypothesisList(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< std::string > > >& uniHypothesisList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << uniHypothesisList;
        call.member("UniVDEHypothesisList");
        ::DBus::Message ret = invoke_method (call);
    }

    void UniSimpleHypothesisList(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< std::string > > >& uniHypothesisList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << uniHypothesisList;
        call.member("UniSimpleHypothesisList");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } 
namespace com {
namespace jci {
namespace navi2IHU {

class HUDSettings_proxy
: public ::DBus::InterfaceProxy
{
public:

    HUDSettings_proxy()
    : ::DBus::InterfaceProxy("com.jci.navi2IHU.HUDSettings")
    {
        connect_signal(HUDSettings_proxy, HUDInstalledChanged, _HUDInstalledChanged_stub);
        connect_signal(HUDSettings_proxy, SetHUDSettingFailed, _SetHUDSettingFailed_stub);
        connect_signal(HUDSettings_proxy, HUDControlAllowed, _HUDControlAllowed_stub);
        connect_signal(HUDSettings_proxy, HUDSettingChanged, _HUDSettingChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    bool GetHUDIsInstalled()
    {
        ::DBus::CallMessage call;
        call.member("GetHUDIsInstalled");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    bool GetHUDIsInstalled_async()
    {
        ::DBus::CallMessage call;
        call.member("GetHUDIsInstalled_async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        bool argout;
        ri >> argout;
        return argout;
    }

    void SetHUDSetting(const int32_t& hUDSettingType, const int32_t& hUDSettingValue)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hUDSettingType;
        wi << hUDSettingValue;
        call.member("SetHUDSetting");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetHUDSetting_Async(const int32_t& hUDSettingType, const int32_t& hUDSettingValue)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hUDSettingType;
        wi << hUDSettingValue;
        call.member("SetHUDSetting_Async");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t GetHUDSetting(const int32_t& hUDSettingType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hUDSettingType;
        call.member("GetHUDSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void ResetHUDSettings()
    {
        ::DBus::CallMessage call;
        call.member("ResetHUDSettings");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t GetHUDControlAllowed()
    {
        ::DBus::CallMessage call;
        call.member("GetHUDControlAllowed");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void HUDInstalledChanged(const bool& hUDInstalled) = 0;
    virtual void SetHUDSettingFailed(const int32_t& hUDSettingType, const int32_t& err) = 0;
    virtual void HUDControlAllowed(const bool& bAllowed) = 0;
    virtual void HUDSettingChanged(const int32_t& hUDSettingType, const int32_t& value) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _HUDInstalledChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool hUDInstalled;
        ri >> hUDInstalled;
        HUDInstalledChanged(hUDInstalled);
    }
    void _SetHUDSettingFailed_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t hUDSettingType;
        ri >> hUDSettingType;
        int32_t err;
        ri >> err;
        SetHUDSettingFailed(hUDSettingType, err);
    }
    void _HUDControlAllowed_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool bAllowed;
        ri >> bAllowed;
        HUDControlAllowed(bAllowed);
    }
    void _HUDSettingChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t hUDSettingType;
        ri >> hUDSettingType;
        int32_t value;
        ri >> value;
        HUDSettingChanged(hUDSettingType, value);
    }
};

} } } 
namespace com {
namespace jci {
namespace navi2IHU {

class NaviFavorites_proxy
: public ::DBus::InterfaceProxy
{
public:

    NaviFavorites_proxy()
    : ::DBus::InterfaceProxy("com.jci.navi2IHU.NaviFavorites")
    {
        connect_signal(NaviFavorites_proxy, FavoriteButtonPressed, _FavoriteButtonPressed_stub);
        connect_signal(NaviFavorites_proxy, FavoriteOperationResult, _FavoriteOperationResult_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void AddFavorite(const std::string& name, const std::string& countryName, const std::string& stateName, const std::string& cityName, const std::string& streetName, const std::string& zipCode, const double& latitude, const double& longitude)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << countryName;
        wi << stateName;
        wi << cityName;
        wi << streetName;
        wi << zipCode;
        wi << latitude;
        wi << longitude;
        call.member("AddFavorite");
        ::DBus::Message ret = invoke_method (call);
    }

    void ReplaceFavoriteWithAddress(const uint32_t& iD, const std::string& name, const std::string& countryName, const std::string& stateName, const std::string& cityName, const std::string& streetName, const std::string& zipCode, const double& latitude, const double& longitude)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << iD;
        wi << name;
        wi << countryName;
        wi << stateName;
        wi << cityName;
        wi << streetName;
        wi << zipCode;
        wi << latitude;
        wi << longitude;
        call.member("ReplaceFavoriteWithAddress");
        ::DBus::Message ret = invoke_method (call);
    }

    void DeleteFavorite(const uint32_t& iD)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << iD;
        call.member("DeleteFavorite");
        ::DBus::Message ret = invoke_method (call);
    }

    void DeleteAllFavorites()
    {
        ::DBus::CallMessage call;
        call.member("DeleteAllFavorites");
        ::DBus::Message ret = invoke_method (call);
    }

    void NavigateToFavorite(const uint32_t& iD)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << iD;
        call.member("NavigateToFavorite");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetHome()
    {
        ::DBus::CallMessage call;
        call.member("SetHome");
        ::DBus::Message ret = invoke_method (call);
    }

    void UnsetHome()
    {
        ::DBus::CallMessage call;
        call.member("UnsetHome");
        ::DBus::Message ret = invoke_method (call);
    }

    void RenameFavorite(const uint32_t& iD, const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << iD;
        wi << name;
        call.member("RenameFavorite");
        ::DBus::Message ret = invoke_method (call);
    }

    void MoveFavorite(const uint32_t& iD1, const uint32_t& iD2)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << iD1;
        wi << iD2;
        call.member("MoveFavorite");
        ::DBus::Message ret = invoke_method (call);
    }

    void SwapFavorite(const uint32_t& iD1, const uint32_t& iD2)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << iD1;
        wi << iD2;
        call.member("SwapFavorite");
        ::DBus::Message ret = invoke_method (call);
    }

    void AddCurrentPositionToFavorites()
    {
        ::DBus::CallMessage call;
        call.member("AddCurrentPositionToFavorites");
        ::DBus::Message ret = invoke_method (call);
    }

    void ReplaceFavoriteWithCurrentPosition(const uint32_t& iD)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << iD;
        call.member("ReplaceFavoriteWithCurrentPosition");
        ::DBus::Message ret = invoke_method (call);
    }

    void AddCurrentDestinationToFavorites()
    {
        ::DBus::CallMessage call;
        call.member("AddCurrentDestinationToFavorites");
        ::DBus::Message ret = invoke_method (call);
    }

    void ReplaceFavoriteWithCurrentDestination(const uint32_t& iD)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << iD;
        call.member("ReplaceFavoriteWithCurrentDestination");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t NavigatedRouteExists()
    {
        ::DBus::CallMessage call;
        call.member("NavigatedRouteExists");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< uint32_t, std::string > > > GetFavoriteList(const int32_t& startIndex, const int32_t& maxItems)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << startIndex;
        wi << maxItems;
        call.member("GetFavoriteList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< uint32_t, std::string > > > argout;
        ri >> argout;
        return argout;
    }

    int32_t GetFavoritesCount()
    {
        ::DBus::CallMessage call;
        call.member("GetFavoritesCount");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void FavoriteButtonPressed() = 0;
    virtual void FavoriteOperationResult(const int32_t& result) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _FavoriteButtonPressed_stub(const ::DBus::SignalMessage &sig)
    {
        FavoriteButtonPressed();
    }
    void _FavoriteOperationResult_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t result;
        ri >> result;
        FavoriteOperationResult(result);
    }
};

} } } 
namespace com {
namespace jci {

class navi2NNG_proxy
: public ::DBus::InterfaceProxy
{
public:

    navi2NNG_proxy()
    : ::DBus::InterfaceProxy("com.jci.navi2NNG")
    {
        connect_signal(navi2NNG_proxy, ShutdownRequest, _ShutdownRequest_stub);
        connect_signal(navi2NNG_proxy, FactoryReset, _FactoryReset_stub);
        connect_signal(navi2NNG_proxy, ShowNavigation, _ShowNavigation_stub);
        connect_signal(navi2NNG_proxy, ShowNaviScreen, _ShowNaviScreen_stub);
        connect_signal(navi2NNG_proxy, RequestShowNavigationDenied, _RequestShowNavigationDenied_stub);
        connect_signal(navi2NNG_proxy, ClearStack, _ClearStack_stub);
        connect_signal(navi2NNG_proxy, FavoriteLongPress, _FavoriteLongPress_stub);
        connect_signal(navi2NNG_proxy, NaviButtonPress, _NaviButtonPress_stub);
        connect_signal(navi2NNG_proxy, GuiFocusStatusUpdate, _GuiFocusStatusUpdate_stub);
        connect_signal(navi2NNG_proxy, AudioDone, _AudioDone_stub);
        connect_signal(navi2NNG_proxy, SetNavigationVolume, _SetNavigationVolume_stub);
        connect_signal(navi2NNG_proxy, VREvent, _VREvent_stub);
        connect_signal(navi2NNG_proxy, SelectedListItem, _SelectedListItem_stub);
        connect_signal(navi2NNG_proxy, NavigateToPOI, _NavigateToPOI_stub);
        connect_signal(navi2NNG_proxy, AddWaypointPOI, _AddWaypointPOI_stub);
        connect_signal(navi2NNG_proxy, JpjIntermediateHypothesis, _JpjIntermediateHypothesis_stub);
        connect_signal(navi2NNG_proxy, JpjVDEHypothesisList, _JpjVDEHypothesisList_stub);
        connect_signal(navi2NNG_proxy, VDEHypothesisList, _VDEHypothesisList_stub);
        connect_signal(navi2NNG_proxy, SimpleHypothesisList, _SimpleHypothesisList_stub);
        connect_signal(navi2NNG_proxy, UniVDEHypothesisList, _UniVDEHypothesisList_stub);
        connect_signal(navi2NNG_proxy, UniSimpleHypothesisList, _UniSimpleHypothesisList_stub);
        connect_signal(navi2NNG_proxy, ModeChanged, _ModeChanged_stub);
        connect_signal(navi2NNG_proxy, RequestGuidanceInfo, _RequestGuidanceInfo_stub);
        connect_signal(navi2NNG_proxy, NavigateToAddress, _NavigateToAddress_stub);
        connect_signal(navi2NNG_proxy, DeleteFavorite, _DeleteFavorite_stub);
        connect_signal(navi2NNG_proxy, DeleteAllFavorites, _DeleteAllFavorites_stub);
        connect_signal(navi2NNG_proxy, NavigateToFavorite, _NavigateToFavorite_stub);
        connect_signal(navi2NNG_proxy, RenameFavorite, _RenameFavorite_stub);
        connect_signal(navi2NNG_proxy, SetHome, _SetHome_stub);
        connect_signal(navi2NNG_proxy, UnsetHome, _UnsetHome_stub);
        connect_signal(navi2NNG_proxy, SwapFavorites, _SwapFavorites_stub);
        connect_signal(navi2NNG_proxy, MoveFavorite, _MoveFavorite_stub);
        connect_signal(navi2NNG_proxy, AddCurrentPositionToFavorites, _AddCurrentPositionToFavorites_stub);
        connect_signal(navi2NNG_proxy, ReplaceFavoriteWithCurrentPosition, _ReplaceFavoriteWithCurrentPosition_stub);
        connect_signal(navi2NNG_proxy, AddCurrentDestinationToFavorites, _AddCurrentDestinationToFavorites_stub);
        connect_signal(navi2NNG_proxy, ReplaceFavoriteWithCurrentDestination, _ReplaceFavoriteWithCurrentDestination_stub);
        connect_signal(navi2NNG_proxy, AddFavorite, _AddFavorite_stub);
        connect_signal(navi2NNG_proxy, ReplaceFavoriteWithAddress, _ReplaceFavoriteWithAddress_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::string GetVDELang()
    {
        ::DBus::CallMessage call;
        call.member("GetVDELang");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTTSLang()
    {
        ::DBus::CallMessage call;
        call.member("GetTTSLang");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetLanguage()
    {
        ::DBus::CallMessage call;
        call.member("GetLanguage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    std::string GetVIN()
    {
        ::DBus::CallMessage call;
        call.member("GetVIN");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    void GetRegionAndBranding(std::string& region, std::string& branding)
    {
        ::DBus::CallMessage call;
        call.member("GetRegionAndBranding");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> region;
        ri >> branding;
    }

    int32_t GetSpeedLimitSign()
    {
        ::DBus::CallMessage call;
        call.member("GetSpeedLimitSign");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetSpeedLimitCaution()
    {
        ::DBus::CallMessage call;
        call.member("GetSpeedLimitCaution");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetSpeedLimitCautionSpeed()
    {
        ::DBus::CallMessage call;
        call.member("GetSpeedLimitCautionSpeed");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTemperatureUnit()
    {
        ::DBus::CallMessage call;
        call.member("GetTemperatureUnit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetDayNightMode()
    {
        ::DBus::CallMessage call;
        call.member("GetDayNightMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetTimeFormat()
    {
        ::DBus::CallMessage call;
        call.member("GetTimeFormat");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetLengthUnit()
    {
        ::DBus::CallMessage call;
        call.member("GetLengthUnit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetPhoneConnectionStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetPhoneConnectionStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetFuelType()
    {
        ::DBus::CallMessage call;
        call.member("GetFuelType");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetNetworkConnectionStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetNetworkConnectionStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< int32_t > > > GetAvailableLayouts()
    {
        ::DBus::CallMessage call;
        call.member("GetAvailableLayouts");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< int32_t > > > argout;
        ri >> argout;
        return argout;
    }

    int32_t GetKeyboardLayout()
    {
        ::DBus::CallMessage call;
        call.member("GetKeyboardLayout");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetRecentKeyboardNumber()
    {
        ::DBus::CallMessage call;
        call.member("GetRecentKeyboardNumber");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetSpeedRestriction()
    {
        ::DBus::CallMessage call;
        call.member("GetSpeedRestriction");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    std::string GetLocalizedRecentText()
    {
        ::DBus::CallMessage call;
        call.member("GetLocalizedRecentText");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    int32_t GetShowSpeedingSettingMenu()
    {
        ::DBus::CallMessage call;
        call.member("GetShowSpeedingSettingMenu");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetHubType()
    {
        ::DBus::CallMessage call;
        call.member("GetHubType");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetVolumeRequestEnabled()
    {
        ::DBus::CallMessage call;
        call.member("GetVolumeRequestEnabled");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetNavigationVolume()
    {
        ::DBus::CallMessage call;
        call.member("GetNavigationVolume");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void DialPhoneNumber(const std::string& phoneNumber, const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << phoneNumber;
        wi << name;
        call.member("DialPhoneNumber");
        ::DBus::Message ret = invoke_method (call);
    }

    void GetTimeMode(int32_t& mode, uint64_t& timeStamp, ::DBus::Struct< int16_t, uint8_t, uint8_t, uint8_t, uint8_t, uint8_t >& displayedTime)
    {
        ::DBus::CallMessage call;
        call.member("GetTimeMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> mode;
        ri >> timeStamp;
        ri >> displayedTime;
    }

    void GetDRUnitStatus(bool& ismounted, std::string& nodename)
    {
        ::DBus::CallMessage call;
        call.member("GetDRUnitStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> ismounted;
        ri >> nodename;
    }


public:

    /* signal handlers for this interface
     */
    virtual void ShutdownRequest() = 0;
    virtual void FactoryReset() = 0;
    virtual void ShowNavigation() = 0;
    virtual void ShowNaviScreen(const int32_t& screenId) = 0;
    virtual void RequestShowNavigationDenied() = 0;
    virtual void ClearStack() = 0;
    virtual void FavoriteLongPress() = 0;
    virtual void NaviButtonPress() = 0;
    virtual void GuiFocusStatusUpdate(const int32_t& status) = 0;
    virtual void AudioDone(const int32_t& callbackId, const int32_t& result) = 0;
    virtual void SetNavigationVolume(const int32_t& volume) = 0;
    virtual void VREvent(const std::string& eventId) = 0;
    virtual void SelectedListItem(const int32_t& seletedItem) = 0;
    virtual void NavigateToPOI(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< std::string > > >& poiCategoryName) = 0;
    virtual void AddWaypointPOI(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< std::string > > >& poiCategoryName) = 0;
    virtual void JpjIntermediateHypothesis(const ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t >& jpjHypothesis) = 0;
    virtual void JpjVDEHypothesisList(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t > > >& jpjHypothesisList) = 0;
    virtual void VDEHypothesisList(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t > > >& vDEList) = 0;
    virtual void SimpleHypothesisList(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< uint32_t > > >& idList) = 0;
    virtual void UniVDEHypothesisList(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< std::string > > >& uniVDEHypothesisList) = 0;
    virtual void UniSimpleHypothesisList(const ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< std::string > > >& uniSimpleHypothesisList) = 0;
    virtual void ModeChanged(const int32_t& modality) = 0;
    virtual void RequestGuidanceInfo() = 0;
    virtual void NavigateToAddress(const std::string& name, const std::string& countryName, const std::string& stateName, const std::string& cityName, const std::string& streetName, const std::string& zipCode, const double& latitude, const double& longitude) = 0;
    virtual void DeleteFavorite(const uint32_t& iD) = 0;
    virtual void DeleteAllFavorites() = 0;
    virtual void NavigateToFavorite(const uint32_t& iD) = 0;
    virtual void RenameFavorite(const uint32_t& iD, const std::string& name) = 0;
    virtual void SetHome() = 0;
    virtual void UnsetHome() = 0;
    virtual void SwapFavorites(const uint32_t& iD1, const uint32_t& iD2) = 0;
    virtual void MoveFavorite(const uint32_t& iD1, const uint32_t& iD2) = 0;
    virtual void AddCurrentPositionToFavorites() = 0;
    virtual void ReplaceFavoriteWithCurrentPosition(const uint32_t& iD) = 0;
    virtual void AddCurrentDestinationToFavorites() = 0;
    virtual void ReplaceFavoriteWithCurrentDestination(const uint32_t& iD) = 0;
    virtual void AddFavorite(const std::string& name, const std::string& countryName, const std::string& stateName, const std::string& cityName, const std::string& streetName, const std::string& zipCode, const double& latitude, const double& longitude) = 0;
    virtual void ReplaceFavoriteWithAddress(const uint32_t& iD, const std::string& name, const std::string& countryName, const std::string& stateName, const std::string& cityName, const std::string& streetName, const std::string& zipCode, const double& latitude, const double& longitude) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ShutdownRequest_stub(const ::DBus::SignalMessage &sig)
    {
        ShutdownRequest();
    }
    void _FactoryReset_stub(const ::DBus::SignalMessage &sig)
    {
        FactoryReset();
    }
    void _ShowNavigation_stub(const ::DBus::SignalMessage &sig)
    {
        ShowNavigation();
    }
    void _ShowNaviScreen_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t screenId;
        ri >> screenId;
        ShowNaviScreen(screenId);
    }
    void _RequestShowNavigationDenied_stub(const ::DBus::SignalMessage &sig)
    {
        RequestShowNavigationDenied();
    }
    void _ClearStack_stub(const ::DBus::SignalMessage &sig)
    {
        ClearStack();
    }
    void _FavoriteLongPress_stub(const ::DBus::SignalMessage &sig)
    {
        FavoriteLongPress();
    }
    void _NaviButtonPress_stub(const ::DBus::SignalMessage &sig)
    {
        NaviButtonPress();
    }
    void _GuiFocusStatusUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t status;
        ri >> status;
        GuiFocusStatusUpdate(status);
    }
    void _AudioDone_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t callbackId;
        ri >> callbackId;
        int32_t result;
        ri >> result;
        AudioDone(callbackId, result);
    }
    void _SetNavigationVolume_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t volume;
        ri >> volume;
        SetNavigationVolume(volume);
    }
    void _VREvent_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string eventId;
        ri >> eventId;
        VREvent(eventId);
    }
    void _SelectedListItem_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t seletedItem;
        ri >> seletedItem;
        SelectedListItem(seletedItem);
    }
    void _NavigateToPOI_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< std::string > > > poiCategoryName;
        ri >> poiCategoryName;
        NavigateToPOI(poiCategoryName);
    }
    void _AddWaypointPOI_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< std::string > > > poiCategoryName;
        ri >> poiCategoryName;
        AddWaypointPOI(poiCategoryName);
    }
    void _JpjIntermediateHypothesis_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t > jpjHypothesis;
        ri >> jpjHypothesis;
        JpjIntermediateHypothesis(jpjHypothesis);
    }
    void _JpjVDEHypothesisList_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t > > > jpjHypothesisList;
        ri >> jpjHypothesisList;
        JpjVDEHypothesisList(jpjHypothesisList);
    }
    void _VDEHypothesisList_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t > > > vDEList;
        ri >> vDEList;
        VDEHypothesisList(vDEList);
    }
    void _SimpleHypothesisList_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< uint32_t > > > idList;
        ri >> idList;
        SimpleHypothesisList(idList);
    }
    void _UniVDEHypothesisList_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< std::string > > > uniVDEHypothesisList;
        ri >> uniVDEHypothesisList;
        UniVDEHypothesisList(uniVDEHypothesisList);
    }
    void _UniSimpleHypothesisList_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, std::vector< ::DBus::Struct< std::string > > > uniSimpleHypothesisList;
        ri >> uniSimpleHypothesisList;
        UniSimpleHypothesisList(uniSimpleHypothesisList);
    }
    void _ModeChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t modality;
        ri >> modality;
        ModeChanged(modality);
    }
    void _RequestGuidanceInfo_stub(const ::DBus::SignalMessage &sig)
    {
        RequestGuidanceInfo();
    }
    void _NavigateToAddress_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string name;
        ri >> name;
        std::string countryName;
        ri >> countryName;
        std::string stateName;
        ri >> stateName;
        std::string cityName;
        ri >> cityName;
        std::string streetName;
        ri >> streetName;
        std::string zipCode;
        ri >> zipCode;
        double latitude;
        ri >> latitude;
        double longitude;
        ri >> longitude;
        NavigateToAddress(name, countryName, stateName, cityName, streetName, zipCode, latitude, longitude);
    }
    void _DeleteFavorite_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t iD;
        ri >> iD;
        DeleteFavorite(iD);
    }
    void _DeleteAllFavorites_stub(const ::DBus::SignalMessage &sig)
    {
        DeleteAllFavorites();
    }
    void _NavigateToFavorite_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t iD;
        ri >> iD;
        NavigateToFavorite(iD);
    }
    void _RenameFavorite_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t iD;
        ri >> iD;
        std::string name;
        ri >> name;
        RenameFavorite(iD, name);
    }
    void _SetHome_stub(const ::DBus::SignalMessage &sig)
    {
        SetHome();
    }
    void _UnsetHome_stub(const ::DBus::SignalMessage &sig)
    {
        UnsetHome();
    }
    void _SwapFavorites_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t iD1;
        ri >> iD1;
        uint32_t iD2;
        ri >> iD2;
        SwapFavorites(iD1, iD2);
    }
    void _MoveFavorite_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t iD1;
        ri >> iD1;
        uint32_t iD2;
        ri >> iD2;
        MoveFavorite(iD1, iD2);
    }
    void _AddCurrentPositionToFavorites_stub(const ::DBus::SignalMessage &sig)
    {
        AddCurrentPositionToFavorites();
    }
    void _ReplaceFavoriteWithCurrentPosition_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t iD;
        ri >> iD;
        ReplaceFavoriteWithCurrentPosition(iD);
    }
    void _AddCurrentDestinationToFavorites_stub(const ::DBus::SignalMessage &sig)
    {
        AddCurrentDestinationToFavorites();
    }
    void _ReplaceFavoriteWithCurrentDestination_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t iD;
        ri >> iD;
        ReplaceFavoriteWithCurrentDestination(iD);
    }
    void _AddFavorite_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string name;
        ri >> name;
        std::string countryName;
        ri >> countryName;
        std::string stateName;
        ri >> stateName;
        std::string cityName;
        ri >> cityName;
        std::string streetName;
        ri >> streetName;
        std::string zipCode;
        ri >> zipCode;
        double latitude;
        ri >> latitude;
        double longitude;
        ri >> longitude;
        AddFavorite(name, countryName, stateName, cityName, streetName, zipCode, latitude, longitude);
    }
    void _ReplaceFavoriteWithAddress_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t iD;
        ri >> iD;
        std::string name;
        ri >> name;
        std::string countryName;
        ri >> countryName;
        std::string stateName;
        ri >> stateName;
        std::string cityName;
        ri >> cityName;
        std::string streetName;
        ri >> streetName;
        std::string zipCode;
        ri >> zipCode;
        double latitude;
        ri >> latitude;
        double longitude;
        ri >> longitude;
        ReplaceFavoriteWithAddress(iD, name, countryName, stateName, cityName, streetName, zipCode, latitude, longitude);
    }
};

} } 
namespace com {
namespace jci {

class bteca_proxy
: public ::DBus::InterfaceProxy
{
public:

    bteca_proxy()
    : ::DBus::InterfaceProxy("com.jci.bteca")
    {
        connect_signal(bteca_proxy, EnabledChange, _EnabledChange_stub);
        connect_signal(bteca_proxy, CollisionDetected, _CollisionDetected_stub);
        connect_signal(bteca_proxy, PhoneFoundStatus, _PhoneFoundStatus_stub);
        connect_signal(bteca_proxy, CollisionDetectedTimerStart, _CollisionDetectedTimerStart_stub);
        connect_signal(bteca_proxy, CollisionDetectedTimerExpired, _CollisionDetectedTimerExpired_stub);
        connect_signal(bteca_proxy, CallSuccess, _CallSuccess_stub);
        connect_signal(bteca_proxy, CallNotSuccess, _CallNotSuccess_stub);
        connect_signal(bteca_proxy, AudioTransferredToPhone, _AudioTransferredToPhone_stub);
        connect_signal(bteca_proxy, AudioTransferredToCar, _AudioTransferredToCar_stub);
        connect_signal(bteca_proxy, EndCall, _EndCall_stub);
        connect_signal(bteca_proxy, EmergencyCallFailure, _EmergencyCallFailure_stub);
        connect_signal(bteca_proxy, MP911EmergencyCallStatus, _MP911EmergencyCallStatus_stub);
        connect_signal(bteca_proxy, PhoneBTConnectionLost, _PhoneBTConnectionLost_stub);
        connect_signal(bteca_proxy, TransferredToHandset, _TransferredToHandset_stub);
        connect_signal(bteca_proxy, TransferredFromHandset, _TransferredFromHandset_stub);
        connect_signal(bteca_proxy, ConnectedTimerStart, _ConnectedTimerStart_stub);
        connect_signal(bteca_proxy, ShowPSAPInfoInscription, _ShowPSAPInfoInscription_stub);
        connect_signal(bteca_proxy, SetTransferredValid, _SetTransferredValid_stub);
        connect_signal(bteca_proxy, NotifyCarPlaySession, _NotifyCarPlaySession_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t AbortCall()
    {
        ::DBus::CallMessage call;
        call.member("AbortCall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TransferToHandset()
    {
        ::DBus::CallMessage call;
        call.member("TransferToHandset");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TransferFromHandset()
    {
        ::DBus::CallMessage call;
        call.member("TransferFromHandset");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t BargeIntoCall()
    {
        ::DBus::CallMessage call;
        call.member("BargeIntoCall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetBTECAEnabledValue()
    {
        ::DBus::CallMessage call;
        call.member("GetBTECAEnabledValue");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetBTECAEnabledValue(const uint8_t& isBTECAenabled)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << isBTECAenabled;
        call.member("SetBTECAEnabledValue");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t IsBTECASupported()
    {
        ::DBus::CallMessage call;
        call.member("IsBTECASupported");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RetryEcall()
    {
        ::DBus::CallMessage call;
        call.member("RetryEcall");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ResetEnableSetting()
    {
        ::DBus::CallMessage call;
        call.member("ResetEnableSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void EnabledChange(const uint8_t& isBTECAenabled) = 0;
    virtual void CollisionDetected(const bool& phoneConnected) = 0;
    virtual void PhoneFoundStatus(const bool& found) = 0;
    virtual void CollisionDetectedTimerStart() = 0;
    virtual void CollisionDetectedTimerExpired() = 0;
    virtual void CallSuccess() = 0;
    virtual void CallNotSuccess(const bool& maxAttempts) = 0;
    virtual void AudioTransferredToPhone() = 0;
    virtual void AudioTransferredToCar() = 0;
    virtual void EndCall() = 0;
    virtual void EmergencyCallFailure() = 0;
    virtual void MP911EmergencyCallStatus(const int32_t& emergencyStatus) = 0;
    virtual void PhoneBTConnectionLost() = 0;
    virtual void TransferredToHandset(const bool& transferStaus) = 0;
    virtual void TransferredFromHandset(const bool& transferStaus, const bool& stillConnecting) = 0;
    virtual void ConnectedTimerStart() = 0;
    virtual void ShowPSAPInfoInscription(const bool& showInscription) = 0;
    virtual void SetTransferredValid(const bool& transferredValid) = 0;
    virtual void NotifyCarPlaySession(const bool& carPlaySession) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _EnabledChange_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t isBTECAenabled;
        ri >> isBTECAenabled;
        EnabledChange(isBTECAenabled);
    }
    void _CollisionDetected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool phoneConnected;
        ri >> phoneConnected;
        CollisionDetected(phoneConnected);
    }
    void _PhoneFoundStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool found;
        ri >> found;
        PhoneFoundStatus(found);
    }
    void _CollisionDetectedTimerStart_stub(const ::DBus::SignalMessage &sig)
    {
        CollisionDetectedTimerStart();
    }
    void _CollisionDetectedTimerExpired_stub(const ::DBus::SignalMessage &sig)
    {
        CollisionDetectedTimerExpired();
    }
    void _CallSuccess_stub(const ::DBus::SignalMessage &sig)
    {
        CallSuccess();
    }
    void _CallNotSuccess_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool maxAttempts;
        ri >> maxAttempts;
        CallNotSuccess(maxAttempts);
    }
    void _AudioTransferredToPhone_stub(const ::DBus::SignalMessage &sig)
    {
        AudioTransferredToPhone();
    }
    void _AudioTransferredToCar_stub(const ::DBus::SignalMessage &sig)
    {
        AudioTransferredToCar();
    }
    void _EndCall_stub(const ::DBus::SignalMessage &sig)
    {
        EndCall();
    }
    void _EmergencyCallFailure_stub(const ::DBus::SignalMessage &sig)
    {
        EmergencyCallFailure();
    }
    void _MP911EmergencyCallStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t emergencyStatus;
        ri >> emergencyStatus;
        MP911EmergencyCallStatus(emergencyStatus);
    }
    void _PhoneBTConnectionLost_stub(const ::DBus::SignalMessage &sig)
    {
        PhoneBTConnectionLost();
    }
    void _TransferredToHandset_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool transferStaus;
        ri >> transferStaus;
        TransferredToHandset(transferStaus);
    }
    void _TransferredFromHandset_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool transferStaus;
        ri >> transferStaus;
        bool stillConnecting;
        ri >> stillConnecting;
        TransferredFromHandset(transferStaus, stillConnecting);
    }
    void _ConnectedTimerStart_stub(const ::DBus::SignalMessage &sig)
    {
        ConnectedTimerStart();
    }
    void _ShowPSAPInfoInscription_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool showInscription;
        ri >> showInscription;
        ShowPSAPInfoInscription(showInscription);
    }
    void _SetTransferredValid_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool transferredValid;
        ri >> transferredValid;
        SetTransferredValid(transferredValid);
    }
    void _NotifyCarPlaySession_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool carPlaySession;
        ri >> carPlaySession;
        NotifyCarPlaySession(carPlaySession);
    }
};

} } 
namespace com {
namespace jci {

class pa_proxy
: public ::DBus::InterfaceProxy
{
public:

    pa_proxy()
    : ::DBus::InterfaceProxy("com.jci.pa")
    {
        connect_signal(pa_proxy, HftReadyStatus, _HftReadyStatus_stub);
        connect_signal(pa_proxy, PairingStatusResp, _PairingStatusResp_stub);
        connect_signal(pa_proxy, DeleteStatusResp, _DeleteStatusResp_stub);
        connect_signal(pa_proxy, SearchedDeviceListResp, _SearchedDeviceListResp_stub);
        connect_signal(pa_proxy, RequestedSearchListResp, _RequestedSearchListResp_stub);
        connect_signal(pa_proxy, AuthenticationResp, _AuthenticationResp_stub);
        connect_signal(pa_proxy, PairingPinCodeResp, _PairingPinCodeResp_stub);
        connect_signal(pa_proxy, PairingModuleResp, _PairingModuleResp_stub);
        connect_signal(pa_proxy, VehicleBtInformationResp, _VehicleBtInformationResp_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t StartPair(const uint32_t& pairMode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pairMode;
        call.member("StartPair");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AbortPair(const uint32_t& abortMode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << abortMode;
        call.member("AbortPair");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PairToSelectedDevice(const ::DBus::Struct< std::vector< uint8_t > >& btaddress)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << btaddress;
        call.member("PairToSelectedDevice");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PairNumericCompResponse(const bool& isPassecodeMatched)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << isPassecodeMatched;
        call.member("PairNumericCompResponse");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DeleteDevice(const uint32_t& deviceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << deviceId;
        call.member("DeleteDevice");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DeleteAllDevices()
    {
        ::DBus::CallMessage call;
        call.member("DeleteAllDevices");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RequestSearchDeviceList()
    {
        ::DBus::CallMessage call;
        call.member("RequestSearchDeviceList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetPairingPinCode()
    {
        ::DBus::CallMessage call;
        call.member("GetPairingPinCode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetPairingPinCode(const ::DBus::Struct< std::vector< uint8_t > >& pinCode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pinCode;
        call.member("SetPairingPinCode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetPairingModuleSettings()
    {
        ::DBus::CallMessage call;
        call.member("GetPairingModuleSettings");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RetrieveVehicleBtInfo()
    {
        ::DBus::CallMessage call;
        call.member("RetrieveVehicleBtInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void HftReadyStatus(const uint32_t& hftReady, const uint32_t& reasonCode) = 0;
    virtual void PairingStatusResp(const ::DBus::Struct< std::vector< uint8_t > >& paPairingStatusResp) = 0;
    virtual void DeleteStatusResp(const uint32_t& deleteStatus, const uint32_t& deviceId) = 0;
    virtual void SearchedDeviceListResp(const uint32_t& numOfDevices, const uint32_t& devIndex, const uint32_t& deviceClass, const ::DBus::Struct< std::vector< uint8_t > >& btaddress, const ::DBus::Struct< std::vector< uint8_t > >& btDeviceName) = 0;
    virtual void RequestedSearchListResp(const uint32_t& totalSearchedDevices, const ::DBus::Struct< std::vector< uint8_t > >& searchedDeviceList) = 0;
    virtual void AuthenticationResp() = 0;
    virtual void PairingPinCodeResp(const ::DBus::Struct< std::vector< uint8_t > >& pinCode) = 0;
    virtual void PairingModuleResp(const ::DBus::Struct< std::vector< uint8_t > >& paSettings) = 0;
    virtual void VehicleBtInformationResp(const ::DBus::Struct< std::vector< uint8_t > >& paVehicleInfo) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _HftReadyStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t hftReady;
        ri >> hftReady;
        uint32_t reasonCode;
        ri >> reasonCode;
        HftReadyStatus(hftReady, reasonCode);
    }
    void _PairingStatusResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > paPairingStatusResp;
        ri >> paPairingStatusResp;
        PairingStatusResp(paPairingStatusResp);
    }
    void _DeleteStatusResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t deleteStatus;
        ri >> deleteStatus;
        uint32_t deviceId;
        ri >> deviceId;
        DeleteStatusResp(deleteStatus, deviceId);
    }
    void _SearchedDeviceListResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t numOfDevices;
        ri >> numOfDevices;
        uint32_t devIndex;
        ri >> devIndex;
        uint32_t deviceClass;
        ri >> deviceClass;
        ::DBus::Struct< std::vector< uint8_t > > btaddress;
        ri >> btaddress;
        ::DBus::Struct< std::vector< uint8_t > > btDeviceName;
        ri >> btDeviceName;
        SearchedDeviceListResp(numOfDevices, devIndex, deviceClass, btaddress, btDeviceName);
    }
    void _RequestedSearchListResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t totalSearchedDevices;
        ri >> totalSearchedDevices;
        ::DBus::Struct< std::vector< uint8_t > > searchedDeviceList;
        ri >> searchedDeviceList;
        RequestedSearchListResp(totalSearchedDevices, searchedDeviceList);
    }
    void _AuthenticationResp_stub(const ::DBus::SignalMessage &sig)
    {
        AuthenticationResp();
    }
    void _PairingPinCodeResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > pinCode;
        ri >> pinCode;
        PairingPinCodeResp(pinCode);
    }
    void _PairingModuleResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > paSettings;
        ri >> paSettings;
        PairingModuleResp(paSettings);
    }
    void _VehicleBtInformationResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > paVehicleInfo;
        ri >> paVehicleInfo;
        VehicleBtInformationResp(paVehicleInfo);
    }
};

} } 
namespace com {
namespace jci {

class bds_proxy
: public ::DBus::InterfaceProxy
{
public:

    bds_proxy()
    : ::DBus::InterfaceProxy("com.jci.bds")
    {
        connect_signal(bds_proxy, Signaltest_cb, _Signaltest_cb_stub);
        connect_signal(bds_proxy, SignalReady_cb, _SignalReady_cb_stub);
        connect_signal(bds_proxy, SignalNotReady_cb, _SignalNotReady_cb_stub);
        connect_signal(bds_proxy, SignalDeviceDeleteInProgress_cb, _SignalDeviceDeleteInProgress_cb_stub);
        connect_signal(bds_proxy, SignalDeviceDeleted_cb, _SignalDeviceDeleted_cb_stub);
        connect_signal(bds_proxy, SignalDeviceDeleteAllInProgress_cb, _SignalDeviceDeleteAllInProgress_cb_stub);
        connect_signal(bds_proxy, SignalDeviceDeleteAll_cb, _SignalDeviceDeleteAll_cb_stub);
        connect_signal(bds_proxy, SignalDeviceDisconnectedAll_cb, _SignalDeviceDisconnectedAll_cb_stub);
        connect_signal(bds_proxy, SignalDeviceDisconnectionProgress_cb, _SignalDeviceDisconnectionProgress_cb_stub);
        connect_signal(bds_proxy, SignalDeviceInquiryResult_cb, _SignalDeviceInquiryResult_cb_stub);
        connect_signal(bds_proxy, SignalDeviceNameStarted_cb, _SignalDeviceNameStarted_cb_stub);
        connect_signal(bds_proxy, SignalDeviceNameSet_cb, _SignalDeviceNameSet_cb_stub);
        connect_signal(bds_proxy, SignalDeviceNameGet_cb, _SignalDeviceNameGet_cb_stub);
        connect_signal(bds_proxy, SignalDeviceAccessibilityGet_cb, _SignalDeviceAccessibilityGet_cb_stub);
        connect_signal(bds_proxy, SignalDevicePair_cb, _SignalDevicePair_cb_stub);
        connect_signal(bds_proxy, SignalDeviceServiceDiscovery_cb, _SignalDeviceServiceDiscovery_cb_stub);
        connect_signal(bds_proxy, SignalDeviceWrittenAll_cb, _SignalDeviceWrittenAll_cb_stub);
        connect_signal(bds_proxy, SignalDeviceAuthenticate_cb, _SignalDeviceAuthenticate_cb_stub);
        connect_signal(bds_proxy, SignalRemoteSupportedFeatures_cb, _SignalRemoteSupportedFeatures_cb_stub);
        connect_signal(bds_proxy, SignalDeviceGetConnectedDevices_cb, _SignalDeviceGetConnectedDevices_cb_stub);
        connect_signal(bds_proxy, SignalDeviceLocalOobData_cb, _SignalDeviceLocalOobData_cb_stub);
        connect_signal(bds_proxy, SignalDeviceExtendedSearchResult_cb, _SignalDeviceExtendedSearchResult_cb_stub);
        connect_signal(bds_proxy, SignalServiceEnableStatus_cb, _SignalServiceEnableStatus_cb_stub);
        connect_signal(bds_proxy, SignalServiceDisableStatus_cb, _SignalServiceDisableStatus_cb_stub);
        connect_signal(bds_proxy, SignalConnected_cb, _SignalConnected_cb_stub);
        connect_signal(bds_proxy, SignalDisconnected_cb, _SignalDisconnected_cb_stub);
        connect_signal(bds_proxy, SignalServiceFeatures_cb, _SignalServiceFeatures_cb_stub);
        connect_signal(bds_proxy, SignalServiceConfiguration_cb, _SignalServiceConfiguration_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkAppChange_cb, _SignalAudioSinkAppChange_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkBatteryStatusChange_cb, _SignalAudioSinkBatteryStatusChange_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkBiased_cb, _SignalAudioSinkBiased_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkBrowseConnect_cb, _SignalAudioSinkBrowseConnect_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkBrowseDisonnect_cb, _SignalAudioSinkBrowseDisonnect_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkBrowseFolderChange_cb, _SignalAudioSinkBrowseFolderChange_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkBrowseFolderContent_cb, _SignalAudioSinkBrowseFolderContent_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkBrowseFolderContents_cb, _SignalAudioSinkBrowseFolderContents_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkBrowseSearch_cb, _SignalAudioSinkBrowseSearch_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkBrowseUidsChange_cb, _SignalAudioSinkBrowseUidsChange_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkContentAddToNowPlaying_cb, _SignalAudioSinkContentAddToNowPlaying_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkContentAttributes_cb, _SignalAudioSinkContentAttributes_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkContentPlay_cb, _SignalAudioSinkContentPlay_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkMediaPosition_cb, _SignalAudioSinkMediaPosition_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkPanelOperation_cb, _SignalAudioSinkPanelOperation_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkPlaybackStatusChange_cb, _SignalAudioSinkPlaybackStatusChange_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkPlayerAddressedChange_cb, _SignalAudioSinkPlayerAddressedChange_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkPlayerBrowsedChange_cb, _SignalAudioSinkPlayerBrowsedChange_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkPlayerItem_cb, _SignalAudioSinkPlayerItem_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkPlayerItems_cb, _SignalAudioSinkPlayerItems_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkPlayerItemsChange_cb, _SignalAudioSinkPlayerItemsChange_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkPlayerNowContentChange_cb, _SignalAudioSinkPlayerNowContentChange_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkPlayerVolumeChange_cb, _SignalAudioSinkPlayerVolumeChange_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkStreamClosed_cb, _SignalAudioSinkStreamClosed_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkStreamConfigured_cb, _SignalAudioSinkStreamConfigured_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkStreamLine_cb, _SignalAudioSinkStreamLine_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkStreamMuted_cb, _SignalAudioSinkStreamMuted_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkStreamOpened_cb, _SignalAudioSinkStreamOpened_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkSupportedChanges_cb, _SignalAudioSinkSupportedChanges_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkSupportedPlayerSetting_cb, _SignalAudioSinkSupportedPlayerSetting_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkSystemStatusChange_cb, _SignalAudioSinkSystemStatusChange_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkTrackChange_cb, _SignalAudioSinkTrackChange_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkTrackEnd_cb, _SignalAudioSinkTrackEnd_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkTrackMetaData_cb, _SignalAudioSinkTrackMetaData_cb_stub);
        connect_signal(bds_proxy, SignalAudioSinkTrackStart_cb, _SignalAudioSinkTrackStart_cb_stub);
        connect_signal(bds_proxy, SignalCallClientCallList_cb, _SignalCallClientCallList_cb_stub);
        connect_signal(bds_proxy, SignalCallClientStatus_cb, _SignalCallClientStatus_cb_stub);
        connect_signal(bds_proxy, SignalCallClientAudioConnect_cb, _SignalCallClientAudioConnect_cb_stub);
        connect_signal(bds_proxy, SignalCallClientAudioDisconnect_cb, _SignalCallClientAudioDisconnect_cb_stub);
        connect_signal(bds_proxy, SignalCallClientIndicator_cb, _SignalCallClientIndicator_cb_stub);
        connect_signal(bds_proxy, SignalCallClientOperator_cb, _SignalCallClientOperator_cb_stub);
        connect_signal(bds_proxy, SignalCallClientSubscriber_cb, _SignalCallClientSubscriber_cb_stub);
        connect_signal(bds_proxy, SignalCallClientMicVolumeChange_cb, _SignalCallClientMicVolumeChange_cb_stub);
        connect_signal(bds_proxy, SignalCallClientSpeakerVolumeChange_cb, _SignalCallClientSpeakerVolumeChange_cb_stub);
        connect_signal(bds_proxy, SignalCallClientActivateVoiceDial_cb, _SignalCallClientActivateVoiceDial_cb_stub);
        connect_signal(bds_proxy, SignalCallClientDeActivateVoiceDial_cb, _SignalCallClientDeActivateVoiceDial_cb_stub);
        connect_signal(bds_proxy, SignalCallClientSiriSupportStatus_cb, _SignalCallClientSiriSupportStatus_cb_stub);
        connect_signal(bds_proxy, SignalCallClientSiriEyesFreeMode_cb, _SignalCallClientSiriEyesFreeMode_cb_stub);
        connect_signal(bds_proxy, SignalCallClientSiriDisableNoiseReduction_cb, _SignalCallClientSiriDisableNoiseReduction_cb_stub);
        connect_signal(bds_proxy, SignalPhoneStatus_cb, _SignalPhoneStatus_cb_stub);
        connect_signal(bds_proxy, SignalCallClientCmdError_cb, _SignalCallClientCmdError_cb_stub);
        connect_signal(bds_proxy, SignalCallClientScoCodecId_cb, _SignalCallClientScoCodecId_cb_stub);
        connect_signal(bds_proxy, SignalMessageClientConfigured_cb, _SignalMessageClientConfigured_cb_stub);
        connect_signal(bds_proxy, SignalMessageClientFolderListing_cb, _SignalMessageClientFolderListing_cb_stub);
        connect_signal(bds_proxy, SignalMessageClientMessageDeleted_cb, _SignalMessageClientMessageDeleted_cb_stub);
        connect_signal(bds_proxy, SignalMessageClientMessageGotten_cb, _SignalMessageClientMessageGotten_cb_stub);
        connect_signal(bds_proxy, SignalMessageClientMessageListing_cb, _SignalMessageClientMessageListing_cb_stub);
        connect_signal(bds_proxy, SignalMessageClientMessageNotification_cb, _SignalMessageClientMessageNotification_cb_stub);
        connect_signal(bds_proxy, SignalMessageClientMessagePushed_cb, _SignalMessageClientMessagePushed_cb_stub);
        connect_signal(bds_proxy, SignalMessageClientMessageSetStatus_cb, _SignalMessageClientMessageSetStatus_cb_stub);
        connect_signal(bds_proxy, SignalNetworkClientConnected_cb, _SignalNetworkClientConnected_cb_stub);
        connect_signal(bds_proxy, SignalNetworkClientDisconnected_cb, _SignalNetworkClientDisconnected_cb_stub);
        connect_signal(bds_proxy, SignalPimClientImportStatus_cb, _SignalPimClientImportStatus_cb_stub);
        connect_signal(bds_proxy, SignalFileServerInfoEvent_cb, _SignalFileServerInfoEvent_cb_stub);
        connect_signal(bds_proxy, SignalFileServerFileAcceptanceStatus_cb, _SignalFileServerFileAcceptanceStatus_cb_stub);
        connect_signal(bds_proxy, SignalFileServerDataFileInProgressStatus_cb, _SignalFileServerDataFileInProgressStatus_cb_stub);
        connect_signal(bds_proxy, SignalServiceLessAudioConnectStatus_cb, _SignalServiceLessAudioConnectStatus_cb_stub);
        connect_signal(bds_proxy, SignalServiceLessAudioDisconnectStatus_cb, _SignalServiceLessAudioDisconnectStatus_cb_stub);
        connect_signal(bds_proxy, SignalServiceLessAclConnectStatus_cb, _SignalServiceLessAclConnectStatus_cb_stub);
        connect_signal(bds_proxy, SignalServiceLessAclDisconnectStatus_cb, _SignalServiceLessAclDisconnectStatus_cb_stub);
        connect_signal(bds_proxy, SignalBTChipFailure_cb, _SignalBTChipFailure_cb_stub);
        connect_signal(bds_proxy, SignalDeviceAddressGet_cb, _SignalDeviceAddressGet_cb_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint32_t SendCommand(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << type;
        wi << data;
        call.member("SendCommand");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void TestMethod(const uint32_t& type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << type;
        call.member("TestMethod");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void Signaltest_cb(const uint32_t& type) = 0;
    virtual void SignalReady_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalNotReady_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceDeleteInProgress_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceDeleted_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceDeleteAllInProgress_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceDeleteAll_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceDisconnectedAll_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceDisconnectionProgress_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceInquiryResult_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceNameStarted_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceNameSet_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceNameGet_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceAccessibilityGet_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDevicePair_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceServiceDiscovery_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceWrittenAll_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceAuthenticate_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalRemoteSupportedFeatures_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceGetConnectedDevices_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceLocalOobData_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceExtendedSearchResult_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalServiceEnableStatus_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalServiceDisableStatus_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalConnected_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDisconnected_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalServiceFeatures_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalServiceConfiguration_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkAppChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkBatteryStatusChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkBiased_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkBrowseConnect_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkBrowseDisonnect_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkBrowseFolderChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkBrowseFolderContent_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkBrowseFolderContents_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkBrowseSearch_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkBrowseUidsChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkContentAddToNowPlaying_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkContentAttributes_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkContentPlay_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkMediaPosition_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkPanelOperation_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkPlaybackStatusChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkPlayerAddressedChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkPlayerBrowsedChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkPlayerItem_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkPlayerItems_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkPlayerItemsChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkPlayerNowContentChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkPlayerVolumeChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkStreamClosed_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkStreamConfigured_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkStreamLine_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkStreamMuted_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkStreamOpened_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkSupportedChanges_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkSupportedPlayerSetting_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkSystemStatusChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkTrackChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkTrackEnd_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkTrackMetaData_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalAudioSinkTrackStart_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientCallList_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientStatus_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientAudioConnect_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientAudioDisconnect_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientIndicator_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientOperator_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientSubscriber_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientMicVolumeChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientSpeakerVolumeChange_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientActivateVoiceDial_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientDeActivateVoiceDial_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientSiriSupportStatus_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientSiriEyesFreeMode_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientSiriDisableNoiseReduction_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalPhoneStatus_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientCmdError_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalCallClientScoCodecId_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalMessageClientConfigured_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalMessageClientFolderListing_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalMessageClientMessageDeleted_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalMessageClientMessageGotten_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalMessageClientMessageListing_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalMessageClientMessageNotification_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalMessageClientMessagePushed_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalMessageClientMessageSetStatus_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalNetworkClientConnected_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalNetworkClientDisconnected_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalPimClientImportStatus_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalFileServerInfoEvent_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalFileServerFileAcceptanceStatus_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalFileServerDataFileInProgressStatus_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalServiceLessAudioConnectStatus_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalServiceLessAudioDisconnectStatus_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalServiceLessAclConnectStatus_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalServiceLessAclDisconnectStatus_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalBTChipFailure_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;
    virtual void SignalDeviceAddressGet_cb(const uint32_t& type, const ::DBus::Struct< std::vector< uint8_t > >& data) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Signaltest_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        Signaltest_cb(type);
    }
    void _SignalReady_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalReady_cb(type, data);
    }
    void _SignalNotReady_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalNotReady_cb(type, data);
    }
    void _SignalDeviceDeleteInProgress_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceDeleteInProgress_cb(type, data);
    }
    void _SignalDeviceDeleted_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceDeleted_cb(type, data);
    }
    void _SignalDeviceDeleteAllInProgress_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceDeleteAllInProgress_cb(type, data);
    }
    void _SignalDeviceDeleteAll_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceDeleteAll_cb(type, data);
    }
    void _SignalDeviceDisconnectedAll_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceDisconnectedAll_cb(type, data);
    }
    void _SignalDeviceDisconnectionProgress_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceDisconnectionProgress_cb(type, data);
    }
    void _SignalDeviceInquiryResult_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceInquiryResult_cb(type, data);
    }
    void _SignalDeviceNameStarted_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceNameStarted_cb(type, data);
    }
    void _SignalDeviceNameSet_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceNameSet_cb(type, data);
    }
    void _SignalDeviceNameGet_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceNameGet_cb(type, data);
    }
    void _SignalDeviceAccessibilityGet_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceAccessibilityGet_cb(type, data);
    }
    void _SignalDevicePair_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDevicePair_cb(type, data);
    }
    void _SignalDeviceServiceDiscovery_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceServiceDiscovery_cb(type, data);
    }
    void _SignalDeviceWrittenAll_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceWrittenAll_cb(type, data);
    }
    void _SignalDeviceAuthenticate_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceAuthenticate_cb(type, data);
    }
    void _SignalRemoteSupportedFeatures_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalRemoteSupportedFeatures_cb(type, data);
    }
    void _SignalDeviceGetConnectedDevices_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceGetConnectedDevices_cb(type, data);
    }
    void _SignalDeviceLocalOobData_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceLocalOobData_cb(type, data);
    }
    void _SignalDeviceExtendedSearchResult_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceExtendedSearchResult_cb(type, data);
    }
    void _SignalServiceEnableStatus_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalServiceEnableStatus_cb(type, data);
    }
    void _SignalServiceDisableStatus_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalServiceDisableStatus_cb(type, data);
    }
    void _SignalConnected_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalConnected_cb(type, data);
    }
    void _SignalDisconnected_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDisconnected_cb(type, data);
    }
    void _SignalServiceFeatures_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalServiceFeatures_cb(type, data);
    }
    void _SignalServiceConfiguration_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalServiceConfiguration_cb(type, data);
    }
    void _SignalAudioSinkAppChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkAppChange_cb(type, data);
    }
    void _SignalAudioSinkBatteryStatusChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkBatteryStatusChange_cb(type, data);
    }
    void _SignalAudioSinkBiased_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkBiased_cb(type, data);
    }
    void _SignalAudioSinkBrowseConnect_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkBrowseConnect_cb(type, data);
    }
    void _SignalAudioSinkBrowseDisonnect_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkBrowseDisonnect_cb(type, data);
    }
    void _SignalAudioSinkBrowseFolderChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkBrowseFolderChange_cb(type, data);
    }
    void _SignalAudioSinkBrowseFolderContent_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkBrowseFolderContent_cb(type, data);
    }
    void _SignalAudioSinkBrowseFolderContents_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkBrowseFolderContents_cb(type, data);
    }
    void _SignalAudioSinkBrowseSearch_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkBrowseSearch_cb(type, data);
    }
    void _SignalAudioSinkBrowseUidsChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkBrowseUidsChange_cb(type, data);
    }
    void _SignalAudioSinkContentAddToNowPlaying_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkContentAddToNowPlaying_cb(type, data);
    }
    void _SignalAudioSinkContentAttributes_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkContentAttributes_cb(type, data);
    }
    void _SignalAudioSinkContentPlay_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkContentPlay_cb(type, data);
    }
    void _SignalAudioSinkMediaPosition_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkMediaPosition_cb(type, data);
    }
    void _SignalAudioSinkPanelOperation_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkPanelOperation_cb(type, data);
    }
    void _SignalAudioSinkPlaybackStatusChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkPlaybackStatusChange_cb(type, data);
    }
    void _SignalAudioSinkPlayerAddressedChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkPlayerAddressedChange_cb(type, data);
    }
    void _SignalAudioSinkPlayerBrowsedChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkPlayerBrowsedChange_cb(type, data);
    }
    void _SignalAudioSinkPlayerItem_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkPlayerItem_cb(type, data);
    }
    void _SignalAudioSinkPlayerItems_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkPlayerItems_cb(type, data);
    }
    void _SignalAudioSinkPlayerItemsChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkPlayerItemsChange_cb(type, data);
    }
    void _SignalAudioSinkPlayerNowContentChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkPlayerNowContentChange_cb(type, data);
    }
    void _SignalAudioSinkPlayerVolumeChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkPlayerVolumeChange_cb(type, data);
    }
    void _SignalAudioSinkStreamClosed_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkStreamClosed_cb(type, data);
    }
    void _SignalAudioSinkStreamConfigured_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkStreamConfigured_cb(type, data);
    }
    void _SignalAudioSinkStreamLine_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkStreamLine_cb(type, data);
    }
    void _SignalAudioSinkStreamMuted_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkStreamMuted_cb(type, data);
    }
    void _SignalAudioSinkStreamOpened_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkStreamOpened_cb(type, data);
    }
    void _SignalAudioSinkSupportedChanges_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkSupportedChanges_cb(type, data);
    }
    void _SignalAudioSinkSupportedPlayerSetting_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkSupportedPlayerSetting_cb(type, data);
    }
    void _SignalAudioSinkSystemStatusChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkSystemStatusChange_cb(type, data);
    }
    void _SignalAudioSinkTrackChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkTrackChange_cb(type, data);
    }
    void _SignalAudioSinkTrackEnd_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkTrackEnd_cb(type, data);
    }
    void _SignalAudioSinkTrackMetaData_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkTrackMetaData_cb(type, data);
    }
    void _SignalAudioSinkTrackStart_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalAudioSinkTrackStart_cb(type, data);
    }
    void _SignalCallClientCallList_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientCallList_cb(type, data);
    }
    void _SignalCallClientStatus_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientStatus_cb(type, data);
    }
    void _SignalCallClientAudioConnect_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientAudioConnect_cb(type, data);
    }
    void _SignalCallClientAudioDisconnect_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientAudioDisconnect_cb(type, data);
    }
    void _SignalCallClientIndicator_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientIndicator_cb(type, data);
    }
    void _SignalCallClientOperator_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientOperator_cb(type, data);
    }
    void _SignalCallClientSubscriber_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientSubscriber_cb(type, data);
    }
    void _SignalCallClientMicVolumeChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientMicVolumeChange_cb(type, data);
    }
    void _SignalCallClientSpeakerVolumeChange_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientSpeakerVolumeChange_cb(type, data);
    }
    void _SignalCallClientActivateVoiceDial_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientActivateVoiceDial_cb(type, data);
    }
    void _SignalCallClientDeActivateVoiceDial_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientDeActivateVoiceDial_cb(type, data);
    }
    void _SignalCallClientSiriSupportStatus_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientSiriSupportStatus_cb(type, data);
    }
    void _SignalCallClientSiriEyesFreeMode_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientSiriEyesFreeMode_cb(type, data);
    }
    void _SignalCallClientSiriDisableNoiseReduction_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientSiriDisableNoiseReduction_cb(type, data);
    }
    void _SignalPhoneStatus_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalPhoneStatus_cb(type, data);
    }
    void _SignalCallClientCmdError_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientCmdError_cb(type, data);
    }
    void _SignalCallClientScoCodecId_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalCallClientScoCodecId_cb(type, data);
    }
    void _SignalMessageClientConfigured_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalMessageClientConfigured_cb(type, data);
    }
    void _SignalMessageClientFolderListing_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalMessageClientFolderListing_cb(type, data);
    }
    void _SignalMessageClientMessageDeleted_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalMessageClientMessageDeleted_cb(type, data);
    }
    void _SignalMessageClientMessageGotten_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalMessageClientMessageGotten_cb(type, data);
    }
    void _SignalMessageClientMessageListing_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalMessageClientMessageListing_cb(type, data);
    }
    void _SignalMessageClientMessageNotification_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalMessageClientMessageNotification_cb(type, data);
    }
    void _SignalMessageClientMessagePushed_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalMessageClientMessagePushed_cb(type, data);
    }
    void _SignalMessageClientMessageSetStatus_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalMessageClientMessageSetStatus_cb(type, data);
    }
    void _SignalNetworkClientConnected_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalNetworkClientConnected_cb(type, data);
    }
    void _SignalNetworkClientDisconnected_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalNetworkClientDisconnected_cb(type, data);
    }
    void _SignalPimClientImportStatus_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalPimClientImportStatus_cb(type, data);
    }
    void _SignalFileServerInfoEvent_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalFileServerInfoEvent_cb(type, data);
    }
    void _SignalFileServerFileAcceptanceStatus_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalFileServerFileAcceptanceStatus_cb(type, data);
    }
    void _SignalFileServerDataFileInProgressStatus_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalFileServerDataFileInProgressStatus_cb(type, data);
    }
    void _SignalServiceLessAudioConnectStatus_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalServiceLessAudioConnectStatus_cb(type, data);
    }
    void _SignalServiceLessAudioDisconnectStatus_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalServiceLessAudioDisconnectStatus_cb(type, data);
    }
    void _SignalServiceLessAclConnectStatus_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalServiceLessAclConnectStatus_cb(type, data);
    }
    void _SignalServiceLessAclDisconnectStatus_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalServiceLessAclDisconnectStatus_cb(type, data);
    }
    void _SignalBTChipFailure_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalBTChipFailure_cb(type, data);
    }
    void _SignalDeviceAddressGet_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t type;
        ri >> type;
        ::DBus::Struct< std::vector< uint8_t > > data;
        ri >> data;
        SignalDeviceAddressGet_cb(type, data);
    }
};

} } 
namespace com {
namespace jci {

class opera_IHU_PRIMARY_proxy
: public ::DBus::InterfaceProxy
{
public:

    opera_IHU_PRIMARY_proxy()
    : ::DBus::InterfaceProxy("com.jci.opera_IHU_PRIMARY")
    {
        connect_signal(opera_IHU_PRIMARY_proxy, ReportError, _ReportError_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void TerminateOpera()
    {
        ::DBus::CallMessage call;
        call.member("TerminateOpera");
        ::DBus::Message ret = invoke_method (call);
    }

    void Navigate()
    {
        ::DBus::CallMessage call;
        call.member("Navigate");
        ::DBus::Message ret = invoke_method (call);
    }

    void GoBack()
    {
        ::DBus::CallMessage call;
        call.member("GoBack");
        ::DBus::Message ret = invoke_method (call);
    }

    void GoForward()
    {
        ::DBus::CallMessage call;
        call.member("GoForward");
        ::DBus::Message ret = invoke_method (call);
    }

    void Refresh()
    {
        ::DBus::CallMessage call;
        call.member("Refresh");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void ReportError(const std::string& errorData) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ReportError_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string errorData;
        ri >> errorData;
        ReportError(errorData);
    }
};

} } 
namespace com {
namespace jci {

class direct_proxy
: public ::DBus::InterfaceProxy
{
public:

    direct_proxy()
    : ::DBus::InterfaceProxy("com.jci.direct")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::string GetDirectConnection()
    {
        ::DBus::CallMessage call;
        call.member("GetDirectConnection");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
namespace com {
namespace jci {
namespace cpp {
namespace dbus {

class DbusConnection_proxy
: public ::DBus::InterfaceProxy
{
public:

    DbusConnection_proxy()
    : ::DBus::InterfaceProxy("com.jci.cpp.dbus.DbusConnection")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Wiki(const uint32_t& timeout)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << timeout;
        call.member("Wiki");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
namespace com {
namespace jci {
namespace cpp {
namespace service {

class Service_proxy
: public ::DBus::InterfaceProxy
{
public:

    Service_proxy()
    : ::DBus::InterfaceProxy("com.jci.cpp.service.Service")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void ping(const uint32_t& timeout)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << timeout;
        call.member("ping");
        ::DBus::Message ret = invoke_method (call);
    }

    void save(const uint32_t& timeout)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << timeout;
        call.member("save");
        ::DBus::Message ret = invoke_method (call);
    }

    void start(const uint32_t& timeout)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << timeout;
        call.member("start");
        ::DBus::Message ret = invoke_method (call);
    }

    void stop(const uint32_t& timeout)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << timeout;
        call.member("stop");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
namespace com {
namespace jci {
namespace cpp {
namespace settings {

class Registry_proxy
: public ::DBus::InterfaceProxy
{
public:

    Registry_proxy()
    : ::DBus::InterfaceProxy("com.jci.cpp.settings.Registry")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void addNode(const std::string& path)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << path;
        call.member("addNode");
        ::DBus::Message ret = invoke_method (call);
    }

    void getNode(const std::string& path)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << path;
        call.member("getNode");
        ::DBus::Message ret = invoke_method (call);
    }

    void restoreNode(const std::string& path)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << path;
        call.member("restoreNode");
        ::DBus::Message ret = invoke_method (call);
    }

    void setNode(const std::string& path)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << path;
        call.member("setNode");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
namespace com {
namespace jci {
namespace cpp {
namespace vbi {

class Amplifier_proxy
: public ::DBus::InterfaceProxy
{
public:

    Amplifier_proxy()
    : ::DBus::InterfaceProxy("com.jci.cpp.vbi.Amplifier")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint32_t getVolume()
    {
        ::DBus::CallMessage call;
        call.member("getVolume");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void setVolume(const uint32_t& level)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << level;
        call.member("setVolume");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
namespace com {
namespace jci {
namespace cpp {
namespace vbi {

class Bcm_proxy
: public ::DBus::InterfaceProxy
{
public:

    Bcm_proxy()
    : ::DBus::InterfaceProxy("com.jci.cpp.vbi.Bcm")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint32_t getSpeed()
    {
        ::DBus::CallMessage call;
        call.member("getSpeed");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t getBoogie()
    {
        ::DBus::CallMessage call;
        call.member("getBoogie");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
namespace com {
namespace jci {
namespace obs {
namespace stitcher {

class hmi_proxy
: public ::DBus::InterfaceProxy
{
public:

    hmi_proxy()
    : ::DBus::InterfaceProxy("com.jci.obs.stitcher.hmi")
    {
        connect_signal(hmi_proxy, SessionDestroyed, _SessionDestroyed_stub);
        connect_signal(hmi_proxy, PlaybackUpdateStatus, _PlaybackUpdateStatus_stub);
        connect_signal(hmi_proxy, UpdateInfo, _UpdateInfo_stub);
        connect_signal(hmi_proxy, UpdateList, _UpdateList_stub);
        connect_signal(hmi_proxy, UpdateNotificationText, _UpdateNotificationText_stub);
        connect_signal(hmi_proxy, BookmarkList, _BookmarkList_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void ListSessions(int32_t& statusId, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string > > >& sessions)
    {
        ::DBus::CallMessage call;
        call.member("ListSessions");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> sessions;
    }

    void ListAttachedClients(const uint32_t& sessionId, int32_t& statusId, ::DBus::Struct< std::vector< std::string > >& clients)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("ListAttachedClients");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> clients;
    }

    int32_t AttachToSession(const uint32_t& sessionId, const std::string& clientName)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << clientName;
        call.member("AttachToSession");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DetachFromSession(const uint32_t& sessionId, const std::string& clientName)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << clientName;
        call.member("DetachFromSession");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetElapsedPolling(const uint32_t& sessionId, const uint8_t& groupType, const uint32_t& timeMs)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << groupType;
        wi << timeMs;
        call.member("SetElapsedPolling");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetResource(const uint32_t& sessionId, const uint8_t& groupType, const uint64_t& groupId, const uint32_t& resourceId, int32_t& statusId, std::string& filePath)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << groupType;
        wi << groupId;
        wi << resourceId;
        call.member("GetResource");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> filePath;
    }

    int32_t ReleaseResource(const uint32_t& sessionId, const uint32_t& resourceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << resourceId;
        call.member("ReleaseResource");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void StationGetListId(const uint32_t& sessionId, const uint32_t& parentId, const uint32_t& startPosition, const uint32_t& numberOfStations, int32_t& statusId, int32_t& total, ::DBus::Struct< std::vector< uint64_t > >& resStationId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << parentId;
        wi << startPosition;
        wi << numberOfStations;
        call.member("StationGetListId");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> total;
        ri >> resStationId;
    }

    void StationGetAllInfo(const uint32_t& sessionId, const uint64_t& stationId, int32_t& statusId, ::DBus::Struct< bool, std::string, std::string, std::string, std::string, ::DBus::Struct< uint32_t, uint32_t >, uint32_t, uint32_t, uint32_t >& stationAllInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << stationId;
        call.member("StationGetAllInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> stationAllInfo;
    }

    void TrackGetAllInfo(const uint32_t& sessionId, const uint64_t& trackId, int32_t& statusId, ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, ::DBus::Struct< uint32_t, uint32_t >, uint32_t, uint32_t, uint32_t, uint32_t, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string > > >, uint32_t, uint32_t, uint64_t, uint32_t >& trackAllInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << trackId;
        call.member("TrackGetAllInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> trackAllInfo;
    }

    int32_t Bookmark(const uint32_t& sessionId, const uint8_t& listType, const uint8_t& type, const uint64_t& id, const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << listType;
        wi << type;
        wi << id;
        wi << name;
        call.member("Bookmark");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void RequestPlaybackUpdateStatus(const uint32_t& sessionId, int32_t& status, uint8_t& playbackState, uint64_t& trackId, uint64_t& stationId, uint32_t& elapsedTime, uint32_t& buffering)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("RequestPlaybackUpdateStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> status;
        ri >> playbackState;
        ri >> trackId;
        ri >> stationId;
        ri >> elapsedTime;
        ri >> buffering;
    }

    int32_t SelectFavourites(const uint32_t& sessionId, const uint8_t& groupType, const uint64_t& id, const ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string > > >& actions)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << groupType;
        wi << id;
        wi << actions;
        call.member("SelectFavourites");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DeleteBookmark(const uint32_t& sessionId, const uint8_t& listType, const uint8_t& type, const uint64_t& id, const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << listType;
        wi << type;
        wi << id;
        wi << name;
        call.member("DeleteBookmark");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void StationGetListIdsAndNames(const uint32_t& sessionId, const uint32_t& parentId, const uint32_t& startPosition, const uint32_t& numberOfStations, int32_t& statusId, int32_t& total, ::DBus::Struct< std::vector< ::DBus::Struct< uint64_t, uint32_t, std::string > > >& resStationIdsFlagsAndNames)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << parentId;
        wi << startPosition;
        wi << numberOfStations;
        call.member("StationGetListIdsAndNames");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> total;
        ri >> resStationIdsFlagsAndNames;
    }


public:

    /* signal handlers for this interface
     */
    virtual void SessionDestroyed(const uint32_t& sessionId, const uint32_t& reasonId) = 0;
    virtual void PlaybackUpdateStatus(const uint32_t& sessionId, const uint8_t& playbackState, const uint64_t& trackId, const uint64_t& stationId, const uint32_t& elapsedTime, const uint32_t& buffering) = 0;
    virtual void UpdateInfo(const uint32_t& sessionId, const uint8_t& type, const uint64_t& id, const uint8_t& infoUpdated, const uint64_t& data) = 0;
    virtual void UpdateList(const uint32_t& sessionId, const uint8_t& type, const uint64_t& id) = 0;
    virtual void UpdateNotificationText(const uint32_t& sessionId, const uint8_t& type, const std::string& text, const uint32_t& duration) = 0;
    virtual void BookmarkList(const uint32_t& sessionId, const uint32_t& bookmarkListType, const ::DBus::Struct< std::vector< std::string > >& bookmarkListData) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _SessionDestroyed_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint32_t reasonId;
        ri >> reasonId;
        SessionDestroyed(sessionId, reasonId);
    }
    void _PlaybackUpdateStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint8_t playbackState;
        ri >> playbackState;
        uint64_t trackId;
        ri >> trackId;
        uint64_t stationId;
        ri >> stationId;
        uint32_t elapsedTime;
        ri >> elapsedTime;
        uint32_t buffering;
        ri >> buffering;
        PlaybackUpdateStatus(sessionId, playbackState, trackId, stationId, elapsedTime, buffering);
    }
    void _UpdateInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint8_t type;
        ri >> type;
        uint64_t id;
        ri >> id;
        uint8_t infoUpdated;
        ri >> infoUpdated;
        uint64_t data;
        ri >> data;
        UpdateInfo(sessionId, type, id, infoUpdated, data);
    }
    void _UpdateList_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint8_t type;
        ri >> type;
        uint64_t id;
        ri >> id;
        UpdateList(sessionId, type, id);
    }
    void _UpdateNotificationText_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint8_t type;
        ri >> type;
        std::string text;
        ri >> text;
        uint32_t duration;
        ri >> duration;
        UpdateNotificationText(sessionId, type, text, duration);
    }
    void _BookmarkList_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint32_t bookmarkListType;
        ri >> bookmarkListType;
        ::DBus::Struct< std::vector< std::string > > bookmarkListData;
        ri >> bookmarkListData;
        BookmarkList(sessionId, bookmarkListType, bookmarkListData);
    }
};

} } } } 
namespace com {
namespace jci {
namespace obs {
namespace stitcher {

class svc_proxy
: public ::DBus::InterfaceProxy
{
public:

    svc_proxy()
    : ::DBus::InterfaceProxy("com.jci.obs.stitcher.svc")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void ConnectUsingPseudoTerminal(const std::string& pseudoTerminal, const std::string& sessionName, int32_t& status, uint32_t& sessionId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pseudoTerminal;
        wi << sessionName;
        call.member("ConnectUsingPseudoTerminal");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> status;
        ri >> sessionId;
    }

    int32_t Disconnect(const uint32_t& sessionId, const uint32_t& reasonId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << reasonId;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Command(const uint32_t& sessionId, const uint8_t& command, const uint8_t& groupType, const uint64_t& groupId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << command;
        wi << groupType;
        wi << groupId;
        call.member("Command");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Rate(const uint32_t& sessionId, const uint8_t& type, const uint64_t& id, const uint8_t& rate, const bool& isRelative)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << type;
        wi << id;
        wi << rate;
        wi << isRelative;
        call.member("Rate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
namespace com {
namespace jci {

class vuicore_proxy
: public ::DBus::InterfaceProxy
{
public:

    vuicore_proxy()
    : ::DBus::InterfaceProxy("com.jci.vuicore")
    {
        connect_signal(vuicore_proxy, AppEventCallback, _AppEventCallback_stub);
        connect_signal(vuicore_proxy, LanguageChangedCallback, _LanguageChangedCallback_stub);
        connect_signal(vuicore_proxy, StateChangeCallback, _StateChangeCallback_stub);
        connect_signal(vuicore_proxy, AlertCompleteCallback, _AlertCompleteCallback_stub);
        connect_signal(vuicore_proxy, MicLevelCallback, _MicLevelCallback_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void SetParadigm(const int32_t& paradigm)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << paradigm;
        call.member("SetParadigm");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetAppContext(const ::DBus::Struct< int32_t, int32_t, uint32_t, uint32_t, std::vector< uint8_t > >& appContext, const int32_t& action)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << appContext;
        wi << action;
        call.member("SetAppContext");
        ::DBus::Message ret = invoke_method (call);
    }

    void SendMessage(const ::DBus::Struct< int32_t, int32_t, uint32_t, std::vector< uint8_t > >& message)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << message;
        call.member("SendMessage");
        ::DBus::Message ret = invoke_method (call);
    }

    void StartReco(const bool& startOfSession)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << startOfSession;
        call.member("StartReco");
        ::DBus::Message ret = invoke_method (call);
    }

    void AbortSession(const int32_t& action)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << action;
        call.member("AbortSession");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetLang(const int32_t& language)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << language;
        call.member("SetLang");
        ::DBus::Message ret = invoke_method (call);
    }

    void SendAlert(const ::DBus::Struct< int32_t, int32_t, uint32_t, std::vector< uint8_t > >& alert, const int32_t& alertAction)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << alert;
        wi << alertAction;
        call.member("SendAlert");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetTestMode(const bool& enableTestMode, const bool& enableNLU)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << enableTestMode;
        wi << enableNLU;
        call.member("SetTestMode");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetPrerecordedAudioFiles(const std::string& audioFileAttempt1, const std::string& audioFileAttempt2, const std::string& audioFileAttempt3)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << audioFileAttempt1;
        wi << audioFileAttempt2;
        wi << audioFileAttempt3;
        call.member("SetPrerecordedAudioFiles");
        ::DBus::Message ret = invoke_method (call);
    }

    void AlertQueueEmpty()
    {
        ::DBus::CallMessage call;
        call.member("AlertQueueEmpty");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void AppEventCallback(const ::DBus::Struct< int32_t, int32_t, uint32_t, std::vector< uint8_t >, int32_t, int32_t >& event) = 0;
    virtual void LanguageChangedCallback(const int32_t& language) = 0;
    virtual void StateChangeCallback(const int32_t& newState) = 0;
    virtual void AlertCompleteCallback(const ::DBus::Struct< int32_t, int32_t, int32_t >& alertComplete) = 0;
    virtual void MicLevelCallback(const int32_t& micLevel) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _AppEventCallback_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t, uint32_t, std::vector< uint8_t >, int32_t, int32_t > event;
        ri >> event;
        AppEventCallback(event);
    }
    void _LanguageChangedCallback_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t language;
        ri >> language;
        LanguageChangedCallback(language);
    }
    void _StateChangeCallback_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t newState;
        ri >> newState;
        StateChangeCallback(newState);
    }
    void _AlertCompleteCallback_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t, int32_t > alertComplete;
        ri >> alertComplete;
        AlertCompleteCallback(alertComplete);
    }
    void _MicLevelCallback_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t micLevel;
        ri >> micLevel;
        MicLevelCallback(micLevel);
    }
};

} } 
namespace com {
namespace jci {

class lvds_proxy
: public ::DBus::InterfaceProxy
{
public:

    lvds_proxy()
    : ::DBus::InterfaceProxy("com.jci.lvds")
    {
        connect_signal(lvds_proxy, brightNessLevelResp, _brightNessLevelResp_stub);
        connect_signal(lvds_proxy, TPVersionResp, _TPVersionResp_stub);
        connect_signal(lvds_proxy, displayVersion, _displayVersion_stub);
        connect_signal(lvds_proxy, NormalModeResp, _NormalModeResp_stub);
        connect_signal(lvds_proxy, SleepModeResp, _SleepModeResp_stub);
        connect_signal(lvds_proxy, DiagModeResp, _DiagModeResp_stub);
        connect_signal(lvds_proxy, ExtendModeResp, _ExtendModeResp_stub);
        connect_signal(lvds_proxy, EnablePRBSResp, _EnablePRBSResp_stub);
        connect_signal(lvds_proxy, DisablePRBSResp, _DisablePRBSResp_stub);
        connect_signal(lvds_proxy, PRBSReportResp, _PRBSReportResp_stub);
        connect_signal(lvds_proxy, ACCOffResp, _ACCOffResp_stub);
        connect_signal(lvds_proxy, DispOnResp, _DispOnResp_stub);
        connect_signal(lvds_proxy, DispOffResp, _DispOffResp_stub);
        connect_signal(lvds_proxy, CurrentStatus, _CurrentStatus_stub);
        connect_signal(lvds_proxy, FaultStatus, _FaultStatus_stub);
        connect_signal(lvds_proxy, ErrorStatus, _ErrorStatus_stub);
        connect_signal(lvds_proxy, TouchIgnoreStatus, _TouchIgnoreStatus_stub);
        connect_signal(lvds_proxy, ErrorEncounteredAlert, _ErrorEncounteredAlert_stub);
        connect_signal(lvds_proxy, DisplayStatus, _DisplayStatus_stub);
        connect_signal(lvds_proxy, HdcpState, _HdcpState_stub);
        connect_signal(lvds_proxy, HdcpModeStatus, _HdcpModeStatus_stub);
        connect_signal(lvds_proxy, VideoTuning, _VideoTuning_stub);
        connect_signal(lvds_proxy, TunedValues, _TunedValues_stub);
        connect_signal(lvds_proxy, RegisterDumpStatus, _RegisterDumpStatus_stub);
        connect_signal(lvds_proxy, TouchSimulationStatus, _TouchSimulationStatus_stub);
        connect_signal(lvds_proxy, SpreadSpectrumStatus, _SpreadSpectrumStatus_stub);
        connect_signal(lvds_proxy, CMLLevelStatus, _CMLLevelStatus_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int16_t SetBrightness(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& brightnessLevel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << brightnessLevel;
        call.member("SetBrightness");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }

    std::string GetSoftwareTPVersion(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& softwareTPVersion)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << softwareTPVersion;
        call.member("GetSoftwareTPVersion");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::string GetSoftwareDispVersion(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& softwareDispVersion)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << softwareDispVersion;
        call.member("GetSoftwareDispVersion");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::string SetNormalMode(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& normalMode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << normalMode;
        call.member("SetNormalMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::string SetSleepMode(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& sleepMode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sleepMode;
        call.member("SetSleepMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::string SetDiagMode(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& diagMode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << diagMode;
        call.member("SetDiagMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::string SetExtendMode(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& extendMode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << extendMode;
        call.member("SetExtendMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    int16_t SetACCOff(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& aCCOff)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << aCCOff;
        call.member("SetACCOff");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }

    int16_t SetDispOn(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& dispOn)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dispOn;
        call.member("SetDispOn");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }

    int16_t SetDispOff(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& dispOff)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dispOff;
        call.member("SetDispOff");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }

    std::string EnablePRBS(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& enablePRBSAutoTest)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << enablePRBSAutoTest;
        call.member("EnablePRBS");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::string DisablePRBS(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& disablePRBSAutoTest)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << disablePRBSAutoTest;
        call.member("DisablePRBS");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    std::string PRBSReport(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& pRBSAutoTestReport)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pRBSAutoTestReport;
        call.member("PRBSReport");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    uint32_t SystemACCMonitoring(const uint32_t& requestId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        call.member("SystemACCMonitoring");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t SpeedRestriction(const uint32_t& requestId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        call.member("SpeedRestriction");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t SetHdcpMode(const uint32_t& mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mode;
        call.member("SetHdcpMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetErrorEncounteredStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetErrorEncounteredStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t BlmLvdsReady(const uint32_t& requestId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        call.member("BlmLvdsReady");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t FaultStatusResponse(const uint32_t& faultId, const uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << faultId;
        wi << status;
        call.member("FaultStatusResponse");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetDisplayStatus(const uint32_t& requestId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        call.member("GetDisplayStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetHdcpState()
    {
        ::DBus::CallMessage call;
        call.member("GetHdcpState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t SetVideoTuning(const ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t >& videoTuning)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << videoTuning;
        call.member("SetVideoTuning");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetTunedValues(const uint32_t& requestId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        call.member("GetTunedValues");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetRegisterDump(const uint32_t& regType, const bool& all, const uint8_t& start, const uint8_t& stop)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << regType;
        wi << all;
        wi << start;
        wi << stop;
        call.member("GetRegisterDump");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t TouchSimulation(const ::DBus::Struct< uint8_t, ::DBus::Struct< uint16_t, uint16_t >, ::DBus::Struct< uint16_t, uint16_t >, ::DBus::Struct< uint16_t, uint16_t >, ::DBus::Struct< uint16_t, uint16_t > >& touchEvents)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << touchEvents;
        call.member("TouchSimulation");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    int16_t BrightnessRamp(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& brightnessLevel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << brightnessLevel;
        call.member("BrightnessRamp");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int16_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t SetSpreadSpectrum(const uint32_t& spreadLevel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << spreadLevel;
        call.member("SetSpreadSpectrum");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t SetCMLLevel(const uint32_t& cMLLevel)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << cMLLevel;
        call.member("SetCMLLevel");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void brightNessLevelResp(const int16_t& brightNessLvl) = 0;
    virtual void TPVersionResp(const ::DBus::Struct< uint32_t, std::string >& tPVersion) = 0;
    virtual void displayVersion(const ::DBus::Struct< uint32_t, std::string >& dispVersion) = 0;
    virtual void NormalModeResp(const int16_t& normalModeResp) = 0;
    virtual void SleepModeResp(const int16_t& sleepModeResp) = 0;
    virtual void DiagModeResp(const int16_t& diagModeResp) = 0;
    virtual void ExtendModeResp(const int16_t& extendModeResp) = 0;
    virtual void EnablePRBSResp(const int16_t& enablePRBSResp) = 0;
    virtual void DisablePRBSResp(const int16_t& disablePRBSResp) = 0;
    virtual void PRBSReportResp(const int16_t& pRBSReportResp) = 0;
    virtual void ACCOffResp(const int16_t& aCCOff) = 0;
    virtual void DispOnResp(const int16_t& dispOn) = 0;
    virtual void DispOffResp(const int16_t& dispOff) = 0;
    virtual void CurrentStatus(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& curStat) = 0;
    virtual void FaultStatus(const ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t >& fault) = 0;
    virtual void ErrorStatus(const int16_t& error) = 0;
    virtual void TouchIgnoreStatus(const uint32_t& touchIgnoreStatus) = 0;
    virtual void ErrorEncounteredAlert(const uint32_t& errorAlert) = 0;
    virtual void DisplayStatus(const ::DBus::Struct< std::vector< uint8_t > >& displayStatus) = 0;
    virtual void HdcpState(const uint32_t& hdcpState) = 0;
    virtual void HdcpModeStatus(const uint32_t& hdcpModeStatus) = 0;
    virtual void VideoTuning(const uint32_t& videoTuning) = 0;
    virtual void TunedValues(const ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t >& tunedValues) = 0;
    virtual void RegisterDumpStatus(const uint32_t& registerDumpStatus) = 0;
    virtual void TouchSimulationStatus(const uint32_t& touchSimulationStatus) = 0;
    virtual void SpreadSpectrumStatus(const uint32_t& spreadSpectrumStatus) = 0;
    virtual void CMLLevelStatus(const uint32_t& cMLLevelStatus) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _brightNessLevelResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t brightNessLvl;
        ri >> brightNessLvl;
        brightNessLevelResp(brightNessLvl);
    }
    void _TPVersionResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, std::string > tPVersion;
        ri >> tPVersion;
        TPVersionResp(tPVersion);
    }
    void _displayVersion_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, std::string > dispVersion;
        ri >> dispVersion;
        displayVersion(dispVersion);
    }
    void _NormalModeResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t normalModeResp;
        ri >> normalModeResp;
        NormalModeResp(normalModeResp);
    }
    void _SleepModeResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t sleepModeResp;
        ri >> sleepModeResp;
        SleepModeResp(sleepModeResp);
    }
    void _DiagModeResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t diagModeResp;
        ri >> diagModeResp;
        DiagModeResp(diagModeResp);
    }
    void _ExtendModeResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t extendModeResp;
        ri >> extendModeResp;
        ExtendModeResp(extendModeResp);
    }
    void _EnablePRBSResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t enablePRBSResp;
        ri >> enablePRBSResp;
        EnablePRBSResp(enablePRBSResp);
    }
    void _DisablePRBSResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t disablePRBSResp;
        ri >> disablePRBSResp;
        DisablePRBSResp(disablePRBSResp);
    }
    void _PRBSReportResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t pRBSReportResp;
        ri >> pRBSReportResp;
        PRBSReportResp(pRBSReportResp);
    }
    void _ACCOffResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t aCCOff;
        ri >> aCCOff;
        ACCOffResp(aCCOff);
    }
    void _DispOnResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t dispOn;
        ri >> dispOn;
        DispOnResp(dispOn);
    }
    void _DispOffResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t dispOff;
        ri >> dispOff;
        DispOffResp(dispOff);
    }
    void _CurrentStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t > curStat;
        ri >> curStat;
        CurrentStatus(curStat);
    }
    void _FaultStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint8_t, uint8_t > fault;
        ri >> fault;
        FaultStatus(fault);
    }
    void _ErrorStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t error;
        ri >> error;
        ErrorStatus(error);
    }
    void _TouchIgnoreStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t touchIgnoreStatus;
        ri >> touchIgnoreStatus;
        TouchIgnoreStatus(touchIgnoreStatus);
    }
    void _ErrorEncounteredAlert_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t errorAlert;
        ri >> errorAlert;
        ErrorEncounteredAlert(errorAlert);
    }
    void _DisplayStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t > > displayStatus;
        ri >> displayStatus;
        DisplayStatus(displayStatus);
    }
    void _HdcpState_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t hdcpState;
        ri >> hdcpState;
        HdcpState(hdcpState);
    }
    void _HdcpModeStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t hdcpModeStatus;
        ri >> hdcpModeStatus;
        HdcpModeStatus(hdcpModeStatus);
    }
    void _VideoTuning_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t videoTuning;
        ri >> videoTuning;
        VideoTuning(videoTuning);
    }
    void _TunedValues_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t > tunedValues;
        ri >> tunedValues;
        TunedValues(tunedValues);
    }
    void _RegisterDumpStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t registerDumpStatus;
        ri >> registerDumpStatus;
        RegisterDumpStatus(registerDumpStatus);
    }
    void _TouchSimulationStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t touchSimulationStatus;
        ri >> touchSimulationStatus;
        TouchSimulationStatus(touchSimulationStatus);
    }
    void _SpreadSpectrumStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t spreadSpectrumStatus;
        ri >> spreadSpectrumStatus;
        SpreadSpectrumStatus(spreadSpectrumStatus);
    }
    void _CMLLevelStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t cMLLevelStatus;
        ri >> cMLLevelStatus;
        CMLLevelStatus(cMLLevelStatus);
    }
};

} } 
namespace com {
namespace jci {
namespace cpp {
namespace devices {

class Display_proxy
: public ::DBus::InterfaceProxy
{
public:

    Display_proxy()
    : ::DBus::InterfaceProxy("com.jci.cpp.devices.Display")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void enumerate(int32_t& exception, std::vector< std::string >& names)
    {
        ::DBus::CallMessage call;
        call.member("enumerate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> exception;
        ri >> names;
    }

    void getContrast(const std::string& name, int32_t& exception, uint16_t& contrast)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("getContrast");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> exception;
        ri >> contrast;
    }

    void getContrastSteps(const std::string& name, int32_t& exception, uint16_t& contrast)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("getContrastSteps");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> exception;
        ri >> contrast;
    }

    void setContrast(const std::string& name, const uint16_t& contrast, int32_t& exception, bool& changed)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << contrast;
        call.member("setContrast");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> exception;
        ri >> changed;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
namespace com {
namespace jci {
namespace cpp {
namespace devices {

class Gpio_proxy
: public ::DBus::InterfaceProxy
{
public:

    Gpio_proxy()
    : ::DBus::InterfaceProxy("com.jci.cpp.devices.Gpio")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void enumerate(int32_t& exception, std::vector< std::string >& names)
    {
        ::DBus::CallMessage call;
        call.member("enumerate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> exception;
        ri >> names;
    }

    void getValue(const std::string& name, int32_t& exception, bool& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("getValue");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> exception;
        ri >> value;
    }

    void setValue(const std::string& name, const bool& value, int32_t& exception, bool& changed)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << value;
        call.member("setValue");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> exception;
        ri >> changed;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
namespace com {
namespace jci {
namespace cpp {
namespace devices {

class Keyboard_proxy
: public ::DBus::InterfaceProxy
{
public:

    Keyboard_proxy()
    : ::DBus::InterfaceProxy("com.jci.cpp.devices.Keyboard")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void enumerate(int32_t& exception, std::vector< std::string >& names)
    {
        ::DBus::CallMessage call;
        call.member("enumerate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> exception;
        ri >> names;
    }

    int32_t keyClick(const std::string& name, const int32_t& code, const bool& shift)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << code;
        wi << shift;
        call.member("keyClick");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t keyPress(const std::string& name, const int32_t& code)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << code;
        call.member("keyPress");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t keyRelease(const std::string& name, const int32_t& code)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << code;
        call.member("keyRelease");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t keySequence(const std::string& name, const std::string& string)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << string;
        call.member("keySequence");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
namespace com {
namespace jci {
namespace cpp {
namespace devices {

class Mouse_proxy
: public ::DBus::InterfaceProxy
{
public:

    Mouse_proxy()
    : ::DBus::InterfaceProxy("com.jci.cpp.devices.Mouse")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t buttonClick(const std::string& name, const int32_t& button)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << button;
        call.member("buttonClick");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t buttonPress(const std::string& name, const int32_t& button)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << button;
        call.member("buttonPress");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t buttonRelease(const std::string& name, const int32_t& button)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << button;
        call.member("buttonRelease");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void enumerate(int32_t& exception, std::vector< std::string >& names)
    {
        ::DBus::CallMessage call;
        call.member("enumerate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> exception;
        ri >> names;
    }

    int32_t move(const std::string& name, const int32_t& x, const int32_t& y, const int32_t& z)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << x;
        wi << y;
        wi << z;
        call.member("move");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t moveAxis(const std::string& name, const int32_t& axis, const int32_t& distance)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << axis;
        wi << distance;
        call.member("moveAxis");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t scroll(const std::string& name, const int32_t& x, const int32_t& y, const int32_t& z)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << x;
        wi << y;
        wi << z;
        call.member("scroll");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t scrollAxis(const std::string& name, const int32_t& axis, const int32_t& distance)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        wi << axis;
        wi << distance;
        call.member("scrollAxis");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
namespace com {
namespace jci {
namespace lds {

class data_proxy
: public ::DBus::InterfaceProxy
{
public:

    data_proxy()
    : ::DBus::InterfaceProxy("com.jci.lds.data")
    {
        connect_signal(data_proxy, GPSDiagnostics, _GPSDiagnostics_stub);
        connect_signal(data_proxy, OneTimeDRDiagnostics, _OneTimeDRDiagnostics_stub);
        connect_signal(data_proxy, PeriodicDRDiagnostics, _PeriodicDRDiagnostics_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void GetPosition(int32_t& positionAccuracy, uint64_t& uTCtime, double& latitude, double& longitude, int32_t& altitude, double& heading, double& velocity, double& horizontalAccuracy, double& verticalAccuracy)
    {
        ::DBus::CallMessage call;
        call.member("GetPosition");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> positionAccuracy;
        ri >> uTCtime;
        ri >> latitude;
        ri >> longitude;
        ri >> altitude;
        ri >> heading;
        ri >> velocity;
        ri >> horizontalAccuracy;
        ri >> verticalAccuracy;
    }

    void GetLastKnownPosition(uint64_t& uTCtime, double& latitude, double& longitude)
    {
        ::DBus::CallMessage call;
        call.member("GetLastKnownPosition");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> uTCtime;
        ri >> latitude;
        ri >> longitude;
    }

    std::string GetGPSFirmwareVersion()
    {
        ::DBus::CallMessage call;
        call.member("GetGPSFirmwareVersion");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    int32_t GetSatelliteInfo()
    {
        ::DBus::CallMessage call;
        call.member("GetSatelliteInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void GPSDiagnostics(const uint8_t& dTCId, const uint8_t& dTCAction) = 0;
    virtual void OneTimeDRDiagnostics(const std::string& dRUnitVersion, const int32_t& antennaStatus, const bool& gyroSelfTest, const bool& accelSelfTest, const bool& resetLearning, const bool& saveLearning) = 0;
    virtual void PeriodicDRDiagnostics(const int32_t& dRUnitStatus, const int32_t& speedPulse, const bool& reverse, const int32_t& dRUnitMode, const int32_t& gyroStatus, const int32_t& accelStatus) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _GPSDiagnostics_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t dTCId;
        ri >> dTCId;
        uint8_t dTCAction;
        ri >> dTCAction;
        GPSDiagnostics(dTCId, dTCAction);
    }
    void _OneTimeDRDiagnostics_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string dRUnitVersion;
        ri >> dRUnitVersion;
        int32_t antennaStatus;
        ri >> antennaStatus;
        bool gyroSelfTest;
        ri >> gyroSelfTest;
        bool accelSelfTest;
        ri >> accelSelfTest;
        bool resetLearning;
        ri >> resetLearning;
        bool saveLearning;
        ri >> saveLearning;
        OneTimeDRDiagnostics(dRUnitVersion, antennaStatus, gyroSelfTest, accelSelfTest, resetLearning, saveLearning);
    }
    void _PeriodicDRDiagnostics_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t dRUnitStatus;
        ri >> dRUnitStatus;
        int32_t speedPulse;
        ri >> speedPulse;
        bool reverse;
        ri >> reverse;
        int32_t dRUnitMode;
        ri >> dRUnitMode;
        int32_t gyroStatus;
        ri >> gyroStatus;
        int32_t accelStatus;
        ri >> accelStatus;
        PeriodicDRDiagnostics(dRUnitStatus, speedPulse, reverse, dRUnitMode, gyroStatus, accelStatus);
    }
};

} } } 
namespace com {
namespace jci {
namespace lds {

class control_proxy
: public ::DBus::InterfaceProxy
{
public:

    control_proxy()
    : ::DBus::InterfaceProxy("com.jci.lds.control")
    {
        connect_signal(control_proxy, ReadStatus, _ReadStatus_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void ReadControl(const int32_t& command)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << command;
        call.member("ReadControl");
        ::DBus::Message ret = invoke_method (call);
    }

    void DRTestScreenRequest(const int32_t& dRUnitTestScreenRequest)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << dRUnitTestScreenRequest;
        call.member("DRTestScreenRequest");
        ::DBus::Message ret = invoke_method (call);
    }

    void GetDRUnitStatus_sync(bool& connected, bool& status, int32_t& result)
    {
        ::DBus::CallMessage call;
        call.member("GetDRUnitStatus_sync");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connected;
        ri >> status;
        ri >> result;
    }

    void GetLastKnownPosition_sync(int32_t& positionAccuracy, uint64_t& uTCtime, double& latitude, double& longitude, int32_t& altitude, double& heading, double& velocity, double& horizontalAccuracy, double& verticalAccuracy, int32_t& result)
    {
        ::DBus::CallMessage call;
        call.member("GetLastKnownPosition_sync");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> positionAccuracy;
        ri >> uTCtime;
        ri >> latitude;
        ri >> longitude;
        ri >> altitude;
        ri >> heading;
        ri >> velocity;
        ri >> horizontalAccuracy;
        ri >> verticalAccuracy;
        ri >> result;
    }

    int32_t SetLastKnownPosition_sync(const int32_t& positionAccuracy, const uint64_t& uTCtime, const double& latitude, const double& longitude, const int32_t& altitude, const double& heading, const double& velocity, const double& horizontalAccuracy, const double& verticalAccuracy)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << positionAccuracy;
        wi << uTCtime;
        wi << latitude;
        wi << longitude;
        wi << altitude;
        wi << heading;
        wi << velocity;
        wi << horizontalAccuracy;
        wi << verticalAccuracy;
        call.member("SetLastKnownPosition_sync");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void DRReloadRequest()
    {
        ::DBus::CallMessage call;
        call.member("DRReloadRequest");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void ReadStatus(const int32_t& commandReply, const int32_t& status) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ReadStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t commandReply;
        ri >> commandReply;
        int32_t status;
        ri >> status;
        ReadStatus(commandReply, status);
    }
};

} } } 
namespace com {
namespace xsembedded {

class ServiceProvider_proxy
: public ::DBus::InterfaceProxy
{
public:

    ServiceProvider_proxy()
    : ::DBus::InterfaceProxy("com.xsembedded.ServiceProvider")
    {
        connect_signal(ServiceProvider_proxy, Notify, _Notify_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::string Request(const std::string& methodName, const std::string& arguments)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << methodName;
        wi << arguments;
        call.member("Request");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    void openSession(const std::string& busName, const std::string& objectPath, const std::string& destination, int32_t& sessionId, ::DBus::Struct< int32_t, std::string, std::string >& result)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << busName;
        wi << objectPath;
        wi << destination;
        call.member("openSession");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> sessionId;
        ri >> result;
    }

    ::DBus::Struct< int32_t, std::string, std::string > closeSession(const int32_t& sessionId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("closeSession");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, std::string, std::string > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t, std::string, std::string > registerAudioStream(const int32_t& sessionId, const std::string& streamName, const std::string& streamModeName, const std::string& streamType, const int32_t& focusType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << streamName;
        wi << streamModeName;
        wi << streamType;
        wi << focusType;
        call.member("registerAudioStream");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, std::string, std::string > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t, std::string, std::string > requestAudioFocus(const int32_t& sessionId, const int32_t& requestType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << requestType;
        call.member("requestAudioFocus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, std::string, std::string > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t, std::string, std::string > abandonAudioFocus(const int32_t& sessionId, const std::string& reason)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << reason;
        call.member("abandonAudioFocus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, std::string, std::string > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t, std::string, std::string > audioActive(const int32_t& sessionId, const int32_t& playing)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << playing;
        call.member("audioActive");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, std::string, std::string > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t, std::string, std::string > setMode(const int32_t& sessionId, const std::string& newMode, const std::string& destination)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << newMode;
        wi << destination;
        call.member("setMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, std::string, std::string > argout;
        ri >> argout;
        return argout;
    }

    void getMode(const int32_t& sessionId, const std::string& destination, std::string& currentMode, ::DBus::Struct< int32_t, std::string, std::string >& result)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << destination;
        call.member("getMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> currentMode;
        ri >> result;
    }

    void getModeList(const int32_t& sessionId, const std::string& destination, ::DBus::Struct< std::vector< std::string >, int32_t >& modeList, ::DBus::Struct< int32_t, std::string, std::string >& result)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << destination;
        call.member("getModeList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> modeList;
        ri >> result;
    }

    void enableStatus(int32_t& status, ::DBus::Struct< int32_t, std::string, std::string >& result)
    {
        ::DBus::CallMessage call;
        call.member("enableStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> status;
        ri >> result;
    }

    ::DBus::Struct< int32_t, std::string, std::string > enable(const int32_t& setAudioStatus)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setAudioStatus;
        call.member("enable");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t, std::string, std::string > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void Notify(const std::string& signalName, const std::string& payload) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Notify_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string signalName;
        ri >> signalName;
        std::string payload;
        ri >> payload;
        Notify(signalName, payload);
    }
};

} } 
namespace com {
namespace jci {

class opera_IHU_proxy
: public ::DBus::InterfaceProxy
{
public:

    opera_IHU_proxy()
    : ::DBus::InterfaceProxy("com.jci.opera_IHU")
    {
        connect_signal(opera_IHU_proxy, ReportError, _ReportError_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void TerminateOpera()
    {
        ::DBus::CallMessage call;
        call.member("TerminateOpera");
        ::DBus::Message ret = invoke_method (call);
    }

    void Navigate()
    {
        ::DBus::CallMessage call;
        call.member("Navigate");
        ::DBus::Message ret = invoke_method (call);
    }

    void GoBack()
    {
        ::DBus::CallMessage call;
        call.member("GoBack");
        ::DBus::Message ret = invoke_method (call);
    }

    void GoForward()
    {
        ::DBus::CallMessage call;
        call.member("GoForward");
        ::DBus::Message ret = invoke_method (call);
    }

    void Refresh()
    {
        ::DBus::CallMessage call;
        call.member("Refresh");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void ReportError(const std::string& errorData) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ReportError_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string errorData;
        ri >> errorData;
        ReportError(errorData);
    }
};

} } 
namespace com {
namespace jci {
namespace obs {
namespace aha {

class svc_proxy
: public ::DBus::InterfaceProxy
{
public:

    svc_proxy()
    : ::DBus::InterfaceProxy("com.jci.obs.aha.svc")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void ConnectUsingPseudoTerminal(const std::string& pseudoTerminal, const std::string& sessionName, const ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string >& vehicleInfo, const uint8_t& shoutFormat, int32_t& status, uint32_t& sessionId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pseudoTerminal;
        wi << sessionName;
        wi << vehicleInfo;
        wi << shoutFormat;
        call.member("ConnectUsingPseudoTerminal");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> status;
        ri >> sessionId;
    }

    int32_t Disconnect(const uint32_t& sessionId, const uint32_t& reasonId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << reasonId;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void ChangeClientPlaybackState(const uint32_t& sessionId, const uint8_t& playbackState, uint64_t& contentId, uint8_t& playState, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << playbackState;
        call.member("ChangeClientPlaybackState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> contentId;
        ri >> playState;
        ri >> status;
    }

    int32_t SelectContentForPlayback(const uint32_t& sessionId, const uint64_t& contentId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << contentId;
        call.member("SelectContentForPlayback");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SelectStationForPlayback(const uint32_t& sessionId, const uint64_t& stationId, const uint8_t& playbackFromBegin)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << stationId;
        wi << playbackFromBegin;
        call.member("SelectStationForPlayback");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TimeShiftContent(const uint32_t& sessionId, const int16_t& nOSecondsToTimeShift)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << nOSecondsToTimeShift;
        call.member("TimeShiftContent");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PerformAction(const uint32_t& sessionId, const uint32_t& actionId, const uint64_t& contentId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << actionId;
        wi << contentId;
        call.member("PerformAction");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PostNewRecording(const uint32_t& sessionId, const std::string& file)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << file;
        call.member("PostNewRecording");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } } } 
namespace com {
namespace jci {

class fav_proxy
: public ::DBus::InterfaceProxy
{
public:

    fav_proxy()
    : ::DBus::InterfaceProxy("com.jci.fav")
    {
        connect_signal(fav_proxy, SeekStatusResp, _SeekStatusResp_stub);
        connect_signal(fav_proxy, FavRadioChangeEvent, _FavRadioChangeEvent_stub);
        connect_signal(fav_proxy, SendActiveFavIdEvent, _SendActiveFavIdEvent_stub);
        connect_signal(fav_proxy, SendFavInitStatusEvent, _SendFavInitStatusEvent_stub);
        connect_signal(fav_proxy, XMADFavAddedEvent, _XMADFavAddedEvent_stub);
        connect_signal(fav_proxy, XMADFavDeletedEvent, _XMADFavDeletedEvent_stub);
        connect_signal(fav_proxy, SetSmartFavoritesImpactList, _SetSmartFavoritesImpactList_stub);
        connect_signal(fav_proxy, XMChiptype, _XMChiptype_stub);
        connect_signal(fav_proxy, TuneMixActiveStatus, _TuneMixActiveStatus_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void GetFavoriteMax(const int32_t& requestId, const uint32_t& category, const uint32_t& deviceId, int32_t& return_requestId, uint32_t& return_category, int32_t& return_number_fav, int32_t& return_max_fav, bool& return_max_reached, uint32_t& return_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << category;
        wi << deviceId;
        call.member("GetFavoriteMax");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_category;
        ri >> return_number_fav;
        ri >> return_max_fav;
        ri >> return_max_reached;
        ri >> return_status;
    }

    void AddFavoriteRadio(const int32_t& requestId, const std::string& displayText, const int32_t& replaceFavId, const uint32_t& stationType, const double& frequency, const std::string& stationName, const uint16_t& piCode, const uint32_t& hdSPS, const uint8_t& xM_step, const uint8_t& xM_category, const uint8_t& xM_channel, const uint8_t& xM_SID, const std::string& relayName, const ::DBus::Struct< std::string, uint16_t, uint16_t, uint8_t, std::string >& fav_dab_data, int32_t& return_requestId, uint32_t& return_status, int32_t& return_add_favId, bool& return_max_reached)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << displayText;
        wi << replaceFavId;
        wi << stationType;
        wi << frequency;
        wi << stationName;
        wi << piCode;
        wi << hdSPS;
        wi << xM_step;
        wi << xM_category;
        wi << xM_channel;
        wi << xM_SID;
        wi << relayName;
        wi << fav_dab_data;
        call.member("AddFavoriteRadio");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_status;
        ri >> return_add_favId;
        ri >> return_max_reached;
    }

    void DeleteFavorite(const int32_t& requestId, const uint32_t& category, const int32_t& favId, const uint32_t& deviceId, int32_t& return_requestId, uint32_t& return_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << category;
        wi << favId;
        wi << deviceId;
        call.member("DeleteFavorite");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_status;
    }

    void MoveFavorite(const int32_t& requestId, const uint32_t& category, const int32_t& favId, const uint32_t& deviceId, const int32_t& oldIndex, const int32_t& newIndex, int32_t& return_requestId, uint32_t& return_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << category;
        wi << favId;
        wi << deviceId;
        wi << oldIndex;
        wi << newIndex;
        call.member("MoveFavorite");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_status;
    }

    void RenameFavorite(const int32_t& requestId, const uint32_t& category, const int32_t& favId, const uint32_t& deviceId, const std::string& displayText, int32_t& return_requestId, uint32_t& return_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << category;
        wi << favId;
        wi << deviceId;
        wi << displayText;
        call.member("RenameFavorite");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_status;
    }

    void GetFavoriteRadio(const int32_t& requestId, const int32_t& favId, int32_t& return_requestId, int32_t& return_favId, uint32_t& return_stationType, double& return_frequency, std::string& return_stationName, uint16_t& return_piCode, uint32_t& return_hdSPS, uint8_t& return_XM_step, uint8_t& return_XM_category, uint8_t& return_XM_channel, uint8_t& return_XM_SID, uint32_t& return_status, ::DBus::Struct< std::string, uint16_t, uint16_t, uint8_t, std::string >& fav_dab_data)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << favId;
        call.member("GetFavoriteRadio");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_favId;
        ri >> return_stationType;
        ri >> return_frequency;
        ri >> return_stationName;
        ri >> return_piCode;
        ri >> return_hdSPS;
        ri >> return_XM_step;
        ri >> return_XM_category;
        ri >> return_XM_channel;
        ri >> return_XM_SID;
        ri >> return_status;
        ri >> fav_dab_data;
    }

    void GetFavoriteList(const int32_t& requestId, const uint32_t& category, const uint32_t& deviceId, const int32_t& startIndex, const int32_t& maxItems, int32_t& return_requestId, uint32_t& return_category, int32_t& return_startIndex, int32_t& return_numItems, int32_t& return_totItems, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string, uint32_t, std::string, bool, std::string, std::string > > >& favList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << category;
        wi << deviceId;
        wi << startIndex;
        wi << maxItems;
        call.member("GetFavoriteList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_category;
        ri >> return_startIndex;
        ri >> return_numItems;
        ri >> return_totItems;
        ri >> favList;
    }

    void RenameTuneMixFavorite(const int32_t& requestId, const uint32_t& tuneMixID, const std::string& displayText, int32_t& return_requestId, uint32_t& return_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << tuneMixID;
        wi << displayText;
        call.member("RenameTuneMixFavorite");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_status;
    }

    void AddFavoriteComm(const int32_t& requestId, const std::string& displayText, const int32_t& replaceFavId, const uint32_t& deviceId, const uint32_t& contactId, const uint32_t& contactType, const std::string& contactName, const std::string& phoneNumber, int32_t& return_requestId, uint32_t& return_status, int32_t& return_add_favId, bool& return_max_reached)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << displayText;
        wi << replaceFavId;
        wi << deviceId;
        wi << contactId;
        wi << contactType;
        wi << contactName;
        wi << phoneNumber;
        call.member("AddFavoriteComm");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_status;
        ri >> return_add_favId;
        ri >> return_max_reached;
    }

    void GetFavoriteContactDetail(const int32_t& requestId, const int32_t& favId, const uint32_t& deviceId, int32_t& return_requestId, int32_t& return_favId, uint32_t& return_status, std::string& return_displayName, std::string& return_companyName, std::string& return_image, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string > > >& favCommNum, ::DBus::Struct< uint32_t, std::string, std::string, std::string, std::string, std::string >& favCommAddr)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << favId;
        wi << deviceId;
        call.member("GetFavoriteContactDetail");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_favId;
        ri >> return_status;
        ri >> return_displayName;
        ri >> return_companyName;
        ri >> return_image;
        ri >> favCommNum;
        ri >> favCommAddr;
    }

    void GetFavoriteComm(const int32_t& requestId, const int32_t& favId, const uint32_t& deviceId, int32_t& return_requestId, int32_t& return_favId, uint32_t& return_contactId, uint32_t& return_contactType, std::string& return_displayName, std::string& return_phoneNumber, uint32_t& return_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << favId;
        wi << deviceId;
        call.member("GetFavoriteComm");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_favId;
        ri >> return_contactId;
        ri >> return_contactType;
        ri >> return_displayName;
        ri >> return_phoneNumber;
        ri >> return_status;
    }

    void RadioFavoriteSeek(const int32_t& requestId, const uint32_t& radioType, const double& frequency, const uint32_t& hdSPS, const uint8_t& xM_channel, const int32_t& button, const ::DBus::Struct< std::string, uint16_t, uint16_t, uint8_t, std::string >& fav_dab_data, int32_t& return_requestId, int32_t& return_favId, uint32_t& return_stationType, double& return_frequency, std::string& return_stationName, uint16_t& return_piCode, uint32_t& return_hdSPS, uint8_t& return_XM_step, uint8_t& return_XM_category, uint8_t& return_XM_channel, uint8_t& return_XM_SID, uint32_t& return_status, ::DBus::Struct< std::string, uint16_t, uint16_t, uint8_t >& fav_dab_return)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << radioType;
        wi << frequency;
        wi << hdSPS;
        wi << xM_channel;
        wi << button;
        wi << fav_dab_data;
        call.member("RadioFavoriteSeek");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_favId;
        ri >> return_stationType;
        ri >> return_frequency;
        ri >> return_stationName;
        ri >> return_piCode;
        ri >> return_hdSPS;
        ri >> return_XM_step;
        ri >> return_XM_category;
        ri >> return_XM_channel;
        ri >> return_XM_SID;
        ri >> return_status;
        ri >> fav_dab_return;
    }

    void ReplaceFavoriteXMChannel(const int32_t& requestId, const std::string& stationName, const uint8_t& xM_channel, const uint8_t& xM_SID, int32_t& return_requestId, uint32_t& return_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << stationName;
        wi << xM_channel;
        wi << xM_SID;
        call.member("ReplaceFavoriteXMChannel");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_status;
    }

    void ReplaceFavoriteSXMChannel(const int32_t& requestId, const std::string& stationName, const uint16_t& xM_channel, const uint32_t& xM_SID, int32_t& return_requestId, uint16_t& return_channelId, uint32_t& return_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << stationName;
        wi << xM_channel;
        wi << xM_SID;
        call.member("ReplaceFavoriteSXMChannel");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_channelId;
        ri >> return_status;
    }

    uint32_t UpdateFromTunerStatus(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, bool, std::vector< uint8_t > >& tuner_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tuner_status;
        call.member("UpdateFromTunerStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void CurrentTunedChannelInfo(const uint32_t& radioType, const bool& tuneStatus, const double& frequency, const uint16_t& piCode, const uint32_t& hdSPS, const uint8_t& xM_channel, const ::DBus::Struct< std::string, uint16_t, uint16_t, uint8_t >& fav_dab_data)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << radioType;
        wi << tuneStatus;
        wi << frequency;
        wi << piCode;
        wi << hdSPS;
        wi << xM_channel;
        wi << fav_dab_data;
        call.member("CurrentTunedChannelInfo");
        ::DBus::Message ret = invoke_method (call);
    }

    void RadioFastFavoriteSeek(const int32_t& requestId, const int32_t& button, const uint32_t& fimGroupAtKeyPressed, int32_t& return_requestId, uint32_t& return_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        wi << button;
        wi << fimGroupAtKeyPressed;
        call.member("RadioFastFavoriteSeek");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_status;
    }

    void GetFavoriteXMADAudio(const int32_t& requestId, int32_t& return_requestId, int32_t& return_numItems, ::DBus::Struct< std::vector< uint32_t > >& channelIDArray)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestId;
        call.member("GetFavoriteXMADAudio");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_requestId;
        ri >> return_numItems;
        ri >> channelIDArray;
    }

    void DelXMADChannelFavID(const uint32_t& xmChannelId, uint32_t& return_favId, uint32_t& return_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << xmChannelId;
        call.member("DelXMADChannelFavID");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_favId;
        ri >> return_status;
    }

    void ShowSXMSFav(const uint32_t& requestID, const uint32_t& sXMSFavStatus, uint32_t& ret_requestID, uint32_t& return_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestID;
        wi << sXMSFavStatus;
        call.member("ShowSXMSFav");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> ret_requestID;
        ri >> return_status;
    }

    uint32_t SmartFavoritesImpactList(const ::DBus::Struct< std::vector< uint32_t > >& chId_Arry)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << chId_Arry;
        call.member("SmartFavoritesImpactList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void GetXMChipType(const uint32_t& requestID, uint32_t& ret_requestID, uint32_t& return_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestID;
        call.member("GetXMChipType");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> ret_requestID;
        ri >> return_status;
    }

    void GetTunemixactiveStatus(const uint32_t& requestID, uint32_t& ret_requestID, uint32_t& return_status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << requestID;
        call.member("GetTunemixactiveStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> ret_requestID;
        ri >> return_status;
    }


public:

    /* signal handlers for this interface
     */
    virtual void SeekStatusResp(const uint32_t& seekStatus, const uint32_t& fimGroupAtKeyPressed) = 0;
    virtual void FavRadioChangeEvent(const int32_t& return_favId, const uint32_t& return_stationType, const double& return_frequency, const std::string& return_stationName, const uint16_t& return_piCode, const uint32_t& return_hdSPS, const uint8_t& return_XM_step, const uint8_t& return_XM_category, const uint8_t& return_XM_channel, const uint8_t& return_XM_SID, const uint32_t& return_status, const ::DBus::Struct< std::string, uint16_t, uint16_t, uint8_t, std::string >& fav_dab_data) = 0;
    virtual void SendActiveFavIdEvent(const uint32_t& favId, const bool& favPlayStatus) = 0;
    virtual void SendFavInitStatusEvent(const bool& isActive) = 0;
    virtual void XMADFavAddedEvent(const uint32_t& xM_channel) = 0;
    virtual void XMADFavDeletedEvent(const uint32_t& xM_channel) = 0;
    virtual void SetSmartFavoritesImpactList(const ::DBus::Struct< std::vector< uint32_t > >& chId_Arry) = 0;
    virtual void XMChiptype(const uint32_t& isX65HAinstalled) = 0;
    virtual void TuneMixActiveStatus(const bool& istunemixactive) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _SeekStatusResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t seekStatus;
        ri >> seekStatus;
        uint32_t fimGroupAtKeyPressed;
        ri >> fimGroupAtKeyPressed;
        SeekStatusResp(seekStatus, fimGroupAtKeyPressed);
    }
    void _FavRadioChangeEvent_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t return_favId;
        ri >> return_favId;
        uint32_t return_stationType;
        ri >> return_stationType;
        double return_frequency;
        ri >> return_frequency;
        std::string return_stationName;
        ri >> return_stationName;
        uint16_t return_piCode;
        ri >> return_piCode;
        uint32_t return_hdSPS;
        ri >> return_hdSPS;
        uint8_t return_XM_step;
        ri >> return_XM_step;
        uint8_t return_XM_category;
        ri >> return_XM_category;
        uint8_t return_XM_channel;
        ri >> return_XM_channel;
        uint8_t return_XM_SID;
        ri >> return_XM_SID;
        uint32_t return_status;
        ri >> return_status;
        ::DBus::Struct< std::string, uint16_t, uint16_t, uint8_t, std::string > fav_dab_data;
        ri >> fav_dab_data;
        FavRadioChangeEvent(return_favId, return_stationType, return_frequency, return_stationName, return_piCode, return_hdSPS, return_XM_step, return_XM_category, return_XM_channel, return_XM_SID, return_status, fav_dab_data);
    }
    void _SendActiveFavIdEvent_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t favId;
        ri >> favId;
        bool favPlayStatus;
        ri >> favPlayStatus;
        SendActiveFavIdEvent(favId, favPlayStatus);
    }
    void _SendFavInitStatusEvent_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool isActive;
        ri >> isActive;
        SendFavInitStatusEvent(isActive);
    }
    void _XMADFavAddedEvent_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t xM_channel;
        ri >> xM_channel;
        XMADFavAddedEvent(xM_channel);
    }
    void _XMADFavDeletedEvent_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t xM_channel;
        ri >> xM_channel;
        XMADFavDeletedEvent(xM_channel);
    }
    void _SetSmartFavoritesImpactList_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint32_t > > chId_Arry;
        ri >> chId_Arry;
        SetSmartFavoritesImpactList(chId_Arry);
    }
    void _XMChiptype_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t isX65HAinstalled;
        ri >> isX65HAinstalled;
        XMChiptype(isX65HAinstalled);
    }
    void _TuneMixActiveStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool istunemixactive;
        ri >> istunemixactive;
        TuneMixActiveStatus(istunemixactive);
    }
};

} } 
namespace com {
namespace jci {

class lvds_blm_proxy
: public ::DBus::InterfaceProxy
{
public:

    lvds_blm_proxy()
    : ::DBus::InterfaceProxy("com.jci.lvds_blm")
    {
        connect_signal(lvds_blm_proxy, DiagScreenKilledResp, _DiagScreenKilledResp_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    uint32_t KillWaylandclient()
    {
        ::DBus::CallMessage call;
        call.member("KillWaylandclient");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void DiagScreenKilledResp(const int16_t& diagScreenKilled) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _DiagScreenKilledResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int16_t diagScreenKilled;
        ri >> diagScreenKilled;
        DiagScreenKilledResp(diagScreenKilled);
    }
};

} } 
namespace com {
namespace jci {

class aapa_proxy
: public ::DBus::InterfaceProxy
{
public:

    aapa_proxy()
    : ::DBus::InterfaceProxy("com.jci.aapa")
    {
        connect_signal(aapa_proxy, AOASessionStatus, _AOASessionStatus_stub);
        connect_signal(aapa_proxy, SendSessionInfo, _SendSessionInfo_stub);
        connect_signal(aapa_proxy, VideoProjectionRequestFromMD, _VideoProjectionRequestFromMD_stub);
        connect_signal(aapa_proxy, NowPlayingInfo, _NowPlayingInfo_stub);
        connect_signal(aapa_proxy, MDModeDisplayFirstDialog, _MDModeDisplayFirstDialog_stub);
        connect_signal(aapa_proxy, DisplayReconnectingDialog, _DisplayReconnectingDialog_stub);
        connect_signal(aapa_proxy, StartBtConnection, _StartBtConnection_stub);
        connect_signal(aapa_proxy, BTPairingRequest, _BTPairingRequest_stub);
        connect_signal(aapa_proxy, GetVehicleBtMacAddress, _GetVehicleBtMacAddress_stub);
        connect_signal(aapa_proxy, NotifySpeedThreshold, _NotifySpeedThreshold_stub);
        connect_signal(aapa_proxy, DisplaySbnInfo, _DisplaySbnInfo_stub);
        connect_signal(aapa_proxy, NotifyAudioFocusStatus, _NotifyAudioFocusStatus_stub);
        connect_signal(aapa_proxy, NotifyBTConnectionComplete, _NotifyBTConnectionComplete_stub);
        connect_signal(aapa_proxy, Available, _Available_stub);
        connect_signal(aapa_proxy, NotifyStopAndSetup, _NotifyStopAndSetup_stub);
        connect_signal(aapa_proxy, NotifyNoVideoSinkSetup, _NotifyNoVideoSinkSetup_stub);
        connect_signal(aapa_proxy, NotifyDeviceNotResponding, _NotifyDeviceNotResponding_stub);
        connect_signal(aapa_proxy, NotifyASRStatus, _NotifyASRStatus_stub);
        connect_signal(aapa_proxy, ProjectionStatusResult, _ProjectionStatusResult_stub);
        connect_signal(aapa_proxy, DisplayStopForSetupDialog, _DisplayStopForSetupDialog_stub);
        connect_signal(aapa_proxy, NotifyAANaviStatus, _NotifyAANaviStatus_stub);
        connect_signal(aapa_proxy, GetNativeTurnByTurnStatusRequest, _GetNativeTurnByTurnStatusRequest_stub);
        connect_signal(aapa_proxy, NotifyDeviceConnection, _NotifyDeviceConnection_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void MDSettingModeData(const uint32_t& selectMode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << selectMode;
        call.member("MDSettingModeData");
        ::DBus::Message ret = invoke_method (call);
    }

    void VideoProjectionEventToMD(const uint32_t& videoProjectionEvent)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << videoProjectionEvent;
        call.member("VideoProjectionEventToMD");
        ::DBus::Message ret = invoke_method (call);
    }

    void InputKey(const uint32_t& keyCode, const bool& absolute, const int32_t& step)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << keyCode;
        wi << absolute;
        wi << step;
        call.member("InputKey");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetRouteState(const uint32_t& state)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << state;
        call.member("SetRouteState");
        ::DBus::Message ret = invoke_method (call);
    }

    void GetNowPlayingInfo(::DBus::Struct< uint8_t, std::string, std::string, std::string, std::string >& nowPlayingInfo, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("GetNowPlayingInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> nowPlayingInfo;
        ri >> return_value;
    }

    void BTPairingResult(const bool& result)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << result;
        call.member("BTPairingResult");
        ::DBus::Message ret = invoke_method (call);
    }

    void BTReadyToPair(const bool& alreadyPaired)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << alreadyPaired;
        call.member("BTReadyToPair");
        ::DBus::Message ret = invoke_method (call);
    }

    void SendBTAuthenticationData(const std::string& btdata, const uint32_t& len)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << btdata;
        wi << len;
        call.member("SendBTAuthenticationData");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetVehicleBtMacAddress(const std::string& macaddr, const uint32_t& maclen)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << macaddr;
        wi << maclen;
        call.member("SetVehicleBtMacAddress");
        ::DBus::Message ret = invoke_method (call);
    }

    void NotifyBTHFCallStatus(const bool& status, const std::string& macaddr)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << status;
        wi << macaddr;
        call.member("NotifyBTHFCallStatus");
        ::DBus::Message ret = invoke_method (call);
    }

    void IntentPhoneCall(const std::string& phonenumber)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << phonenumber;
        call.member("IntentPhoneCall");
        ::DBus::Message ret = invoke_method (call);
    }

    void DialogWinkStatus(const bool& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << status;
        call.member("DialogWinkStatus");
        ::DBus::Message ret = invoke_method (call);
    }

    void ClearLastFocus(const ::DBus::Struct< bool, bool >& focusInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << focusInfo;
        call.member("ClearLastFocus");
        ::DBus::Message ret = invoke_method (call);
    }

    void SbnStatus(const bool& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << status;
        call.member("SbnStatus");
        ::DBus::Message ret = invoke_method (call);
    }

    void GetAOASessionStatus(bool& status, std::string& macaddr, uint32_t& maclen)
    {
        ::DBus::CallMessage call;
        call.member("GetAOASessionStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> status;
        ri >> macaddr;
        ri >> maclen;
    }

    uint8_t GetAvailable()
    {
        ::DBus::CallMessage call;
        call.member("GetAvailable");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< int32_t > SetNativeTurnByTurnStatus(const ::DBus::Struct< bool >& setNativeTurnByTurnStatus)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setNativeTurnByTurnStatus;
        call.member("SetNativeTurnByTurnStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< int32_t > argout;
        ri >> argout;
        return argout;
    }

    int32_t SetMP911EmergencyCallStatus(const uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << status;
        call.member("SetMP911EmergencyCallStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void AOASessionStatus(const bool& enable) = 0;
    virtual void SendSessionInfo(const std::string& deviceName) = 0;
    virtual void VideoProjectionRequestFromMD(const uint32_t& enable) = 0;
    virtual void NowPlayingInfo(const ::DBus::Struct< uint8_t, std::string, std::string, std::string, std::string >& nowPlayingInfo) = 0;
    virtual void MDModeDisplayFirstDialog(const bool& displayFirstDialog) = 0;
    virtual void DisplayReconnectingDialog(const bool& enable) = 0;
    virtual void StartBtConnection() = 0;
    virtual void BTPairingRequest(const std::string& macaddr, const uint32_t& maclen, const bool& method) = 0;
    virtual void GetVehicleBtMacAddress() = 0;
    virtual void NotifySpeedThreshold(const bool& enable) = 0;
    virtual void DisplaySbnInfo(const uint32_t& info) = 0;
    virtual void NotifyAudioFocusStatus(const uint32_t& status) = 0;
    virtual void NotifyBTConnectionComplete(const bool& enable) = 0;
    virtual void Available(const uint8_t& available) = 0;
    virtual void NotifyStopAndSetup(const uint32_t& displaySASDialog) = 0;
    virtual void NotifyNoVideoSinkSetup(const bool& displayNVSSDialog) = 0;
    virtual void NotifyDeviceNotResponding(const bool& displayDNR) = 0;
    virtual void NotifyASRStatus(const bool& enable) = 0;
    virtual void ProjectionStatusResult(const bool& enable) = 0;
    virtual void DisplayStopForSetupDialog(const bool& enable) = 0;
    virtual void NotifyAANaviStatus(const int32_t& status) = 0;
    virtual void GetNativeTurnByTurnStatusRequest() = 0;
    virtual void NotifyDeviceConnection(const bool& status) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _AOASessionStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool enable;
        ri >> enable;
        AOASessionStatus(enable);
    }
    void _SendSessionInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string deviceName;
        ri >> deviceName;
        SendSessionInfo(deviceName);
    }
    void _VideoProjectionRequestFromMD_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t enable;
        ri >> enable;
        VideoProjectionRequestFromMD(enable);
    }
    void _NowPlayingInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::string, std::string, std::string, std::string > nowPlayingInfo;
        ri >> nowPlayingInfo;
        NowPlayingInfo(nowPlayingInfo);
    }
    void _MDModeDisplayFirstDialog_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool displayFirstDialog;
        ri >> displayFirstDialog;
        MDModeDisplayFirstDialog(displayFirstDialog);
    }
    void _DisplayReconnectingDialog_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool enable;
        ri >> enable;
        DisplayReconnectingDialog(enable);
    }
    void _StartBtConnection_stub(const ::DBus::SignalMessage &sig)
    {
        StartBtConnection();
    }
    void _BTPairingRequest_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string macaddr;
        ri >> macaddr;
        uint32_t maclen;
        ri >> maclen;
        bool method;
        ri >> method;
        BTPairingRequest(macaddr, maclen, method);
    }
    void _GetVehicleBtMacAddress_stub(const ::DBus::SignalMessage &sig)
    {
        GetVehicleBtMacAddress();
    }
    void _NotifySpeedThreshold_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool enable;
        ri >> enable;
        NotifySpeedThreshold(enable);
    }
    void _DisplaySbnInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t info;
        ri >> info;
        DisplaySbnInfo(info);
    }
    void _NotifyAudioFocusStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t status;
        ri >> status;
        NotifyAudioFocusStatus(status);
    }
    void _NotifyBTConnectionComplete_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool enable;
        ri >> enable;
        NotifyBTConnectionComplete(enable);
    }
    void _Available_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t available;
        ri >> available;
        Available(available);
    }
    void _NotifyStopAndSetup_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t displaySASDialog;
        ri >> displaySASDialog;
        NotifyStopAndSetup(displaySASDialog);
    }
    void _NotifyNoVideoSinkSetup_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool displayNVSSDialog;
        ri >> displayNVSSDialog;
        NotifyNoVideoSinkSetup(displayNVSSDialog);
    }
    void _NotifyDeviceNotResponding_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool displayDNR;
        ri >> displayDNR;
        NotifyDeviceNotResponding(displayDNR);
    }
    void _NotifyASRStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool enable;
        ri >> enable;
        NotifyASRStatus(enable);
    }
    void _ProjectionStatusResult_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool enable;
        ri >> enable;
        ProjectionStatusResult(enable);
    }
    void _DisplayStopForSetupDialog_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool enable;
        ri >> enable;
        DisplayStopForSetupDialog(enable);
    }
    void _NotifyAANaviStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t status;
        ri >> status;
        NotifyAANaviStatus(status);
    }
    void _GetNativeTurnByTurnStatusRequest_stub(const ::DBus::SignalMessage &sig)
    {
        GetNativeTurnByTurnStatusRequest();
    }
    void _NotifyDeviceConnection_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool status;
        ri >> status;
        NotifyDeviceConnection(status);
    }
};

} } 
namespace com {
namespace jci {

class audiosettings_proxy
: public ::DBus::InterfaceProxy
{
public:

    audiosettings_proxy()
    : ::DBus::InterfaceProxy("com.jci.audiosettings")
    {
        connect_signal(audiosettings_proxy, BLM_SettingInfo, _BLM_SettingInfo_stub);
        connect_signal(audiosettings_proxy, BLM_VolumeLevel, _BLM_VolumeLevel_stub);
        connect_signal(audiosettings_proxy, BLM_EnableDisableSettingsType, _BLM_EnableDisableSettingsType_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t BLM_GetSettingInfo(const int32_t& setting_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setting_type;
        call.member("BLM_GetSettingInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t BLM_SetVolume(const int32_t& setting_type, const int32_t& absolute, const int32_t& step, const std::string& string_to_play)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setting_type;
        wi << absolute;
        wi << step;
        wi << string_to_play;
        call.member("BLM_SetVolume");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Exit()
    {
        ::DBus::CallMessage call;
        call.member("Exit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t BLM_Exit()
    {
        ::DBus::CallMessage call;
        call.member("BLM_Exit");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void BLM_BeepPlay(const int32_t& beep_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << beep_type;
        call.member("BLM_BeepPlay");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t BLM_BeepPlay_Async(const int32_t& beep_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << beep_type;
        call.member("BLM_BeepPlay_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t BLM_BeepSet_Async(const int32_t& beep_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << beep_type;
        call.member("BLM_BeepSet_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t BLM_GetEnableDisableInfo(const int32_t& setting_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setting_type;
        call.member("BLM_GetEnableDisableInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void BLM_SettingInfo(const int32_t& setting_type, const int32_t& enabled, const int32_t& currentstep, const int32_t& min, const int32_t& max) = 0;
    virtual void BLM_VolumeLevel(const int32_t& setting_type, const int32_t& absolute, const int32_t& step, const int32_t& currentstep) = 0;
    virtual void BLM_EnableDisableSettingsType(const int32_t& setting_type, const bool& status) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _BLM_SettingInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t setting_type;
        ri >> setting_type;
        int32_t enabled;
        ri >> enabled;
        int32_t currentstep;
        ri >> currentstep;
        int32_t min;
        ri >> min;
        int32_t max;
        ri >> max;
        BLM_SettingInfo(setting_type, enabled, currentstep, min, max);
    }
    void _BLM_VolumeLevel_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t setting_type;
        ri >> setting_type;
        int32_t absolute;
        ri >> absolute;
        int32_t step;
        ri >> step;
        int32_t currentstep;
        ri >> currentstep;
        BLM_VolumeLevel(setting_type, absolute, step, currentstep);
    }
    void _BLM_EnableDisableSettingsType_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t setting_type;
        ri >> setting_type;
        bool status;
        ri >> status;
        BLM_EnableDisableSettingsType(setting_type, status);
    }
};

} } 
namespace com {
namespace jci {

class vdtcon_proxy
: public ::DBus::InterfaceProxy
{
public:

    vdtcon_proxy()
    : ::DBus::InterfaceProxy("com.jci.vdtcon")
    {
        connect_signal(vdtcon_proxy, MediaStatus, _MediaStatus_stub);
        connect_signal(vdtcon_proxy, TransferRequest, _TransferRequest_stub);
        connect_signal(vdtcon_proxy, DeleteRequest, _DeleteRequest_stub);
        connect_signal(vdtcon_proxy, TransferResult, _TransferResult_stub);
        connect_signal(vdtcon_proxy, DeleteResult, _DeleteResult_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t SelectMedia(const int32_t& mediaType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mediaType;
        call.member("SelectMedia");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SelectMedia_Async(const int32_t& mediaType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mediaType;
        call.member("SelectMedia_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Send(const std::string& srcFileName, const std::string& destFileName, const ::DBus::Struct< ::DBus::Struct< uint32_t, uint32_t, bool >, bool, bool, int32_t, int32_t >& sendParams)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << srcFileName;
        wi << destFileName;
        wi << sendParams;
        call.member("Send");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Send_Async(const std::string& srcFileName, const std::string& destFileName, const ::DBus::Struct< ::DBus::Struct< uint32_t, uint32_t, bool >, bool, bool, int32_t, int32_t >& sendParams)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << srcFileName;
        wi << destFileName;
        wi << sendParams;
        call.member("Send_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Delete(const std::string& fileName, const ::DBus::Struct< int32_t, int32_t >& deleteParams)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fileName;
        wi << deleteParams;
        call.member("Delete");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Delete_Async(const std::string& fileName, const ::DBus::Struct< int32_t, int32_t >& deleteParams)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fileName;
        wi << deleteParams;
        call.member("Delete_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void MediaStatus(const ::DBus::Struct< int32_t, int32_t, int32_t >& status) = 0;
    virtual void TransferRequest(const std::string& fileName, const ::DBus::Struct< int32_t >& request) = 0;
    virtual void DeleteRequest(const std::string& fileName, const ::DBus::Struct< int32_t >& request) = 0;
    virtual void TransferResult(const std::string& fileName, const ::DBus::Struct< int32_t, int32_t >& result) = 0;
    virtual void DeleteResult(const std::string& fileName, const ::DBus::Struct< int32_t, int32_t >& result) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _MediaStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t, int32_t > status;
        ri >> status;
        MediaStatus(status);
    }
    void _TransferRequest_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string fileName;
        ri >> fileName;
        ::DBus::Struct< int32_t > request;
        ri >> request;
        TransferRequest(fileName, request);
    }
    void _DeleteRequest_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string fileName;
        ri >> fileName;
        ::DBus::Struct< int32_t > request;
        ri >> request;
        DeleteRequest(fileName, request);
    }
    void _TransferResult_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string fileName;
        ri >> fileName;
        ::DBus::Struct< int32_t, int32_t > result;
        ri >> result;
        TransferResult(fileName, result);
    }
    void _DeleteResult_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string fileName;
        ri >> fileName;
        ::DBus::Struct< int32_t, int32_t > result;
        ri >> result;
        DeleteResult(fileName, result);
    }
};

} } 
namespace com {
namespace jci {
namespace RM_Ipc_Cons {

class Interface_proxy
: public ::DBus::InterfaceProxy
{
public:

    Interface_proxy()
    : ::DBus::InterfaceProxy("com.jci.RM_Ipc_Cons.Interface")
    {
        connect_signal(Interface_proxy, acquire_resource_cb, _acquire_resource_cb_stub);
        connect_signal(Interface_proxy, release_command_cb, _release_command_cb_stub);
        connect_signal(Interface_proxy, resource_event_cb, _resource_event_cb_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Connect(const uint32_t& in_consPID, const std::string& in_consName, const uint32_t& in_consConn, const uint32_t& in_consContext, const uint32_t& in_seqId, int32_t& out_result, uint32_t& out_consPID, std::string& out_consName, uint32_t& out_consConn, uint32_t& out_consContext, uint32_t& out_seqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_consPID;
        wi << in_consName;
        wi << in_consConn;
        wi << in_consContext;
        wi << in_seqId;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_consPID;
        ri >> out_consName;
        ri >> out_consConn;
        ri >> out_consContext;
        ri >> out_seqId;
    }

    void Disconnect(const uint32_t& in_consPID, const std::string& in_consName, const uint32_t& in_consConn, const uint32_t& in_consContext, const uint32_t& in_seqId, int32_t& out_result, uint32_t& out_consPID, std::string& out_consName, uint32_t& out_consConn, uint32_t& out_consContext, uint32_t& out_seqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_consPID;
        wi << in_consName;
        wi << in_consConn;
        wi << in_consContext;
        wi << in_seqId;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_consPID;
        ri >> out_consName;
        ri >> out_consConn;
        ri >> out_consContext;
        ri >> out_seqId;
    }

    void AcquireResource(const std::string& in_resName, const int32_t& in_action, const std::string& in_consName, const uint32_t& in_consConn, const uint32_t& in_consContext, const uint32_t& in_seqId, std::string& out_resName, int32_t& out_result, int32_t& out_action, std::string& out_consName, uint32_t& out_consConn, uint32_t& out_consContext, uint32_t& out_seqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_resName;
        wi << in_action;
        wi << in_consName;
        wi << in_consConn;
        wi << in_consContext;
        wi << in_seqId;
        call.member("AcquireResource");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_resName;
        ri >> out_result;
        ri >> out_action;
        ri >> out_consName;
        ri >> out_consConn;
        ri >> out_consContext;
        ri >> out_seqId;
    }

    void ReleaseResource(const std::string& in_resName, const int32_t& in_action, const std::string& in_consName, const uint32_t& in_consConn, const uint32_t& in_consContext, const uint32_t& in_seqId, std::string& out_resName, int32_t& out_result, int32_t& out_action, std::string& out_consName, uint32_t& out_consConn, uint32_t& out_consContext, uint32_t& out_seqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_resName;
        wi << in_action;
        wi << in_consName;
        wi << in_consConn;
        wi << in_consContext;
        wi << in_seqId;
        call.member("ReleaseResource");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_resName;
        ri >> out_result;
        ri >> out_action;
        ri >> out_consName;
        ri >> out_consConn;
        ri >> out_consContext;
        ri >> out_seqId;
    }

    void GetResourceInfo(const std::string& in_resName, const std::string& in_consName, const uint32_t& in_consConn, const uint32_t& in_consContext, const uint32_t& in_seqId, std::string& out_resName, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, int32_t, std::vector< uint8_t > > > >& in_attributes, int32_t& out_status, int32_t& out_result, std::string& out_consName, uint32_t& out_consConn, uint32_t& out_consContext, uint32_t& out_seqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_resName;
        wi << in_consName;
        wi << in_consConn;
        wi << in_consContext;
        wi << in_seqId;
        call.member("GetResourceInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_resName;
        ri >> in_attributes;
        ri >> out_status;
        ri >> out_result;
        ri >> out_consName;
        ri >> out_consConn;
        ri >> out_consContext;
        ri >> out_seqId;
    }

    void SubscribeForEvent(const std::string& in_resName, const int32_t& in_status, const std::string& in_consName, const uint32_t& in_consConn, const uint32_t& in_consContext, const uint32_t& in_seqId, std::string& out_resName, int32_t& out_subscrStatus, int32_t& out_result, int32_t& out_currStatus, std::string& out_consName, uint32_t& out_consConn, uint32_t& out_consContext, uint32_t& out_seqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_resName;
        wi << in_status;
        wi << in_consName;
        wi << in_consConn;
        wi << in_consContext;
        wi << in_seqId;
        call.member("SubscribeForEvent");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_resName;
        ri >> out_subscrStatus;
        ri >> out_result;
        ri >> out_currStatus;
        ri >> out_consName;
        ri >> out_consConn;
        ri >> out_consContext;
        ri >> out_seqId;
    }

    void UnsubscribeFromEvent(const std::string& in_resName, const int32_t& in_status, const std::string& in_consName, const uint32_t& in_consConn, const uint32_t& in_consContext, const uint32_t& in_seqId, std::string& out_resName, int32_t& out_status, int32_t& out_result, std::string& out_consName, uint32_t& out_consConn, uint32_t& out_consContext, uint32_t& out_seqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_resName;
        wi << in_status;
        wi << in_consName;
        wi << in_consConn;
        wi << in_consContext;
        wi << in_seqId;
        call.member("UnsubscribeFromEvent");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_resName;
        ri >> out_status;
        ri >> out_result;
        ri >> out_consName;
        ri >> out_consConn;
        ri >> out_consContext;
        ri >> out_seqId;
    }


public:

    /* signal handlers for this interface
     */
    virtual void acquire_resource_cb(const std::string& resName, const int32_t& result, const int32_t& action, const std::string& consName, const uint32_t& consConn, const uint32_t& consContext, const uint32_t& seqId) = 0;
    virtual void release_command_cb(const std::string& resName, const std::string& consName, const uint32_t& consConn, const uint32_t& consContext) = 0;
    virtual void resource_event_cb(const std::string& resName, const ::DBus::Struct< std::vector< ::DBus::Struct< std::string, int32_t, std::vector< uint8_t > > > >& attributes, const int32_t& status, const std::string& consName, const uint32_t& consConn, const uint32_t& consContext) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _acquire_resource_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string resName;
        ri >> resName;
        int32_t result;
        ri >> result;
        int32_t action;
        ri >> action;
        std::string consName;
        ri >> consName;
        uint32_t consConn;
        ri >> consConn;
        uint32_t consContext;
        ri >> consContext;
        uint32_t seqId;
        ri >> seqId;
        acquire_resource_cb(resName, result, action, consName, consConn, consContext, seqId);
    }
    void _release_command_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string resName;
        ri >> resName;
        std::string consName;
        ri >> consName;
        uint32_t consConn;
        ri >> consConn;
        uint32_t consContext;
        ri >> consContext;
        release_command_cb(resName, consName, consConn, consContext);
    }
    void _resource_event_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string resName;
        ri >> resName;
        ::DBus::Struct< std::vector< ::DBus::Struct< std::string, int32_t, std::vector< uint8_t > > > > attributes;
        ri >> attributes;
        int32_t status;
        ri >> status;
        std::string consName;
        ri >> consName;
        uint32_t consConn;
        ri >> consConn;
        uint32_t consContext;
        ri >> consContext;
        resource_event_cb(resName, attributes, status, consName, consConn, consContext);
    }
};

} } } 
namespace com {
namespace jci {
namespace RM_Ipc_Prov {

class Interface_proxy
: public ::DBus::InterfaceProxy
{
public:

    Interface_proxy()
    : ::DBus::InterfaceProxy("com.jci.RM_Ipc_Prov.Interface")
    {
        connect_signal(Interface_proxy, activate_resource_cb, _activate_resource_cb_stub);
        connect_signal(Interface_proxy, deactivate_resource_cb, _deactivate_resource_cb_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Connect(const uint32_t& in_provPID, const std::string& in_provName, const uint32_t& in_provConn, const uint32_t& in_provContext, const uint32_t& in_seqId, int32_t& out_result, uint32_t& out_provPID, std::string& out_provName, uint32_t& out_provConn, uint32_t& out_provContext, uint32_t& out_seqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_provPID;
        wi << in_provName;
        wi << in_provConn;
        wi << in_provContext;
        wi << in_seqId;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_provPID;
        ri >> out_provName;
        ri >> out_provConn;
        ri >> out_provContext;
        ri >> out_seqId;
    }

    void PreConnect(const uint32_t& in_provPID, const std::string& in_provName, int32_t& out_result, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_provPID;
        wi << in_provName;
        call.member("PreConnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> return_value;
    }

    void Disconnect(const bool& in_force, const uint32_t& in_provPID, const std::string& in_provName, const uint32_t& in_provConn, const uint32_t& in_provContext, const uint32_t& in_seqId, int32_t& out_result, uint32_t& out_provPID, std::string& out_provName, uint32_t& out_provConn, uint32_t& out_provContext, uint32_t& out_seqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_force;
        wi << in_provPID;
        wi << in_provName;
        wi << in_provConn;
        wi << in_provContext;
        wi << in_seqId;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_result;
        ri >> out_provPID;
        ri >> out_provName;
        ri >> out_provConn;
        ri >> out_provContext;
        ri >> out_seqId;
    }

    void RegisterResource(const std::string& in_resName, const ::DBus::Struct< std::vector< ::DBus::Struct< std::string, int32_t, std::vector< uint8_t > > > >& in_attributes, const bool& in_supportActDeactLogic, const std::string& in_provName, const uint32_t& in_provConn, const uint32_t& in_provContext, const uint32_t& in_seqId, std::string& out_resName, int32_t& out_result, std::string& out_provName, uint32_t& out_provConn, uint32_t& out_provContext, uint32_t& out_seqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_resName;
        wi << in_attributes;
        wi << in_supportActDeactLogic;
        wi << in_provName;
        wi << in_provConn;
        wi << in_provContext;
        wi << in_seqId;
        call.member("RegisterResource");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_resName;
        ri >> out_result;
        ri >> out_provName;
        ri >> out_provConn;
        ri >> out_provContext;
        ri >> out_seqId;
    }

    void UnregisterResource(const std::string& in_resName, const ::DBus::Struct< std::vector< ::DBus::Struct< std::string, int32_t, std::vector< uint8_t > > > >& in_attributes, const bool& in_force, const std::string& in_provName, const uint32_t& in_provConn, const uint32_t& in_provContext, const uint32_t& in_seqId, std::string& out_resName, int32_t& out_result, std::string& out_provName, uint32_t& out_provConn, uint32_t& out_provContext, uint32_t& out_seqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_resName;
        wi << in_attributes;
        wi << in_force;
        wi << in_provName;
        wi << in_provConn;
        wi << in_provContext;
        wi << in_seqId;
        call.member("UnregisterResource");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> out_resName;
        ri >> out_result;
        ri >> out_provName;
        ri >> out_provConn;
        ri >> out_provContext;
        ri >> out_seqId;
    }

    int32_t ActivateResourceResponse(const std::string& in_resName, const ::DBus::Struct< std::vector< ::DBus::Struct< std::string, int32_t, std::vector< uint8_t > > > >& in_attributes, const int32_t& in_result, const std::string& in_provName, const uint32_t& in_provConn)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_resName;
        wi << in_attributes;
        wi << in_result;
        wi << in_provName;
        wi << in_provConn;
        call.member("ActivateResourceResponse");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DeactivateResourceResponse(const std::string& in_resName, const ::DBus::Struct< std::vector< ::DBus::Struct< std::string, int32_t, std::vector< uint8_t > > > >& in_attributes, const int32_t& in_result, const std::string& in_provName, const uint32_t& in_provConn)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << in_resName;
        wi << in_attributes;
        wi << in_result;
        wi << in_provName;
        wi << in_provConn;
        call.member("DeactivateResourceResponse");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void activate_resource_cb(const std::string& resName, const std::string& provName, const uint32_t& provConn, const uint32_t& provContext) = 0;
    virtual void deactivate_resource_cb(const std::string& resName, const std::string& provName, const uint32_t& provConn, const uint32_t& provContext) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _activate_resource_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string resName;
        ri >> resName;
        std::string provName;
        ri >> provName;
        uint32_t provConn;
        ri >> provConn;
        uint32_t provContext;
        ri >> provContext;
        activate_resource_cb(resName, provName, provConn, provContext);
    }
    void _deactivate_resource_cb_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string resName;
        ri >> resName;
        std::string provName;
        ri >> provName;
        uint32_t provConn;
        ri >> provConn;
        uint32_t provContext;
        ri >> provContext;
        deactivate_resource_cb(resName, provName, provConn, provContext);
    }
};

} } } 
namespace com {
namespace jci {

class bucpsa_proxy
: public ::DBus::InterfaceProxy
{
public:

    bucpsa_proxy()
    : ::DBus::InterfaceProxy("com.jci.bucpsa")
    {
        connect_signal(bucpsa_proxy, CommandResponse, _CommandResponse_stub);
        connect_signal(bucpsa_proxy, DisplayMode, _DisplayMode_stub);
        connect_signal(bucpsa_proxy, ReverseStatusChanged, _ReverseStatusChanged_stub);
        connect_signal(bucpsa_proxy, PSMInstallStatusChanged, _PSMInstallStatusChanged_stub);
        connect_signal(bucpsa_proxy, CameraType, _CameraType_stub);
        connect_signal(bucpsa_proxy, SteeringWheelLocation, _SteeringWheelLocation_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t GetReverseStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetReverseStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DisplayCommand(const uint32_t& command)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << command;
        call.member("DisplayCommand");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetDisplayMode_async(uint32_t& currentDisplayMode, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("GetDisplayMode_async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> currentDisplayMode;
        ri >> return_value;
    }

    void GetDisplayMode(uint32_t& currentDisplayMode, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("GetDisplayMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> currentDisplayMode;
        ri >> return_value;
    }

    int32_t SetPSMEnabled(const uint8_t& psmEnabled)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << psmEnabled;
        call.member("SetPSMEnabled");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetPSMInstalledStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetPSMInstalledStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t GetSteeringWheelLocation()
    {
        ::DBus::CallMessage call;
        call.member("GetSteeringWheelLocation");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void CommandResponse(const uint32_t& cmdResponse) = 0;
    virtual void DisplayMode(const uint32_t& currentDisplayMode) = 0;
    virtual void ReverseStatusChanged(const int32_t& reverseStatus) = 0;
    virtual void PSMInstallStatusChanged(const uint8_t& psmInstalled) = 0;
    virtual void CameraType(const uint32_t& currentCameraType) = 0;
    virtual void SteeringWheelLocation(const uint32_t& currentSteeringWheelLocation) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _CommandResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t cmdResponse;
        ri >> cmdResponse;
        CommandResponse(cmdResponse);
    }
    void _DisplayMode_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t currentDisplayMode;
        ri >> currentDisplayMode;
        DisplayMode(currentDisplayMode);
    }
    void _ReverseStatusChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t reverseStatus;
        ri >> reverseStatus;
        ReverseStatusChanged(reverseStatus);
    }
    void _PSMInstallStatusChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t psmInstalled;
        ri >> psmInstalled;
        PSMInstallStatusChanged(psmInstalled);
    }
    void _CameraType_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t currentCameraType;
        ri >> currentCameraType;
        CameraType(currentCameraType);
    }
    void _SteeringWheelLocation_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t currentSteeringWheelLocation;
        ri >> currentSteeringWheelLocation;
        SteeringWheelLocation(currentSteeringWheelLocation);
    }
};

} } 
namespace com {
namespace jci {

class vwm_proxy
: public ::DBus::InterfaceProxy
{
public:

    vwm_proxy()
    : ::DBus::InterfaceProxy("com.jci.vwm")
    {
        connect_signal(vwm_proxy, wGuideSettings, _wGuideSettings_stub);
        connect_signal(vwm_proxy, wGuideActiveAlerts, _wGuideActiveAlerts_stub);
        connect_signal(vwm_proxy, wGuideNewHighAlerts, _wGuideNewHighAlerts_stub);
        connect_signal(vwm_proxy, ScdMntSettingDataAsyncResp, _ScdMntSettingDataAsyncResp_stub);
        connect_signal(vwm_proxy, SchedMaintRemainingDist, _SchedMaintRemainingDist_stub);
        connect_signal(vwm_proxy, SchedMaintRemainingTime, _SchedMaintRemainingTime_stub);
        connect_signal(vwm_proxy, TireRotationRemainingDist, _TireRotationRemainingDist_stub);
        connect_signal(vwm_proxy, OilLife, _OilLife_stub);
        connect_signal(vwm_proxy, VehicleStatusMonitor, _VehicleStatusMonitor_stub);
        connect_signal(vwm_proxy, OilLevelStatus, _OilLevelStatus_stub);
        connect_signal(vwm_proxy, schdMntDue, _schdMntDue_stub);
        connect_signal(vwm_proxy, OilChangeRemainingDist, _OilChangeRemainingDist_stub);
        connect_signal(vwm_proxy, SchMntSettingChangeStatus, _SchMntSettingChangeStatus_stub);
        connect_signal(vwm_proxy, Dismiss_High_Alert, _Dismiss_High_Alert_stub);
        connect_signal(vwm_proxy, Curr_VWMData, _Curr_VWMData_stub);
        connect_signal(vwm_proxy, FSC_Types, _FSC_Types_stub);
        connect_signal(vwm_proxy, VehicleModelType, _VehicleModelType_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t getWGuideSettings()
    {
        ::DBus::CallMessage call;
        call.member("getWGuideSettings");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t getActiveAlertList(const uint32_t& warningScreen)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << warningScreen;
        call.member("getActiveAlertList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Maintenance_Req(const uint32_t& maintenanceScreen)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << maintenanceScreen;
        call.member("Maintenance_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Sched_Maintenance_Req(const uint32_t& schedMaintenanceScreen)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << schedMaintenanceScreen;
        call.member("Sched_Maintenance_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Tire_Maintenance_Req(const uint32_t& tireMaintenanceScreen)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tireMaintenanceScreen;
        call.member("Tire_Maintenance_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Oil_Deterioration_Maintenance_Req(const uint32_t& oilDeteriorationMaintenanceScreen)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << oilDeteriorationMaintenanceScreen;
        call.member("Oil_Deterioration_Maintenance_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetScdMntSettingData()
    {
        ::DBus::CallMessage call;
        call.member("GetScdMntSettingData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetSchdMaintUpdateEnable(const int32_t& vWM_SchMaintUpdateModule, const bool& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << vWM_SchMaintUpdateModule;
        wi << status;
        call.member("SetSchdMaintUpdateEnable");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t setOilChangeSetting(const int32_t& vWM_OilChangeSettingStatus)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << vWM_OilChangeSettingStatus;
        call.member("setOilChangeSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void setSchedMaintSetting(const int32_t& vWM_ScdMaintSettingStatus)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << vWM_ScdMaintSettingStatus;
        call.member("setSchedMaintSetting");
        ::DBus::Message ret = invoke_method (call);
    }

    void setTireRotMaintSetting(const int32_t& vWM_TireRotMaintSettingStatus)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << vWM_TireRotMaintSettingStatus;
        call.member("setTireRotMaintSetting");
        ::DBus::Message ret = invoke_method (call);
    }

    void SchMntResetRq(const int32_t& resetProperty)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << resetProperty;
        call.member("SchMntResetRq");
        ::DBus::Message ret = invoke_method (call);
    }

    void setSchedMaintSetDist(const int32_t& schMaintDistRem)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << schMaintDistRem;
        call.member("setSchedMaintSetDist");
        ::DBus::Message ret = invoke_method (call);
    }

    void setSchedMaintSetTime(const int32_t& schMaintTimeRem)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << schMaintTimeRem;
        call.member("setSchedMaintSetTime");
        ::DBus::Message ret = invoke_method (call);
    }

    void setTireRotMaintSetDist(const int32_t& tireRotMaintDistRem)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tireRotMaintDistRem;
        call.member("setTireRotMaintSetDist");
        ::DBus::Message ret = invoke_method (call);
    }

    void setOilMaintSetDist(const int32_t& oiltMaintDistRem)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << oiltMaintDistRem;
        call.member("setOilMaintSetDist");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t GetVWMData()
    {
        ::DBus::CallMessage call;
        call.member("GetVWMData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void wGuideSettings(const int32_t& maxHighPriorityAlerts) = 0;
    virtual void wGuideActiveAlerts(const ::DBus::Struct< int32_t, std::vector< uint8_t > >& warning_info) = 0;
    virtual void wGuideNewHighAlerts(const ::DBus::Struct< int32_t, std::vector< uint8_t > >& warning_ha_info) = 0;
    virtual void ScdMntSettingDataAsyncResp(const ::DBus::Struct< bool, uint32_t, int32_t, int32_t, int32_t, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, uint32_t, uint32_t, uint32_t, uint32_t >& vWM_Scheduled_Maintenance_Data) = 0;
    virtual void SchedMaintRemainingDist(const int32_t& scheduled_maint_dist, const uint32_t& scheduled_maint_dist_unit) = 0;
    virtual void SchedMaintRemainingTime(const int32_t& scheduled_maint_time) = 0;
    virtual void TireRotationRemainingDist(const int32_t& tire_rota_rem_dist, const uint32_t& tire_rota_rem_unit) = 0;
    virtual void OilLife(const int32_t& oil_life_level, const int32_t& oil_life_DistRemaining) = 0;
    virtual void VehicleStatusMonitor(const bool& vehicle_Status_Monitor) = 0;
    virtual void OilLevelStatus(const int32_t& vWM_OilLevelStatus) = 0;
    virtual void schdMntDue(const int32_t& vWM_ScheduleMaintUpdateEnable, const bool& status, const int32_t& vWM_ScheduleMaint_DueValue) = 0;
    virtual void OilChangeRemainingDist(const int32_t& oilChangeDistRemaining, const uint32_t& unit) = 0;
    virtual void SchMntSettingChangeStatus(const int32_t& vWM_SchMaintStatusChange) = 0;
    virtual void Dismiss_High_Alert(const int32_t& vWM_High_Alert_Dismiss) = 0;
    virtual void Curr_VWMData(const ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, uint32_t, bool, bool, bool, bool, uint8_t >& vWM_Data) = 0;
    virtual void FSC_Types(const int32_t& fSC_Type) = 0;
    virtual void VehicleModelType(const uint16_t& model_type, const uint8_t& cMUModel) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _wGuideSettings_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t maxHighPriorityAlerts;
        ri >> maxHighPriorityAlerts;
        wGuideSettings(maxHighPriorityAlerts);
    }
    void _wGuideActiveAlerts_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, std::vector< uint8_t > > warning_info;
        ri >> warning_info;
        wGuideActiveAlerts(warning_info);
    }
    void _wGuideNewHighAlerts_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, std::vector< uint8_t > > warning_ha_info;
        ri >> warning_ha_info;
        wGuideNewHighAlerts(warning_ha_info);
    }
    void _ScdMntSettingDataAsyncResp_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< bool, uint32_t, int32_t, int32_t, int32_t, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, uint32_t, uint32_t, uint32_t, uint32_t > vWM_Scheduled_Maintenance_Data;
        ri >> vWM_Scheduled_Maintenance_Data;
        ScdMntSettingDataAsyncResp(vWM_Scheduled_Maintenance_Data);
    }
    void _SchedMaintRemainingDist_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t scheduled_maint_dist;
        ri >> scheduled_maint_dist;
        uint32_t scheduled_maint_dist_unit;
        ri >> scheduled_maint_dist_unit;
        SchedMaintRemainingDist(scheduled_maint_dist, scheduled_maint_dist_unit);
    }
    void _SchedMaintRemainingTime_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t scheduled_maint_time;
        ri >> scheduled_maint_time;
        SchedMaintRemainingTime(scheduled_maint_time);
    }
    void _TireRotationRemainingDist_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t tire_rota_rem_dist;
        ri >> tire_rota_rem_dist;
        uint32_t tire_rota_rem_unit;
        ri >> tire_rota_rem_unit;
        TireRotationRemainingDist(tire_rota_rem_dist, tire_rota_rem_unit);
    }
    void _OilLife_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t oil_life_level;
        ri >> oil_life_level;
        int32_t oil_life_DistRemaining;
        ri >> oil_life_DistRemaining;
        OilLife(oil_life_level, oil_life_DistRemaining);
    }
    void _VehicleStatusMonitor_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool vehicle_Status_Monitor;
        ri >> vehicle_Status_Monitor;
        VehicleStatusMonitor(vehicle_Status_Monitor);
    }
    void _OilLevelStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t vWM_OilLevelStatus;
        ri >> vWM_OilLevelStatus;
        OilLevelStatus(vWM_OilLevelStatus);
    }
    void _schdMntDue_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t vWM_ScheduleMaintUpdateEnable;
        ri >> vWM_ScheduleMaintUpdateEnable;
        bool status;
        ri >> status;
        int32_t vWM_ScheduleMaint_DueValue;
        ri >> vWM_ScheduleMaint_DueValue;
        schdMntDue(vWM_ScheduleMaintUpdateEnable, status, vWM_ScheduleMaint_DueValue);
    }
    void _OilChangeRemainingDist_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t oilChangeDistRemaining;
        ri >> oilChangeDistRemaining;
        uint32_t unit;
        ri >> unit;
        OilChangeRemainingDist(oilChangeDistRemaining, unit);
    }
    void _SchMntSettingChangeStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t vWM_SchMaintStatusChange;
        ri >> vWM_SchMaintStatusChange;
        SchMntSettingChangeStatus(vWM_SchMaintStatusChange);
    }
    void _Dismiss_High_Alert_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t vWM_High_Alert_Dismiss;
        ri >> vWM_High_Alert_Dismiss;
        Dismiss_High_Alert(vWM_High_Alert_Dismiss);
    }
    void _Curr_VWMData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, uint32_t, bool, bool, bool, bool, uint8_t > vWM_Data;
        ri >> vWM_Data;
        Curr_VWMData(vWM_Data);
    }
    void _FSC_Types_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t fSC_Type;
        ri >> fSC_Type;
        FSC_Types(fSC_Type);
    }
    void _VehicleModelType_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint16_t model_type;
        ri >> model_type;
        uint8_t cMUModel;
        ri >> cMUModel;
        VehicleModelType(model_type, cMUModel);
    }
};

} } 
namespace com {
namespace jci {

class eem_proxy
: public ::DBus::InterfaceProxy
{
public:

    eem_proxy()
    : ::DBus::InterfaceProxy("com.jci.eem")
    {
        connect_signal(eem_proxy, SetEquippedData, _SetEquippedData_stub);
        connect_signal(eem_proxy, Setting_ResetResponse, _Setting_ResetResponse_stub);
        connect_signal(eem_proxy, CMU_UMPResetResponse, _CMU_UMPResetResponse_stub);
        connect_signal(eem_proxy, HVD_EEMEndSet, _HVD_EEMEndSet_stub);
        connect_signal(eem_proxy, StDisEco_Active, _StDisEco_Active_stub);
        connect_signal(eem_proxy, HVD_CstmzRq_Trip, _HVD_CstmzRq_Trip_stub);
        connect_signal(eem_proxy, EEMEndDispConf, _EEMEndDispConf_stub);
        connect_signal(eem_proxy, IEloop_ControlStatus, _IEloop_ControlStatus_stub);
        connect_signal(eem_proxy, Cumulative_Avg_Fuel_Economy, _Cumulative_Avg_Fuel_Economy_stub);
        connect_signal(eem_proxy, iStop_mode_ControlStatus, _iStop_mode_ControlStatus_stub);
        connect_signal(eem_proxy, iStop_status_ControlStatus, _iStop_status_ControlStatus_stub);
        connect_signal(eem_proxy, iStop_time_ControlStatus, _iStop_time_ControlStatus_stub);
        connect_signal(eem_proxy, iStop_error_ControlStatus, _iStop_error_ControlStatus_stub);
        connect_signal(eem_proxy, iStop_Effective_Rate, _iStop_Effective_Rate_stub);
        connect_signal(eem_proxy, iStop_Effective_time, _iStop_Effective_time_stub);
        connect_signal(eem_proxy, iEloop_Effective_Rate, _iEloop_Effective_Rate_stub);
        connect_signal(eem_proxy, iEloop_Effective_Data, _iEloop_Effective_Data_stub);
        connect_signal(eem_proxy, CO2_reduction, _CO2_reduction_stub);
        connect_signal(eem_proxy, CO2_Reduction_prevIGNcycle, _CO2_Reduction_prevIGNcycle_stub);
        connect_signal(eem_proxy, EEM_Total_Saved_Distance, _EEM_Total_Saved_Distance_stub);
        connect_signal(eem_proxy, Curr_drive_fuel_eco_line_graph_data, _Curr_drive_fuel_eco_line_graph_data_stub);
        connect_signal(eem_proxy, Curr_drive_fuel_eco_bar_graph_data, _Curr_drive_fuel_eco_bar_graph_data_stub);
        connect_signal(eem_proxy, Curr_drive_fuel_eco_SixtyMin_bar_graph_data, _Curr_drive_fuel_eco_SixtyMin_bar_graph_data_stub);
        connect_signal(eem_proxy, Curr_drive_fuel_eco_OneMin_bar_graph_data, _Curr_drive_fuel_eco_OneMin_bar_graph_data_stub);
        connect_signal(eem_proxy, Curr_drive_fuel_eco_HEV_SixtyMin_bar_graph_data, _Curr_drive_fuel_eco_HEV_SixtyMin_bar_graph_data_stub);
        connect_signal(eem_proxy, Curr_drive_fuel_eco_HEV_OneMin_bar_graph_data, _Curr_drive_fuel_eco_HEV_OneMin_bar_graph_data_stub);
        connect_signal(eem_proxy, OneDriveEVDistance, _OneDriveEVDistance_stub);
        connect_signal(eem_proxy, HEVSendEnergyFlowSignals, _HEVSendEnergyFlowSignals_stub);
        connect_signal(eem_proxy, HEVSendBatteryDisplayLvl, _HEVSendBatteryDisplayLvl_stub);
        connect_signal(eem_proxy, DistDriveEV, _DistDriveEV_stub);
        connect_signal(eem_proxy, Cumm_fuel_eco_reset_graph_data, _Cumm_fuel_eco_reset_graph_data_stub);
        connect_signal(eem_proxy, new_Curr_drive_fuel_eco_per_inst_bar_graph_data, _new_Curr_drive_fuel_eco_per_inst_bar_graph_data_stub);
        connect_signal(eem_proxy, new_Curr_drive_fuel_eco_line_graph_data, _new_Curr_drive_fuel_eco_line_graph_data_stub);
        connect_signal(eem_proxy, Curr_avg_drive_fuel_eco, _Curr_avg_drive_fuel_eco_stub);
        connect_signal(eem_proxy, Cum_fuel_eco_after_reset_data_Y1, _Cum_fuel_eco_after_reset_data_Y1_stub);
        connect_signal(eem_proxy, UMP_Reset_enable, _UMP_Reset_enable_stub);
        connect_signal(eem_proxy, End_Of_Screen_Data, _End_Of_Screen_Data_stub);
        connect_signal(eem_proxy, Screen_Ending_message, _Screen_Ending_message_stub);
        connect_signal(eem_proxy, Ignition_Sts, _Ignition_Sts_stub);
        connect_signal(eem_proxy, HVD_LAST_DISPLAYED_SCREEN, _HVD_LAST_DISPLAYED_SCREEN_stub);
        connect_signal(eem_proxy, ControlStatusSendTireStatusSignals, _ControlStatusSendTireStatusSignals_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t GetEquippedData()
    {
        ::DBus::CallMessage call;
        call.member("GetEquippedData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetEEMUpdateScreenEnable(const uint32_t& screen_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << screen_type;
        call.member("SetEEMUpdateScreenEnable");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t CMUResetSettingRequest(const uint32_t& reset_active)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << reset_active;
        call.member("CMUResetSettingRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    uint32_t CMU_UMPResetRequest()
    {
        ::DBus::CallMessage call;
        call.member("CMU_UMPResetRequest");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    void EndingScreenSetting(const uint32_t& endSetActive)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << endSetActive;
        call.member("EndingScreenSetting");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void SetEquippedData(const uint32_t& feature_attached) = 0;
    virtual void Setting_ResetResponse(const ::DBus::Struct< uint32_t, uint32_t >& setting_resetResponse) = 0;
    virtual void CMU_UMPResetResponse(const ::DBus::Struct< uint32_t >& cMU_UMPresetResponse) = 0;
    virtual void HVD_EEMEndSet(const uint32_t& eEMEndSet_Active) = 0;
    virtual void StDisEco_Active(const uint32_t& stDisEco_Active) = 0;
    virtual void HVD_CstmzRq_Trip(const uint32_t& cstmzRq_Trip) = 0;
    virtual void EEMEndDispConf(const uint32_t& eEMEndDisp_Enabled) = 0;
    virtual void IEloop_ControlStatus(const ::DBus::Struct< uint32_t, uint32_t, uint32_t >& iEloop_Control_sts) = 0;
    virtual void Cumulative_Avg_Fuel_Economy(const ::DBus::Struct< ::DBus::Struct< uint32_t >, uint32_t >& value) = 0;
    virtual void iStop_mode_ControlStatus(const uint32_t& iStop_mode) = 0;
    virtual void iStop_status_ControlStatus(const ::DBus::Struct< ::DBus::Struct< uint8_t >, ::DBus::Struct< uint8_t >, ::DBus::Struct< uint8_t >, ::DBus::Struct< uint8_t > >& istop_status) = 0;
    virtual void iStop_time_ControlStatus(const ::DBus::Struct< uint32_t, uint32_t >& iStop_time) = 0;
    virtual void iStop_error_ControlStatus(const ::DBus::Struct< bool, bool, uint32_t >& iStop_error) = 0;
    virtual void iStop_Effective_Rate(const ::DBus::Struct< uint8_t >& iStop_Eff_Rate) = 0;
    virtual void iStop_Effective_time(const ::DBus::Struct< ::DBus::Struct< uint32_t, uint32_t >, ::DBus::Struct< uint32_t > >& iStop_effectiveness_time) = 0;
    virtual void iEloop_Effective_Rate(const ::DBus::Struct< uint8_t >& iEloop_Eff_Rate) = 0;
    virtual void iEloop_Effective_Data(const ::DBus::Struct< ::DBus::Struct< uint16_t >, uint32_t, ::DBus::Struct< uint16_t >, uint32_t >& iEloop_Effective_data) = 0;
    virtual void CO2_reduction(const ::DBus::Struct< uint16_t, uint8_t >& cO2_reduction) = 0;
    virtual void CO2_Reduction_prevIGNcycle(const ::DBus::Struct< uint16_t, uint8_t >& cO2_reduction_prevIGcycl) = 0;
    virtual void EEM_Total_Saved_Distance(const ::DBus::Struct< uint32_t, uint8_t >& total_Saved_Distance) = 0;
    virtual void Curr_drive_fuel_eco_line_graph_data(const ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint16_t > >, uint32_t >& fuel_eco_dataY_line) = 0;
    virtual void Curr_drive_fuel_eco_bar_graph_data(const ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint16_t > >, uint32_t >& fuel_eco_dataY_bar) = 0;
    virtual void Curr_drive_fuel_eco_SixtyMin_bar_graph_data(const ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint16_t > >, uint32_t >& fuel_eco_dataY_sixtyMinbar) = 0;
    virtual void Curr_drive_fuel_eco_OneMin_bar_graph_data(const ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint16_t > >, uint32_t >& fuel_eco_dataY_oneMinbar) = 0;
    virtual void Curr_drive_fuel_eco_HEV_SixtyMin_bar_graph_data(const ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint16_t, uint8_t, bool, bool > >, uint32_t >& fuel_eco_dataY_sixtyMinbar) = 0;
    virtual void Curr_drive_fuel_eco_HEV_OneMin_bar_graph_data(const ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint16_t, uint8_t, bool, bool > >, uint32_t >& fuel_eco_dataY_oneMinbar) = 0;
    virtual void OneDriveEVDistance(const ::DBus::Struct< uint16_t, uint8_t, uint8_t >& driveEV_dist) = 0;
    virtual void HEVSendEnergyFlowSignals(const ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint32_t >& energyFlowSignals) = 0;
    virtual void HEVSendBatteryDisplayLvl(const uint32_t& battLvl) = 0;
    virtual void DistDriveEV(const ::DBus::Struct< uint32_t, uint8_t, uint8_t >& driveEV_dist) = 0;
    virtual void Cumm_fuel_eco_reset_graph_data(const ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint32_t > >, uint32_t >& fuel_eco_dataY_reset) = 0;
    virtual void new_Curr_drive_fuel_eco_per_inst_bar_graph_data(const ::DBus::Struct< ::DBus::Struct< uint16_t >, bool, uint32_t >& new_valueY) = 0;
    virtual void new_Curr_drive_fuel_eco_line_graph_data(const ::DBus::Struct< ::DBus::Struct< uint16_t >, bool, uint32_t >& new_valueY) = 0;
    virtual void Curr_avg_drive_fuel_eco(const ::DBus::Struct< ::DBus::Struct< uint16_t >, bool, uint32_t >& curr_fuel_eco) = 0;
    virtual void Cum_fuel_eco_after_reset_data_Y1(const ::DBus::Struct< ::DBus::Struct< uint32_t >, uint32_t >& curr_fuel_eco) = 0;
    virtual void UMP_Reset_enable(const uint32_t& button_enable) = 0;
    virtual void End_Of_Screen_Data() = 0;
    virtual void Screen_Ending_message(const ::DBus::Struct< bool >& ending_screen_message) = 0;
    virtual void Ignition_Sts(const uint32_t& ign_sts) = 0;
    virtual void HVD_LAST_DISPLAYED_SCREEN(const uint32_t& previous_Screen) = 0;
    virtual void ControlStatusSendTireStatusSignals(const ::DBus::Struct< uint8_t, uint32_t >& tireStatusSignals) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _SetEquippedData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t feature_attached;
        ri >> feature_attached;
        SetEquippedData(feature_attached);
    }
    void _Setting_ResetResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > setting_resetResponse;
        ri >> setting_resetResponse;
        Setting_ResetResponse(setting_resetResponse);
    }
    void _CMU_UMPResetResponse_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t > cMU_UMPresetResponse;
        ri >> cMU_UMPresetResponse;
        CMU_UMPResetResponse(cMU_UMPresetResponse);
    }
    void _HVD_EEMEndSet_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t eEMEndSet_Active;
        ri >> eEMEndSet_Active;
        HVD_EEMEndSet(eEMEndSet_Active);
    }
    void _StDisEco_Active_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t stDisEco_Active;
        ri >> stDisEco_Active;
        StDisEco_Active(stDisEco_Active);
    }
    void _HVD_CstmzRq_Trip_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t cstmzRq_Trip;
        ri >> cstmzRq_Trip;
        HVD_CstmzRq_Trip(cstmzRq_Trip);
    }
    void _EEMEndDispConf_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t eEMEndDisp_Enabled;
        ri >> eEMEndDisp_Enabled;
        EEMEndDispConf(eEMEndDisp_Enabled);
    }
    void _IEloop_ControlStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t, uint32_t > iEloop_Control_sts;
        ri >> iEloop_Control_sts;
        IEloop_ControlStatus(iEloop_Control_sts);
    }
    void _Cumulative_Avg_Fuel_Economy_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< ::DBus::Struct< uint32_t >, uint32_t > value;
        ri >> value;
        Cumulative_Avg_Fuel_Economy(value);
    }
    void _iStop_mode_ControlStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t iStop_mode;
        ri >> iStop_mode;
        iStop_mode_ControlStatus(iStop_mode);
    }
    void _iStop_status_ControlStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< ::DBus::Struct< uint8_t >, ::DBus::Struct< uint8_t >, ::DBus::Struct< uint8_t >, ::DBus::Struct< uint8_t > > istop_status;
        ri >> istop_status;
        iStop_status_ControlStatus(istop_status);
    }
    void _iStop_time_ControlStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > iStop_time;
        ri >> iStop_time;
        iStop_time_ControlStatus(iStop_time);
    }
    void _iStop_error_ControlStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< bool, bool, uint32_t > iStop_error;
        ri >> iStop_error;
        iStop_error_ControlStatus(iStop_error);
    }
    void _iStop_Effective_Rate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t > iStop_Eff_Rate;
        ri >> iStop_Eff_Rate;
        iStop_Effective_Rate(iStop_Eff_Rate);
    }
    void _iStop_Effective_time_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< ::DBus::Struct< uint32_t, uint32_t >, ::DBus::Struct< uint32_t > > iStop_effectiveness_time;
        ri >> iStop_effectiveness_time;
        iStop_Effective_time(iStop_effectiveness_time);
    }
    void _iEloop_Effective_Rate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t > iEloop_Eff_Rate;
        ri >> iEloop_Eff_Rate;
        iEloop_Effective_Rate(iEloop_Eff_Rate);
    }
    void _iEloop_Effective_Data_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< ::DBus::Struct< uint16_t >, uint32_t, ::DBus::Struct< uint16_t >, uint32_t > iEloop_Effective_data;
        ri >> iEloop_Effective_data;
        iEloop_Effective_Data(iEloop_Effective_data);
    }
    void _CO2_reduction_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint16_t, uint8_t > cO2_reduction;
        ri >> cO2_reduction;
        CO2_reduction(cO2_reduction);
    }
    void _CO2_Reduction_prevIGNcycle_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint16_t, uint8_t > cO2_reduction_prevIGcycl;
        ri >> cO2_reduction_prevIGcycl;
        CO2_Reduction_prevIGNcycle(cO2_reduction_prevIGcycl);
    }
    void _EEM_Total_Saved_Distance_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint8_t > total_Saved_Distance;
        ri >> total_Saved_Distance;
        EEM_Total_Saved_Distance(total_Saved_Distance);
    }
    void _Curr_drive_fuel_eco_line_graph_data_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint16_t > >, uint32_t > fuel_eco_dataY_line;
        ri >> fuel_eco_dataY_line;
        Curr_drive_fuel_eco_line_graph_data(fuel_eco_dataY_line);
    }
    void _Curr_drive_fuel_eco_bar_graph_data_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint16_t > >, uint32_t > fuel_eco_dataY_bar;
        ri >> fuel_eco_dataY_bar;
        Curr_drive_fuel_eco_bar_graph_data(fuel_eco_dataY_bar);
    }
    void _Curr_drive_fuel_eco_SixtyMin_bar_graph_data_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint16_t > >, uint32_t > fuel_eco_dataY_sixtyMinbar;
        ri >> fuel_eco_dataY_sixtyMinbar;
        Curr_drive_fuel_eco_SixtyMin_bar_graph_data(fuel_eco_dataY_sixtyMinbar);
    }
    void _Curr_drive_fuel_eco_OneMin_bar_graph_data_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint16_t > >, uint32_t > fuel_eco_dataY_oneMinbar;
        ri >> fuel_eco_dataY_oneMinbar;
        Curr_drive_fuel_eco_OneMin_bar_graph_data(fuel_eco_dataY_oneMinbar);
    }
    void _Curr_drive_fuel_eco_HEV_SixtyMin_bar_graph_data_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint16_t, uint8_t, bool, bool > >, uint32_t > fuel_eco_dataY_sixtyMinbar;
        ri >> fuel_eco_dataY_sixtyMinbar;
        Curr_drive_fuel_eco_HEV_SixtyMin_bar_graph_data(fuel_eco_dataY_sixtyMinbar);
    }
    void _Curr_drive_fuel_eco_HEV_OneMin_bar_graph_data_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint16_t, uint8_t, bool, bool > >, uint32_t > fuel_eco_dataY_oneMinbar;
        ri >> fuel_eco_dataY_oneMinbar;
        Curr_drive_fuel_eco_HEV_OneMin_bar_graph_data(fuel_eco_dataY_oneMinbar);
    }
    void _OneDriveEVDistance_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint16_t, uint8_t, uint8_t > driveEV_dist;
        ri >> driveEV_dist;
        OneDriveEVDistance(driveEV_dist);
    }
    void _HEVSendEnergyFlowSignals_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint8_t, uint8_t, uint8_t, uint8_t, uint32_t > energyFlowSignals;
        ri >> energyFlowSignals;
        HEVSendEnergyFlowSignals(energyFlowSignals);
    }
    void _HEVSendBatteryDisplayLvl_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t battLvl;
        ri >> battLvl;
        HEVSendBatteryDisplayLvl(battLvl);
    }
    void _DistDriveEV_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint8_t, uint8_t > driveEV_dist;
        ri >> driveEV_dist;
        DistDriveEV(driveEV_dist);
    }
    void _Cumm_fuel_eco_reset_graph_data_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, std::vector< ::DBus::Struct< uint32_t > >, uint32_t > fuel_eco_dataY_reset;
        ri >> fuel_eco_dataY_reset;
        Cumm_fuel_eco_reset_graph_data(fuel_eco_dataY_reset);
    }
    void _new_Curr_drive_fuel_eco_per_inst_bar_graph_data_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< ::DBus::Struct< uint16_t >, bool, uint32_t > new_valueY;
        ri >> new_valueY;
        new_Curr_drive_fuel_eco_per_inst_bar_graph_data(new_valueY);
    }
    void _new_Curr_drive_fuel_eco_line_graph_data_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< ::DBus::Struct< uint16_t >, bool, uint32_t > new_valueY;
        ri >> new_valueY;
        new_Curr_drive_fuel_eco_line_graph_data(new_valueY);
    }
    void _Curr_avg_drive_fuel_eco_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< ::DBus::Struct< uint16_t >, bool, uint32_t > curr_fuel_eco;
        ri >> curr_fuel_eco;
        Curr_avg_drive_fuel_eco(curr_fuel_eco);
    }
    void _Cum_fuel_eco_after_reset_data_Y1_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< ::DBus::Struct< uint32_t >, uint32_t > curr_fuel_eco;
        ri >> curr_fuel_eco;
        Cum_fuel_eco_after_reset_data_Y1(curr_fuel_eco);
    }
    void _UMP_Reset_enable_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t button_enable;
        ri >> button_enable;
        UMP_Reset_enable(button_enable);
    }
    void _End_Of_Screen_Data_stub(const ::DBus::SignalMessage &sig)
    {
        End_Of_Screen_Data();
    }
    void _Screen_Ending_message_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< bool > ending_screen_message;
        ri >> ending_screen_message;
        Screen_Ending_message(ending_screen_message);
    }
    void _Ignition_Sts_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t ign_sts;
        ri >> ign_sts;
        Ignition_Sts(ign_sts);
    }
    void _HVD_LAST_DISPLAYED_SCREEN_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t previous_Screen;
        ri >> previous_Screen;
        HVD_LAST_DISPLAYED_SCREEN(previous_Screen);
    }
    void _ControlStatusSendTireStatusSignals_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint8_t, uint32_t > tireStatusSignals;
        ri >> tireStatusSignals;
        ControlStatusSendTireStatusSignals(tireStatusSignals);
    }
};

} } 
namespace com {
namespace jci {
namespace blm {

class aha_proxy
: public ::DBus::InterfaceProxy
{
public:

    aha_proxy()
    : ::DBus::InterfaceProxy("com.jci.blm.aha")
    {
        connect_signal(aha_proxy, StatusUpdate, _StatusUpdate_stub);
        connect_signal(aha_proxy, RecordingCancelled, _RecordingCancelled_stub);
        connect_signal(aha_proxy, Connected, _Connected_stub);
        connect_signal(aha_proxy, Disconnected, _Disconnected_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Connect(int32_t& statusId, uint32_t& sessionId, bool& keepConnected)
    {
        ::DBus::CallMessage call;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> sessionId;
        ri >> keepConnected;
    }

    int32_t Disconnect(const uint32_t& sessionId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void ChangeClientPlaybackState(const uint32_t& sessionId, const uint8_t& playbackState, uint64_t& contentId, uint8_t& playState, int32_t& statusId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << playbackState;
        call.member("ChangeClientPlaybackState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> contentId;
        ri >> playState;
        ri >> statusId;
    }

    int32_t SelectContentForPlayback(const uint32_t& sessionId, const uint64_t& contentId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << contentId;
        call.member("SelectContentForPlayback");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SelectStationForPlayback(const uint32_t& sessionId, const uint64_t& stationId, const uint8_t& playbackFromBegin)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << stationId;
        wi << playbackFromBegin;
        call.member("SelectStationForPlayback");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TimeShiftContent(const uint32_t& sessionId, const int16_t& nOSecondsToTimeShift)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << nOSecondsToTimeShift;
        call.member("TimeShiftContent");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PerformActionVoteLike(const uint32_t& sessionId, const uint64_t& contentId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << contentId;
        call.member("PerformActionVoteLike");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PerformActionRetweet(const uint32_t& sessionId, const uint64_t& contentId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << contentId;
        call.member("PerformActionRetweet");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PerformActionTweetCurrentLocation(const uint32_t& sessionId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("PerformActionTweetCurrentLocation");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PerformActionVoteDislike(const uint32_t& sessionId, const uint64_t& contentId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << contentId;
        call.member("PerformActionVoteDislike");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PerformActionUnvote(const uint32_t& sessionId, const uint64_t& contentId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << contentId;
        call.member("PerformActionUnvote");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PerformActionUploadCurrentLocationToFacebook(const uint32_t& sessionId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("PerformActionUploadCurrentLocationToFacebook");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PerformActionLogNavigate(const uint32_t& sessionId, const uint64_t& contentId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << contentId;
        call.member("PerformActionLogNavigate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t PerformActionLogCallAction(const uint32_t& sessionId, const uint64_t& contentId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << contentId;
        call.member("PerformActionLogCallAction");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RecordingStart(const uint32_t& sessionId, const uint32_t& maxRecordingTime)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << maxRecordingTime;
        call.member("RecordingStart");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RecordingCancel(const uint32_t& sessionId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("RecordingCancel");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RecordingPost(const uint32_t& sessionId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("RecordingPost");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void StatusUpdate(const uint32_t& sessionId, const uint32_t& status, const uint8_t& notifyConnectionLostFlag) = 0;
    virtual void RecordingCancelled(const uint32_t& sessionId) = 0;
    virtual void Connected(const uint32_t& sessionId, const bool& keepConnected) = 0;
    virtual void Disconnected(const uint32_t& sessionId, const uint8_t& reasonId) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _StatusUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint32_t status;
        ri >> status;
        uint8_t notifyConnectionLostFlag;
        ri >> notifyConnectionLostFlag;
        StatusUpdate(sessionId, status, notifyConnectionLostFlag);
    }
    void _RecordingCancelled_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        RecordingCancelled(sessionId);
    }
    void _Connected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        bool keepConnected;
        ri >> keepConnected;
        Connected(sessionId, keepConnected);
    }
    void _Disconnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint8_t reasonId;
        ri >> reasonId;
        Disconnected(sessionId, reasonId);
    }
};

} } } 
namespace com {
namespace jci {
namespace blm {

class stitcher_proxy
: public ::DBus::InterfaceProxy
{
public:

    stitcher_proxy()
    : ::DBus::InterfaceProxy("com.jci.blm.stitcher")
    {
        connect_signal(stitcher_proxy, Connected, _Connected_stub);
        connect_signal(stitcher_proxy, Disconnected, _Disconnected_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Connect(int32_t& statusId, uint32_t& sessionId, bool& keepConnected)
    {
        ::DBus::CallMessage call;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> sessionId;
        ri >> keepConnected;
    }

    int32_t Disconnect(const uint32_t& sessionId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Command(const uint32_t& sessionId, const uint8_t& command, const uint8_t& groupType, const uint64_t& groupId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << command;
        wi << groupType;
        wi << groupId;
        call.member("Command");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Rate(const uint32_t& sessionId, const uint8_t& groupType, const uint64_t& id, const uint8_t& rate, const bool& isRelative)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << groupType;
        wi << id;
        wi << rate;
        wi << isRelative;
        call.member("Rate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void Connected(const uint32_t& sessionId, const bool& keepConnected) = 0;
    virtual void Disconnected(const uint32_t& sessionId, const uint8_t& reasonId) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Connected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        bool keepConnected;
        ri >> keepConnected;
        Connected(sessionId, keepConnected);
    }
    void _Disconnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint8_t reasonId;
        ri >> reasonId;
        Disconnected(sessionId, reasonId);
    }
};

} } } 
namespace com {
namespace jci {
namespace blm {

class pandora_proxy
: public ::DBus::InterfaceProxy
{
public:

    pandora_proxy()
    : ::DBus::InterfaceProxy("com.jci.blm.pandora")
    {
        connect_signal(pandora_proxy, Connected, _Connected_stub);
        connect_signal(pandora_proxy, Disconnected, _Disconnected_stub);
        connect_signal(pandora_proxy, UpdateStatus, _UpdateStatus_stub);
        connect_signal(pandora_proxy, UpdateInfo, _UpdateInfo_stub);
        connect_signal(pandora_proxy, UpdateSort, _UpdateSort_stub);
        connect_signal(pandora_proxy, UpdateList, _UpdateList_stub);
        connect_signal(pandora_proxy, UpdateStationInfo, _UpdateStationInfo_stub);
        connect_signal(pandora_proxy, UpdateNoticeText, _UpdateNoticeText_stub);
        connect_signal(pandora_proxy, StationArtReady, _StationArtReady_stub);
        connect_signal(pandora_proxy, GenreStationArtReady, _GenreStationArtReady_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Connect(int32_t& statusId, uint32_t& sessionId, bool& keepConnected)
    {
        ::DBus::CallMessage call;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> sessionId;
        ri >> keepConnected;
    }

    int32_t Disconnect(const uint32_t& sessionId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Command(const uint32_t& sessionId, const uint8_t& command, const uint8_t& groupType, const uint64_t& groupId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << command;
        wi << groupType;
        wi << groupId;
        call.member("Command");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Rate(const uint32_t& sessionId, const uint8_t& groupType, const uint64_t& groupId, const uint8_t& rating)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << groupType;
        wi << groupId;
        wi << rating;
        call.member("Rate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Bookmark(const uint32_t& sessionId, const uint8_t& groupType, const uint64_t& groupId, const uint8_t& bookmarkType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << groupType;
        wi << groupId;
        wi << bookmarkType;
        call.member("Bookmark");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetSort(const uint32_t& sessionId, const uint8_t& sortType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << sortType;
        call.member("SetSort");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetResource(const uint32_t& sessionId, const uint32_t& resourceId, int32_t& statusId, std::string& filePath)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << resourceId;
        call.member("GetResource");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> filePath;
    }

    int32_t ReleaseResource(const uint32_t& sessionId, const uint32_t& resourceId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << resourceId;
        call.member("ReleaseResource");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetStatus(const uint32_t& sessionId, int32_t& statusId, uint8_t& connectStatus, uint8_t& linkStatus, uint8_t& playStatus, uint64_t& trackId, uint64_t& stationId, uint32_t& serviceSessionId, uint32_t& elapsedTime, uint32_t& buffering)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("GetStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> connectStatus;
        ri >> linkStatus;
        ri >> playStatus;
        ri >> trackId;
        ri >> stationId;
        ri >> serviceSessionId;
        ri >> elapsedTime;
        ri >> buffering;
    }

    void GetTrackAllInfo(const uint32_t& sessionId, const uint64_t& trackId, int32_t& statusId, std::string& trackTitle, std::string& trackArtist, std::string& trackAlbum, std::string& trackGenre, uint32_t& trackDuration, uint32_t& artImageSize, uint32_t& artResourceId, uint64_t& currentStationId, uint8_t& trackRating, uint32_t& trackFlags)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << trackId;
        call.member("GetTrackAllInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> trackTitle;
        ri >> trackArtist;
        ri >> trackAlbum;
        ri >> trackGenre;
        ri >> trackDuration;
        ri >> artImageSize;
        ri >> artResourceId;
        ri >> currentStationId;
        ri >> trackRating;
        ri >> trackFlags;
    }

    void GetStationAllInfo(const uint32_t& sessionId, const uint64_t& stationId, int32_t& statusId, std::string& stationName, std::string& stationGenre, uint32_t& artImageSize, uint32_t& artResourceId, uint32_t& stationFlags)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << stationId;
        call.member("GetStationAllInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> stationName;
        ri >> stationGenre;
        ri >> artImageSize;
        ri >> artResourceId;
        ri >> stationFlags;
    }

    void GetStationListAllInfo(const uint32_t& sessionId, const uint32_t& startPosition, const uint32_t& numberOfStations, int32_t& statusId, uint32_t& startPos, uint32_t& currentSize, uint32_t& total, uint8_t& sortType, ::DBus::Struct< std::vector< ::DBus::Struct< uint64_t, uint32_t, std::string > > >& resStationIdsFlagsAndNames)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << startPosition;
        wi << numberOfStations;
        call.member("GetStationListAllInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> startPos;
        ri >> currentSize;
        ri >> total;
        ri >> sortType;
        ri >> resStationIdsFlagsAndNames;
    }

    void GetGenreCategoryCount(const uint32_t& sessionId, uint8_t& count, int32_t& statusId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("GetGenreCategoryCount");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> count;
        ri >> statusId;
    }

    void GetGenreCategoryNames(const uint32_t& sessionId, const uint8_t& startPos, const uint8_t& count, uint8_t& resultStartPos, ::DBus::Struct< std::vector< std::string > >& genreCategoryNames, int32_t& statusId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << startPos;
        wi << count;
        call.member("GetGenreCategoryNames");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> resultStartPos;
        ri >> genreCategoryNames;
        ri >> statusId;
    }

    void GetAllGenreCategoryNames(const uint32_t& sessionId, ::DBus::Struct< std::vector< std::string > >& genreCategoryNames, int32_t& statusId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("GetAllGenreCategoryNames");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> genreCategoryNames;
        ri >> statusId;
    }

    void GetGenreStationCount(const uint32_t& sessionId, const uint8_t& categoryIndex, uint8_t& resultCategoryIndex, uint8_t& count, int32_t& statusId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << categoryIndex;
        call.member("GetGenreStationCount");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> resultCategoryIndex;
        ri >> count;
        ri >> statusId;
    }

    void GetGenreStationIdsNames(const uint32_t& sessionId, const uint8_t& categoryIndex, const uint8_t& startPos, const uint8_t& count, uint8_t& resultCategoryIndex, uint8_t& resultStartPos, ::DBus::Struct< std::vector< ::DBus::Struct< uint64_t, std::string > > >& genreStationIdsNames, int32_t& statusId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << categoryIndex;
        wi << startPos;
        wi << count;
        call.member("GetGenreStationIdsNames");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> resultCategoryIndex;
        ri >> resultStartPos;
        ri >> genreStationIdsNames;
        ri >> statusId;
    }

    int32_t SelectGenreStation(const uint32_t& sessionId, const uint8_t& categoryIndex, const uint8_t& stationIndex)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << categoryIndex;
        wi << stationIndex;
        call.member("SelectGenreStation");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    std::string GetListener(const uint32_t& sessionId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("GetListener");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    int32_t CreateStationFromCurrentTrack(const uint32_t& sessionId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("CreateStationFromCurrentTrack");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t CreateStationFromCurrentArtist(const uint32_t& sessionId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        call.member("CreateStationFromCurrentArtist");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetSessionId(uint32_t& sessionId, int32_t& statusId)
    {
        ::DBus::CallMessage call;
        call.member("GetSessionId");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> sessionId;
        ri >> statusId;
    }

    int32_t FavoritesAdd(const uint32_t& sessionId, const uint64_t& stationId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << stationId;
        call.member("FavoritesAdd");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t FavoritesRemove(const uint32_t& sessionId, const uint64_t& stationId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << stationId;
        call.member("FavoritesRemove");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void FavoritesGet(const uint32_t& sessionId, const uint8_t& startPosition, const uint8_t& numberOfFavorites, int32_t& statusId, uint8_t& startPos, uint8_t& currentSize, uint8_t& total, ::DBus::Struct< std::vector< ::DBus::Struct< uint64_t, uint32_t, std::string > > >& favorites)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionId;
        wi << startPosition;
        wi << numberOfFavorites;
        call.member("FavoritesGet");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> statusId;
        ri >> startPos;
        ri >> currentSize;
        ri >> total;
        ri >> favorites;
    }


public:

    /* signal handlers for this interface
     */
    virtual void Connected(const uint32_t& sessionId, const bool& keepConnected) = 0;
    virtual void Disconnected(const uint32_t& sessionId, const uint8_t& reasonId) = 0;
    virtual void UpdateStatus(const uint32_t& sessionId, const uint8_t& linkStatus, const uint8_t& playStatus, const uint64_t& trackId, const uint64_t& stationId, const uint32_t& elapsedTime, const uint32_t& buffering) = 0;
    virtual void UpdateInfo(const uint32_t& sessionId, const uint8_t& groupType, const uint64_t& groupId, const uint8_t& infoUpdated, const uint64_t& infoData) = 0;
    virtual void UpdateSort(const uint32_t& sessionId, const uint8_t& sortType) = 0;
    virtual void UpdateList(const uint32_t& sessionId, const uint64_t& stationId) = 0;
    virtual void UpdateStationInfo(const uint32_t& sessionId, const uint64_t& stationId, const uint64_t& stationStatus, const uint32_t& stationListCount) = 0;
    virtual void UpdateNoticeText(const uint32_t& sessionId, const uint8_t& noticeType, const std::string& noticeText) = 0;
    virtual void StationArtReady(const uint32_t& sessionId, const uint64_t& resourceId, const uint64_t& stationId, const std::string& resourcePath) = 0;
    virtual void GenreStationArtReady(const uint32_t& sessionId, const uint64_t& resourceId, const uint8_t& categoryIndex, const uint8_t& stationIndex, const std::string& resourcePath) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Connected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        bool keepConnected;
        ri >> keepConnected;
        Connected(sessionId, keepConnected);
    }
    void _Disconnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint8_t reasonId;
        ri >> reasonId;
        Disconnected(sessionId, reasonId);
    }
    void _UpdateStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint8_t linkStatus;
        ri >> linkStatus;
        uint8_t playStatus;
        ri >> playStatus;
        uint64_t trackId;
        ri >> trackId;
        uint64_t stationId;
        ri >> stationId;
        uint32_t elapsedTime;
        ri >> elapsedTime;
        uint32_t buffering;
        ri >> buffering;
        UpdateStatus(sessionId, linkStatus, playStatus, trackId, stationId, elapsedTime, buffering);
    }
    void _UpdateInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint8_t groupType;
        ri >> groupType;
        uint64_t groupId;
        ri >> groupId;
        uint8_t infoUpdated;
        ri >> infoUpdated;
        uint64_t infoData;
        ri >> infoData;
        UpdateInfo(sessionId, groupType, groupId, infoUpdated, infoData);
    }
    void _UpdateSort_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint8_t sortType;
        ri >> sortType;
        UpdateSort(sessionId, sortType);
    }
    void _UpdateList_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint64_t stationId;
        ri >> stationId;
        UpdateList(sessionId, stationId);
    }
    void _UpdateStationInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint64_t stationId;
        ri >> stationId;
        uint64_t stationStatus;
        ri >> stationStatus;
        uint32_t stationListCount;
        ri >> stationListCount;
        UpdateStationInfo(sessionId, stationId, stationStatus, stationListCount);
    }
    void _UpdateNoticeText_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint8_t noticeType;
        ri >> noticeType;
        std::string noticeText;
        ri >> noticeText;
        UpdateNoticeText(sessionId, noticeType, noticeText);
    }
    void _StationArtReady_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint64_t resourceId;
        ri >> resourceId;
        uint64_t stationId;
        ri >> stationId;
        std::string resourcePath;
        ri >> resourcePath;
        StationArtReady(sessionId, resourceId, stationId, resourcePath);
    }
    void _GenreStationArtReady_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t sessionId;
        ri >> sessionId;
        uint64_t resourceId;
        ri >> resourceId;
        uint8_t categoryIndex;
        ri >> categoryIndex;
        uint8_t stationIndex;
        ri >> stationIndex;
        std::string resourcePath;
        ri >> resourcePath;
        GenreStationArtReady(sessionId, resourceId, categoryIndex, stationIndex, resourcePath);
    }
};

} } } 
namespace com {
namespace jci {

class carplay_proxy
: public ::DBus::InterfaceProxy
{
public:

    carplay_proxy()
    : ::DBus::InterfaceProxy("com.jci.carplay")
    {
        connect_signal(carplay_proxy, DisableBluetoothSignal, _DisableBluetoothSignal_stub);
        connect_signal(carplay_proxy, SessionActiveSignal, _SessionActiveSignal_stub);
        connect_signal(carplay_proxy, GetCurrentNativeScreenRequestSignal, _GetCurrentNativeScreenRequestSignal_stub);
        connect_signal(carplay_proxy, DeviceErrorSignal, _DeviceErrorSignal_stub);
        connect_signal(carplay_proxy, SessionDeactiveSignal, _SessionDeactiveSignal_stub);
        connect_signal(carplay_proxy, NativeUILaunchSignal, _NativeUILaunchSignal_stub);
        connect_signal(carplay_proxy, ScreenResourceRequestSignal, _ScreenResourceRequestSignal_stub);
        connect_signal(carplay_proxy, ScreenResourceRequestTimeoutSignal, _ScreenResourceRequestTimeoutSignal_stub);
        connect_signal(carplay_proxy, NativeScreenDisplayRequestSignal, _NativeScreenDisplayRequestSignal_stub);
        connect_signal(carplay_proxy, GetTurnByTurnStatusRequestSignal, _GetTurnByTurnStatusRequestSignal_stub);
        connect_signal(carplay_proxy, TurnByTurnEntitySignal, _TurnByTurnEntitySignal_stub);
        connect_signal(carplay_proxy, GetPhoneCallStatusRequestSignal, _GetPhoneCallStatusRequestSignal_stub);
        connect_signal(carplay_proxy, UpdateCallStatusInfoSignal, _UpdateCallStatusInfoSignal_stub);
        connect_signal(carplay_proxy, SpeechEntitySignal, _SpeechEntitySignal_stub);
        connect_signal(carplay_proxy, UpdateNowPlayingInfoSignal, _UpdateNowPlayingInfoSignal_stub);
        connect_signal(carplay_proxy, GetVehicleBtMacAddress, _GetVehicleBtMacAddress_stub);
        connect_signal(carplay_proxy, FeatureAvailableSignal, _FeatureAvailableSignal_stub);
        connect_signal(carplay_proxy, DisplayDialogSignal, _DisplayDialogSignal_stub);
        connect_signal(carplay_proxy, UpdateAudioStatusSignal, _UpdateAudioStatusSignal_stub);
        connect_signal(carplay_proxy, DisconnectedDeviceSignal, _DisconnectedDeviceSignal_stub);
        connect_signal(carplay_proxy, UsbPortStatusSignal, _UsbPortStatusSignal_stub);
        connect_signal(carplay_proxy, ClientConnectedSignal, _ClientConnectedSignal_stub);
        connect_signal(carplay_proxy, ClientDisconnectedSignal, _ClientDisconnectedSignal_stub);
        connect_signal(carplay_proxy, ScreenResourceReadySignal, _ScreenResourceReadySignal_stub);
        connect_signal(carplay_proxy, DisplayDialogResponseSignal, _DisplayDialogResponseSignal_stub);
        connect_signal(carplay_proxy, UsbErrorStatusSignal, _UsbErrorStatusSignal_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Struct< uint32_t > PressKey(const ::DBus::Struct< uint32_t, bool >& pressKey)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pressKey;
        call.member("PressKey");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > RotateKnob(const ::DBus::Struct< uint32_t >& rotateKnob)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << rotateKnob;
        call.member("RotateKnob");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > PanKnob(const ::DBus::Struct< uint32_t >& panKnob)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << panKnob;
        call.member("PanKnob");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > SiriLaunch(const ::DBus::Struct< uint32_t >& siriLaunch)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << siriLaunch;
        call.member("SiriLaunch");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > TouchScreen(const ::DBus::Struct< uint16_t, uint16_t, bool >& touchScreen)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << touchScreen;
        call.member("TouchScreen");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > DisableTouchScreenCoordinate(const ::DBus::Struct< uint32_t, uint32_t, uint32_t, uint32_t >& disableTouchScreenCoordinate)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << disableTouchScreenCoordinate;
        call.member("DisableTouchScreenCoordinate");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > SelectDevice(const ::DBus::Struct< uint32_t >& selectDevice)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << selectDevice;
        call.member("SelectDevice");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > ScreenResourceAvailable(const ::DBus::Struct< uint32_t, uint32_t >& screenResourceAvailable)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << screenResourceAvailable;
        call.member("ScreenResourceAvailable");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > ScreenAcquireResource(const ::DBus::Struct< uint32_t >& screenAcquireResource)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << screenAcquireResource;
        call.member("ScreenAcquireResource");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > SetCurrentNativeScreen(const ::DBus::Struct< uint32_t >& setCurrentNativeScreen)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setCurrentNativeScreen;
        call.member("SetCurrentNativeScreen");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > SetTurnByTurnStatus(const ::DBus::Struct< bool >& setTurnByTurnStatus)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setTurnByTurnStatus;
        call.member("SetTurnByTurnStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > SetPhoneCallStatus(const ::DBus::Struct< bool >& setPhoneCallStatus)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setPhoneCallStatus;
        call.member("SetPhoneCallStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > SetNotifyAudioStreamState(const ::DBus::Struct< bool >& setNotifyAudioStreamState)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setNotifyAudioStreamState;
        call.member("SetNotifyAudioStreamState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    void AcceptCallRequest()
    {
        ::DBus::CallMessage call;
        call.member("AcceptCallRequest");
        ::DBus::Message ret = invoke_method (call);
    }

    ::DBus::Struct< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string >, uint32_t > GetNowPlayingInfo()
    {
        ::DBus::CallMessage call;
        call.member("GetNowPlayingInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string >, uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< ::DBus::Struct< std::string >, ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, std::string, std::string, std::string >, bool > GetConnectDeviceInfo()
    {
        ::DBus::CallMessage call;
        call.member("GetConnectDeviceInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< ::DBus::Struct< std::string >, ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, std::string, std::string, std::string >, bool > argout;
        ri >> argout;
        return argout;
    }

    uint32_t SetVehicleBtMacAddress(const std::string& vehicleBtMacAddress, const uint32_t& vehicleBtMacAddressLength)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << vehicleBtMacAddress;
        wi << vehicleBtMacAddressLength;
        call.member("SetVehicleBtMacAddress");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint32_t argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > ClearLastFocus(const ::DBus::Struct< bool, bool >& clearLastFocus)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << clearLastFocus;
        call.member("ClearLastFocus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > EnableCarPlayConnection(const ::DBus::Struct< std::string, uint32_t, bool >& enableCarPlayConnection)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << enableCarPlayConnection;
        call.member("EnableCarPlayConnection");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > DisplayDialogResponse(const ::DBus::Struct< uint32_t >& displayDialogResponse)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << displayDialogResponse;
        call.member("DisplayDialogResponse");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > UpdateBTAudioStatus(const ::DBus::Struct< uint32_t >& updateBTAudioStatusInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << updateBTAudioStatusInfo;
        call.member("UpdateBTAudioStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > MethodCallClientDial(const ::DBus::Struct< std::string, uint32_t, uint32_t >& methodCallClientDial)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << methodCallClientDial;
        call.member("MethodCallClientDial");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< uint32_t > MethodCancelClientDial(const ::DBus::Struct< uint32_t >& methodCancelClientDial)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << methodCancelClientDial;
        call.member("MethodCancelClientDial");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint32_t > argout;
        ri >> argout;
        return argout;
    }

    int32_t SetMP911EmergencyCallStatus(const uint32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << status;
        call.member("SetMP911EmergencyCallStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void DisableBluetoothSignal(const ::DBus::Struct< std::string >& disableBluetoothInfo) = 0;
    virtual void SessionActiveSignal(const ::DBus::Struct< uint64_t, uint32_t >& sessionActiveInfo) = 0;
    virtual void GetCurrentNativeScreenRequestSignal() = 0;
    virtual void DeviceErrorSignal(const ::DBus::Struct< uint64_t, uint32_t >& deviceErrorInfo) = 0;
    virtual void SessionDeactiveSignal(const ::DBus::Struct< uint64_t >& sessionDeactiveInfo) = 0;
    virtual void NativeUILaunchSignal(const ::DBus::Struct< uint32_t >& nativeUILaunchInfo) = 0;
    virtual void ScreenResourceRequestSignal() = 0;
    virtual void ScreenResourceRequestTimeoutSignal(const ::DBus::Struct< uint32_t >& timeoutInfo) = 0;
    virtual void NativeScreenDisplayRequestSignal() = 0;
    virtual void GetTurnByTurnStatusRequestSignal() = 0;
    virtual void TurnByTurnEntitySignal(const ::DBus::Struct< uint32_t >& entityInfo) = 0;
    virtual void GetPhoneCallStatusRequestSignal() = 0;
    virtual void UpdateCallStatusInfoSignal(const ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, std::string, std::string, std::string >& callStatusInfo) = 0;
    virtual void SpeechEntitySignal(const ::DBus::Struct< uint32_t >& entityInfo) = 0;
    virtual void UpdateNowPlayingInfoSignal(const ::DBus::Struct< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string > >& nowPlayingInfo) = 0;
    virtual void GetVehicleBtMacAddress() = 0;
    virtual void FeatureAvailableSignal(const ::DBus::Struct< uint32_t >& availableInfo) = 0;
    virtual void DisplayDialogSignal(const ::DBus::Struct< uint32_t, std::string, std::string, uint32_t >& dialogInfo) = 0;
    virtual void UpdateAudioStatusSignal(const ::DBus::Struct< uint32_t >& audioStatus) = 0;
    virtual void DisconnectedDeviceSignal() = 0;
    virtual void UsbPortStatusSignal(const ::DBus::Struct< uint32_t, uint32_t >& usbPortStatusInfo) = 0;
    virtual void ClientConnectedSignal(const ::DBus::Struct< uint64_t, bool, bool >& clientConnectedInfo) = 0;
    virtual void ClientDisconnectedSignal(const ::DBus::Struct< uint64_t >& clientDisconnectedInfo) = 0;
    virtual void ScreenResourceReadySignal(const ::DBus::Struct< uint64_t, bool >& screenResourceReady) = 0;
    virtual void DisplayDialogResponseSignal(const ::DBus::Struct< uint32_t >& displayDialogResponseInfo) = 0;
    virtual void UsbErrorStatusSignal(const ::DBus::Struct< uint32_t >& usbErrorStatusInfo) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _DisableBluetoothSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::string > disableBluetoothInfo;
        ri >> disableBluetoothInfo;
        DisableBluetoothSignal(disableBluetoothInfo);
    }
    void _SessionActiveSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint64_t, uint32_t > sessionActiveInfo;
        ri >> sessionActiveInfo;
        SessionActiveSignal(sessionActiveInfo);
    }
    void _GetCurrentNativeScreenRequestSignal_stub(const ::DBus::SignalMessage &sig)
    {
        GetCurrentNativeScreenRequestSignal();
    }
    void _DeviceErrorSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint64_t, uint32_t > deviceErrorInfo;
        ri >> deviceErrorInfo;
        DeviceErrorSignal(deviceErrorInfo);
    }
    void _SessionDeactiveSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint64_t > sessionDeactiveInfo;
        ri >> sessionDeactiveInfo;
        SessionDeactiveSignal(sessionDeactiveInfo);
    }
    void _NativeUILaunchSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t > nativeUILaunchInfo;
        ri >> nativeUILaunchInfo;
        NativeUILaunchSignal(nativeUILaunchInfo);
    }
    void _ScreenResourceRequestSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ScreenResourceRequestSignal();
    }
    void _ScreenResourceRequestTimeoutSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t > timeoutInfo;
        ri >> timeoutInfo;
        ScreenResourceRequestTimeoutSignal(timeoutInfo);
    }
    void _NativeScreenDisplayRequestSignal_stub(const ::DBus::SignalMessage &sig)
    {
        NativeScreenDisplayRequestSignal();
    }
    void _GetTurnByTurnStatusRequestSignal_stub(const ::DBus::SignalMessage &sig)
    {
        GetTurnByTurnStatusRequestSignal();
    }
    void _TurnByTurnEntitySignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t > entityInfo;
        ri >> entityInfo;
        TurnByTurnEntitySignal(entityInfo);
    }
    void _GetPhoneCallStatusRequestSignal_stub(const ::DBus::SignalMessage &sig)
    {
        GetPhoneCallStatusRequestSignal();
    }
    void _UpdateCallStatusInfoSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, std::string, std::string, std::string > callStatusInfo;
        ri >> callStatusInfo;
        UpdateCallStatusInfoSignal(callStatusInfo);
    }
    void _SpeechEntitySignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t > entityInfo;
        ri >> entityInfo;
        SpeechEntitySignal(entityInfo);
    }
    void _UpdateNowPlayingInfoSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< ::DBus::Struct< std::string, std::string, std::string, std::string, std::string > > nowPlayingInfo;
        ri >> nowPlayingInfo;
        UpdateNowPlayingInfoSignal(nowPlayingInfo);
    }
    void _GetVehicleBtMacAddress_stub(const ::DBus::SignalMessage &sig)
    {
        GetVehicleBtMacAddress();
    }
    void _FeatureAvailableSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t > availableInfo;
        ri >> availableInfo;
        FeatureAvailableSignal(availableInfo);
    }
    void _DisplayDialogSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, std::string, std::string, uint32_t > dialogInfo;
        ri >> dialogInfo;
        DisplayDialogSignal(dialogInfo);
    }
    void _UpdateAudioStatusSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t > audioStatus;
        ri >> audioStatus;
        UpdateAudioStatusSignal(audioStatus);
    }
    void _DisconnectedDeviceSignal_stub(const ::DBus::SignalMessage &sig)
    {
        DisconnectedDeviceSignal();
    }
    void _UsbPortStatusSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t, uint32_t > usbPortStatusInfo;
        ri >> usbPortStatusInfo;
        UsbPortStatusSignal(usbPortStatusInfo);
    }
    void _ClientConnectedSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint64_t, bool, bool > clientConnectedInfo;
        ri >> clientConnectedInfo;
        ClientConnectedSignal(clientConnectedInfo);
    }
    void _ClientDisconnectedSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint64_t > clientDisconnectedInfo;
        ri >> clientDisconnectedInfo;
        ClientDisconnectedSignal(clientDisconnectedInfo);
    }
    void _ScreenResourceReadySignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint64_t, bool > screenResourceReady;
        ri >> screenResourceReady;
        ScreenResourceReadySignal(screenResourceReady);
    }
    void _DisplayDialogResponseSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t > displayDialogResponseInfo;
        ri >> displayDialogResponseInfo;
        DisplayDialogResponseSignal(displayDialogResponseInfo);
    }
    void _UsbErrorStatusSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint32_t > usbErrorStatusInfo;
        ri >> usbErrorStatusInfo;
        UsbErrorStatusSignal(usbErrorStatusInfo);
    }
};

} } 
namespace com {
namespace jci {

class pb_proxy
: public ::DBus::InterfaceProxy
{
public:

    pb_proxy()
    : ::DBus::InterfaceProxy("com.jci.pb")
    {
        connect_signal(pb_proxy, AutoDownloadSettingChanged, _AutoDownloadSettingChanged_stub);
        connect_signal(pb_proxy, ContactNameOrderSettingChanged, _ContactNameOrderSettingChanged_stub);
        connect_signal(pb_proxy, StringVoicedCompleted, _StringVoicedCompleted_stub);
        connect_signal(pb_proxy, RecentMissedCallsCounterSignal, _RecentMissedCallsCounterSignal_stub);
        connect_signal(pb_proxy, PhonebookDataDeleted, _PhonebookDataDeleted_stub);
        connect_signal(pb_proxy, ImportStatus, _ImportStatus_stub);
        connect_signal(pb_proxy, ContactDeleted, _ContactDeleted_stub);
        connect_signal(pb_proxy, CallHistoryDeleted, _CallHistoryDeleted_stub);
        connect_signal(pb_proxy, PhonebookDatabaseInfo, _PhonebookDatabaseInfo_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Import(const uint32_t& import_request, const int32_t& import_type, const uint32_t& filter_type, const uint32_t& device_id, uint32_t& import_request_reply, int32_t& import_error)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << import_request;
        wi << import_type;
        wi << filter_type;
        wi << device_id;
        call.member("Import");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> import_request_reply;
        ri >> import_error;
    }

    void AutoDownloadSetting(const uint32_t& device_id, const int32_t& import_type, const int32_t& setting_type, int32_t& status, bool& settingsValue)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device_id;
        wi << import_type;
        wi << setting_type;
        call.member("AutoDownloadSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> status;
        ri >> settingsValue;
    }

    void ContactNameOrderSetting(const int32_t& setting_type, int32_t& status, int32_t& settingsValue)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setting_type;
        call.member("ContactNameOrderSetting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> status;
        ri >> settingsValue;
    }

    int32_t AllSettingsToFactoryDefault()
    {
        ::DBus::CallMessage call;
        call.member("AllSettingsToFactoryDefault");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetStringVoiced(const int32_t& audio_focus_behaviour, const std::string& text_string)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << audio_focus_behaviour;
        wi << text_string;
        call.member("GetStringVoiced");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t StopStringVoiced(const int32_t& audio_focus_behaviour)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << audio_focus_behaviour;
        call.member("StopStringVoiced");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TalkEvent(const int32_t& audio_focus_behaviour)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << audio_focus_behaviour;
        call.member("TalkEvent");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void RecentMissedCallsCounterGet(const uint32_t& device_id, int32_t& status, uint32_t& counter_value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device_id;
        call.member("RecentMissedCallsCounterGet");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> status;
        ri >> counter_value;
    }

    int32_t RecentMissedCallsCounterReset(const uint32_t& device_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device_id;
        call.member("RecentMissedCallsCounterReset");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    std::string Debug(const bool& debug_info_out_to_file, const bool& debug_info_out_to_log, const std::string& cfg_param_name, const std::string& cfg_param_valstring, const bool& cfg_param_valbool, const int32_t& cfg_param_valint)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << debug_info_out_to_file;
        wi << debug_info_out_to_log;
        wi << cfg_param_name;
        wi << cfg_param_valstring;
        wi << cfg_param_valbool;
        wi << cfg_param_valint;
        call.member("Debug");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::string argout;
        ri >> argout;
        return argout;
    }

    int32_t ContactDelete(const uint32_t& contact_order_id, const uint32_t& contact_id, const std::string& display_name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << contact_order_id;
        wi << contact_id;
        wi << display_name;
        call.member("ContactDelete");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t CallHistoryDelete(const int32_t& call_history_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << call_history_type;
        call.member("CallHistoryDelete");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DeletePhonebookData(const uint32_t& device_id, const int32_t& phonebook_data_type, const uint32_t& entry_order_id, const uint32_t& entry_id, const std::string& display_name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << device_id;
        wi << phonebook_data_type;
        wi << entry_order_id;
        wi << entry_id;
        wi << display_name;
        call.member("DeletePhonebookData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetPhonebookDatabaseInfo(const int32_t& phonebook_database_type, const uint32_t& device_id)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << phonebook_database_type;
        wi << device_id;
        call.member("GetPhonebookDatabaseInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void AutoDownloadSettingChanged(const uint32_t& device_id, const int32_t& import_type, const bool& settingsValue) = 0;
    virtual void ContactNameOrderSettingChanged(const int32_t& settingsValue) = 0;
    virtual void StringVoicedCompleted(const int32_t& status) = 0;
    virtual void RecentMissedCallsCounterSignal(const uint32_t& device_id, const uint32_t& counter_value) = 0;
    virtual void PhonebookDataDeleted(const uint32_t& device_id, const int32_t& phonebook_data_type, const uint32_t& entry_id, const std::string& display_name, const std::string& first_name, const std::string& last_name, const std::string& phonetic_first_name, const std::string& phonetic_last_name) = 0;
    virtual void ImportStatus(const uint32_t& import_request, const int32_t& import_type, const uint32_t& filter_type, const uint32_t& device_id, const std::string& dbAlias, const uint32_t& extract_key, const int32_t& import_status, const int32_t& import_error, const uint32_t& numEntriesImported, const uint32_t& numEntriesTotal) = 0;
    virtual void ContactDeleted(const uint32_t& contact_id, const std::string& display_name) = 0;
    virtual void CallHistoryDeleted(const int32_t& call_history_type) = 0;
    virtual void PhonebookDatabaseInfo(const int32_t& phonebook_database_type, const uint32_t& device_id, const std::string& dbAlias, const int32_t& import_status, const int32_t& import_error, const uint32_t& contactsCount, const uint32_t& callhistCount, const uint32_t& missedCount, const uint64_t& time_dbModified) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _AutoDownloadSettingChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t device_id;
        ri >> device_id;
        int32_t import_type;
        ri >> import_type;
        bool settingsValue;
        ri >> settingsValue;
        AutoDownloadSettingChanged(device_id, import_type, settingsValue);
    }
    void _ContactNameOrderSettingChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t settingsValue;
        ri >> settingsValue;
        ContactNameOrderSettingChanged(settingsValue);
    }
    void _StringVoicedCompleted_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t status;
        ri >> status;
        StringVoicedCompleted(status);
    }
    void _RecentMissedCallsCounterSignal_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t device_id;
        ri >> device_id;
        uint32_t counter_value;
        ri >> counter_value;
        RecentMissedCallsCounterSignal(device_id, counter_value);
    }
    void _PhonebookDataDeleted_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t device_id;
        ri >> device_id;
        int32_t phonebook_data_type;
        ri >> phonebook_data_type;
        uint32_t entry_id;
        ri >> entry_id;
        std::string display_name;
        ri >> display_name;
        std::string first_name;
        ri >> first_name;
        std::string last_name;
        ri >> last_name;
        std::string phonetic_first_name;
        ri >> phonetic_first_name;
        std::string phonetic_last_name;
        ri >> phonetic_last_name;
        PhonebookDataDeleted(device_id, phonebook_data_type, entry_id, display_name, first_name, last_name, phonetic_first_name, phonetic_last_name);
    }
    void _ImportStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t import_request;
        ri >> import_request;
        int32_t import_type;
        ri >> import_type;
        uint32_t filter_type;
        ri >> filter_type;
        uint32_t device_id;
        ri >> device_id;
        std::string dbAlias;
        ri >> dbAlias;
        uint32_t extract_key;
        ri >> extract_key;
        int32_t import_status;
        ri >> import_status;
        int32_t import_error;
        ri >> import_error;
        uint32_t numEntriesImported;
        ri >> numEntriesImported;
        uint32_t numEntriesTotal;
        ri >> numEntriesTotal;
        ImportStatus(import_request, import_type, filter_type, device_id, dbAlias, extract_key, import_status, import_error, numEntriesImported, numEntriesTotal);
    }
    void _ContactDeleted_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t contact_id;
        ri >> contact_id;
        std::string display_name;
        ri >> display_name;
        ContactDeleted(contact_id, display_name);
    }
    void _CallHistoryDeleted_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t call_history_type;
        ri >> call_history_type;
        CallHistoryDeleted(call_history_type);
    }
    void _PhonebookDatabaseInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t phonebook_database_type;
        ri >> phonebook_database_type;
        uint32_t device_id;
        ri >> device_id;
        std::string dbAlias;
        ri >> dbAlias;
        int32_t import_status;
        ri >> import_status;
        int32_t import_error;
        ri >> import_error;
        uint32_t contactsCount;
        ri >> contactsCount;
        uint32_t callhistCount;
        ri >> callhistCount;
        uint32_t missedCount;
        ri >> missedCount;
        uint64_t time_dbModified;
        ri >> time_dbModified;
        PhonebookDatabaseInfo(phonebook_database_type, device_id, dbAlias, import_status, import_error, contactsCount, callhistCount, missedCount, time_dbModified);
    }
};

} } 
namespace com {
namespace jci {

class nativeguictrl_proxy
: public ::DBus::InterfaceProxy
{
public:

    nativeguictrl_proxy()
    : ::DBus::InterfaceProxy("com.jci.nativeguictrl")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void SetRequiredSurfaces(const std::string& surfaces, const int16_t& bFadeOpera)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << surfaces;
        wi << bFadeOpera;
        call.member("SetRequiredSurfaces");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
namespace com {
namespace jci {

class natgui_proxy
: public ::DBus::InterfaceProxy
{
public:

    natgui_proxy()
    : ::DBus::InterfaceProxy("com.jci.natgui")
    {
        connect_signal(natgui_proxy, LanguageSetStatus, _LanguageSetStatus_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t SetDisplay(const ::DBus::Struct< std::vector< uint32_t >, uint32_t, uint32_t >& imageData)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << imageData;
        call.member("SetDisplay");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetLanguage_async(const uint32_t& currentLanguage)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << currentLanguage;
        call.member("SetLanguage_async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void LanguageSetStatus(const uint32_t& currentLanguage, const uint32_t& status) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _LanguageSetStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t currentLanguage;
        ri >> currentLanguage;
        uint32_t status;
        ri >> status;
        LanguageSetStatus(currentLanguage, status);
    }
};

} } 
namespace com {
namespace jci {

class dab_proxy
: public ::DBus::InterfaceProxy
{
public:

    dab_proxy()
    : ::DBus::InterfaceProxy("com.jci.dab")
    {
        connect_signal(dab_proxy, TAU_Connection_Status, _TAU_Connection_Status_stub);
        connect_signal(dab_proxy, Signal_Strength_Status, _Signal_Strength_Status_stub);
        connect_signal(dab_proxy, Link_Setting_Status, _Link_Setting_Status_stub);
        connect_signal(dab_proxy, Band_Setting_Status, _Band_Setting_Status_stub);
        connect_signal(dab_proxy, TA_Setting_Status, _TA_Setting_Status_stub);
        connect_signal(dab_proxy, Radio_Text_Setting_Status, _Radio_Text_Setting_Status_stub);
        connect_signal(dab_proxy, Full_List_Update_Status, _Full_List_Update_Status_stub);
        connect_signal(dab_proxy, Tuner_Mode_Status, _Tuner_Mode_Status_stub);
        connect_signal(dab_proxy, Dab_Mode_Status, _Dab_Mode_Status_stub);
        connect_signal(dab_proxy, TAU_List_Status, _TAU_List_Status_stub);
        connect_signal(dab_proxy, Channel_Status, _Channel_Status_stub);
        connect_signal(dab_proxy, Info_Change_Status, _Info_Change_Status_stub);
        connect_signal(dab_proxy, Clear_Label_Field_Status, _Clear_Label_Field_Status_stub);
        connect_signal(dab_proxy, Install_Status, _Install_Status_stub);
        connect_signal(dab_proxy, Ens_List_Status, _Ens_List_Status_stub);
        connect_signal(dab_proxy, Compo_List_Status, _Compo_List_Status_stub);
        connect_signal(dab_proxy, New_List_Available, _New_List_Available_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t Get_Dab_Mode_Status()
    {
        ::DBus::CallMessage call;
        call.member("Get_Dab_Mode_Status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_Tuner_Mode_Status()
    {
        ::DBus::CallMessage call;
        call.member("Get_Tuner_Mode_Status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_Install_Status()
    {
        ::DBus::CallMessage call;
        call.member("Get_Install_Status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_Channel_Status()
    {
        ::DBus::CallMessage call;
        call.member("Get_Channel_Status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_Signal_Strength_Status()
    {
        ::DBus::CallMessage call;
        call.member("Get_Signal_Strength_Status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_TAU_List_Status()
    {
        ::DBus::CallMessage call;
        call.member("Get_TAU_List_Status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Tuner_Mode_Change(const int32_t& tuner_mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tuner_mode;
        call.member("Tuner_Mode_Change");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Scan_Req(const int32_t& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("Scan_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Compo_Seek_Req(const int32_t& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("Compo_Seek_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Ens_Seek_Req(const int32_t& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("Ens_Seek_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Direct_Control_Req(const ::DBus::Struct< std::vector< uint8_t >, uint16_t, uint16_t, uint8_t >& channel_info)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << channel_info;
        call.member("Direct_Control_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Update_TAU_List_Req()
    {
        ::DBus::CallMessage call;
        call.member("Update_TAU_List_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Link_Setting_Change_Req(const ::DBus::Struct< int32_t, int32_t >& link_setting)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << link_setting;
        call.member("Link_Setting_Change_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Band_Setting_Change_Req(const int32_t& band_mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << band_mode;
        call.member("Band_Setting_Change_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t TA_Setting_Change_Req(const int32_t& ta_mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ta_mode;
        call.member("TA_Setting_Change_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Radio_Text_Setting_Change_Req(const int32_t& radio_text_mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << radio_text_mode;
        call.member("Radio_Text_Setting_Change_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_DAB_DAB_Setting_Req()
    {
        ::DBus::CallMessage call;
        call.member("Get_DAB_DAB_Setting_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_DAB_FM_Setting_Req()
    {
        ::DBus::CallMessage call;
        call.member("Get_DAB_FM_Setting_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_Band_Setting_Req()
    {
        ::DBus::CallMessage call;
        call.member("Get_Band_Setting_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_TA_Setting_Req()
    {
        ::DBus::CallMessage call;
        call.member("Get_TA_Setting_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_Radio_Text_Setting_Status()
    {
        ::DBus::CallMessage call;
        call.member("Get_Radio_Text_Setting_Status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_TAU_Connection_Status()
    {
        ::DBus::CallMessage call;
        call.member("Get_TAU_Connection_Status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Fav_Seek_Req(const int32_t& fav_seek_dir, const ::DBus::Struct< std::vector< uint8_t >, uint16_t, uint16_t, uint8_t >& channel_info)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fav_seek_dir;
        wi << channel_info;
        call.member("Fav_Seek_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Factory_Reset_Setting()
    {
        ::DBus::CallMessage call;
        call.member("Factory_Reset_Setting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void TAU_Connection_Status(const int32_t& tau_status) = 0;
    virtual void Signal_Strength_Status(const int32_t& signal_strength) = 0;
    virtual void Link_Setting_Status(const ::DBus::Struct< int32_t, int32_t >& link_setting) = 0;
    virtual void Band_Setting_Status(const int32_t& band_mode) = 0;
    virtual void TA_Setting_Status(const int32_t& ta_mode) = 0;
    virtual void Radio_Text_Setting_Status(const int32_t& radio_text_mode) = 0;
    virtual void Full_List_Update_Status(const int32_t& status) = 0;
    virtual void Tuner_Mode_Status(const int32_t& tuner_mode) = 0;
    virtual void Dab_Mode_Status(const ::DBus::Struct< int32_t, int32_t >& dab_state) = 0;
    virtual void TAU_List_Status(const int32_t& list_status) = 0;
    virtual void Channel_Status(const ::DBus::Struct< std::vector< uint8_t >, uint16_t, uint16_t, uint8_t >& channel_info) = 0;
    virtual void Info_Change_Status(const ::DBus::Struct< bool, bool, bool, bool, int32_t, std::vector< uint8_t > >& info_change_status) = 0;
    virtual void Clear_Label_Field_Status(const ::DBus::Struct< bool, bool, bool, bool >& clear_label_field) = 0;
    virtual void Install_Status(const int32_t& install_status) = 0;
    virtual void Ens_List_Status(const bool& status) = 0;
    virtual void Compo_List_Status(const ::DBus::Struct< uint16_t, bool >& compo_status) = 0;
    virtual void New_List_Available() = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _TAU_Connection_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t tau_status;
        ri >> tau_status;
        TAU_Connection_Status(tau_status);
    }
    void _Signal_Strength_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t signal_strength;
        ri >> signal_strength;
        Signal_Strength_Status(signal_strength);
    }
    void _Link_Setting_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t > link_setting;
        ri >> link_setting;
        Link_Setting_Status(link_setting);
    }
    void _Band_Setting_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t band_mode;
        ri >> band_mode;
        Band_Setting_Status(band_mode);
    }
    void _TA_Setting_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ta_mode;
        ri >> ta_mode;
        TA_Setting_Status(ta_mode);
    }
    void _Radio_Text_Setting_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t radio_text_mode;
        ri >> radio_text_mode;
        Radio_Text_Setting_Status(radio_text_mode);
    }
    void _Full_List_Update_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t status;
        ri >> status;
        Full_List_Update_Status(status);
    }
    void _Tuner_Mode_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t tuner_mode;
        ri >> tuner_mode;
        Tuner_Mode_Status(tuner_mode);
    }
    void _Dab_Mode_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t > dab_state;
        ri >> dab_state;
        Dab_Mode_Status(dab_state);
    }
    void _TAU_List_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t list_status;
        ri >> list_status;
        TAU_List_Status(list_status);
    }
    void _Channel_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< std::vector< uint8_t >, uint16_t, uint16_t, uint8_t > channel_info;
        ri >> channel_info;
        Channel_Status(channel_info);
    }
    void _Info_Change_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< bool, bool, bool, bool, int32_t, std::vector< uint8_t > > info_change_status;
        ri >> info_change_status;
        Info_Change_Status(info_change_status);
    }
    void _Clear_Label_Field_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< bool, bool, bool, bool > clear_label_field;
        ri >> clear_label_field;
        Clear_Label_Field_Status(clear_label_field);
    }
    void _Install_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t install_status;
        ri >> install_status;
        Install_Status(install_status);
    }
    void _Ens_List_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool status;
        ri >> status;
        Ens_List_Status(status);
    }
    void _Compo_List_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< uint16_t, bool > compo_status;
        ri >> compo_status;
        Compo_List_Status(compo_status);
    }
    void _New_List_Available_stub(const ::DBus::SignalMessage &sig)
    {
        New_List_Available();
    }
};

} } 
namespace com {
namespace jci {

class blm_nms_proxy
: public ::DBus::InterfaceProxy
{
public:

    blm_nms_proxy()
    : ::DBus::InterfaceProxy("com.jci.blm_nms")
    {
        connect_signal(blm_nms_proxy, ConnectResult, _ConnectResult_stub);
        connect_signal(blm_nms_proxy, InterfaceArrive, _InterfaceArrive_stub);
        connect_signal(blm_nms_proxy, InterfaceDeparture, _InterfaceDeparture_stub);
        connect_signal(blm_nms_proxy, InterfaceChanged, _InterfaceChanged_stub);
        connect_signal(blm_nms_proxy, InterfaceConnecting, _InterfaceConnecting_stub);
        connect_signal(blm_nms_proxy, InterfaceDisconnecting, _InterfaceDisconnecting_stub);
        connect_signal(blm_nms_proxy, InterfaceConnected, _InterfaceConnected_stub);
        connect_signal(blm_nms_proxy, InterfaceDisconnected, _InterfaceDisconnected_stub);
        connect_signal(blm_nms_proxy, WIFI_ScanResultsReady, _WIFI_ScanResultsReady_stub);
        connect_signal(blm_nms_proxy, InterfaceWiFiModeChanged, _InterfaceWiFiModeChanged_stub);
        connect_signal(blm_nms_proxy, WIFI_ApClientConnected, _WIFI_ApClientConnected_stub);
        connect_signal(blm_nms_proxy, WIFI_ApClientDisconnected, _WIFI_ApClientDisconnected_stub);
        connect_signal(blm_nms_proxy, ConnectionStateChanged, _ConnectionStateChanged_stub);
        connect_signal(blm_nms_proxy, WifiStatus, _WifiStatus_stub);
        connect_signal(blm_nms_proxy, BLMStatus, _BLMStatus_stub);
        connect_signal(blm_nms_proxy, ConnectionStatus, _ConnectionStatus_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void GetConnectionState(int32_t& return_value, int32_t& connectionState)
    {
        ::DBus::CallMessage call;
        call.member("GetConnectionState");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> connectionState;
    }

    void GetConnectionState_Async(int32_t& return_value, int32_t& connectionState)
    {
        ::DBus::CallMessage call;
        call.member("GetConnectionState_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> connectionState;
    }

    void Connect(const int32_t& ifcId, int32_t& return_value, int32_t& reqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> reqId;
    }

    void Connect_Async(const int32_t& ifcId, int32_t& return_value, int32_t& reqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("Connect_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> reqId;
    }

    int32_t Disconnect(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Disconnect_Async(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("Disconnect_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Abort(const int32_t& reqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << reqId;
        call.member("Abort");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Abort_Async(const int32_t& reqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << reqId;
        call.member("Abort_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetWiFiAutoconnect(const bool& state)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << state;
        call.member("SetWiFiAutoconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetWiFiAutoconnect_Async(const bool& state)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << state;
        call.member("SetWiFiAutoconnect_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetWiFiAutoconnect(int32_t& return_value, bool& state)
    {
        ::DBus::CallMessage call;
        call.member("GetWiFiAutoconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> state;
    }

    void GetWiFiAutoconnect_Async(int32_t& return_value, bool& state)
    {
        ::DBus::CallMessage call;
        call.member("GetWiFiAutoconnect_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> state;
    }

    int32_t SetModemAutoconnect(const bool& state)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << state;
        call.member("SetModemAutoconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetModemAutoconnect_Async(const bool& state)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << state;
        call.member("SetModemAutoconnect_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetModemAutoconnect(int32_t& return_value, bool& state)
    {
        ::DBus::CallMessage call;
        call.member("GetModemAutoconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> state;
    }

    void GetModemAutoconnect_Async(int32_t& return_value, bool& state)
    {
        ::DBus::CallMessage call;
        call.member("GetModemAutoconnect_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> state;
    }

    void GetInterfaceList(int32_t& return_value, ::DBus::Struct< std::vector< int32_t > >& ifcList)
    {
        ::DBus::CallMessage call;
        call.member("GetInterfaceList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> ifcList;
    }

    void GetInterfaceList_Async(int32_t& return_value, ::DBus::Struct< std::vector< int32_t > >& ifcList)
    {
        ::DBus::CallMessage call;
        call.member("GetInterfaceList_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> ifcList;
    }

    void GetInterfaceParams(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< int32_t, int32_t, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, int32_t, int32_t, int32_t, int32_t >& ifcParams)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("GetInterfaceParams");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> ifcParams;
    }

    void GetInterfaceParams_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< int32_t, int32_t, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, int32_t, int32_t, int32_t, int32_t >& ifcParams)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("GetInterfaceParams_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> ifcParams;
    }

    int32_t SetInterfaceParams(const int32_t& ifcId, const ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, int32_t, int32_t >& ifcParams, const int32_t& setMask)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << ifcParams;
        wi << setMask;
        call.member("SetInterfaceParams");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetInterfaceParams_Async(const int32_t& ifcId, const ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, int32_t, int32_t >& ifcParams, const int32_t& setMask)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << ifcParams;
        wi << setMask;
        call.member("SetInterfaceParams_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DHCP_ServerSetConfig(const int32_t& ifcId, const ::DBus::Struct< std::string, std::string >& dhcpConf)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << dhcpConf;
        call.member("DHCP_ServerSetConfig");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DHCP_ServerSetConfig_Async(const int32_t& ifcId, const ::DBus::Struct< std::string, std::string >& dhcpConf)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << dhcpConf;
        call.member("DHCP_ServerSetConfig_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void DHCP_ServerGetConfig(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::string, std::string >& dhcpConf)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerGetConfig");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> dhcpConf;
    }

    void DHCP_ServerGetConfig_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::string, std::string >& dhcpConf)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerGetConfig_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> dhcpConf;
    }

    int32_t DHCP_ServerStart(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerStart");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DHCP_ServerStart_Async(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerStart_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DHCP_ServerStop(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerStop");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DHCP_ServerStop_Async(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerStop_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void DHCP_ServerGetClients(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string > > >& clients)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerGetClients");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> clients;
    }

    void DHCP_ServerGetClients_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string > > >& clients)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerGetClients_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> clients;
    }

    int32_t ActivateNAT(const bool& enable)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << enable;
        call.member("ActivateNAT");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ActivateNAT_Async(const bool& enable)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << enable;
        call.member("ActivateNAT_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AdvancedRouting(const bool& enable)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << enable;
        call.member("AdvancedRouting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AdvancedRouting_Async(const bool& enable)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << enable;
        call.member("AdvancedRouting_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetHostname(const std::string& hostname)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hostname;
        call.member("SetHostname");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetHostname_Async(const std::string& hostname)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hostname;
        call.member("SetHostname_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetHostname(int32_t& return_value, std::string& hostname)
    {
        ::DBus::CallMessage call;
        call.member("GetHostname");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> hostname;
    }

    void GetHostname_Async(int32_t& return_value, std::string& hostname)
    {
        ::DBus::CallMessage call;
        call.member("GetHostname_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> hostname;
    }

    int32_t MonitorInterface(const int32_t& ifcId, const bool& turn)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << turn;
        call.member("MonitorInterface");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t MonitorInterface_Async(const int32_t& ifcId, const bool& turn)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << turn;
        call.member("MonitorInterface_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_SetMode(const int32_t& ifcId, const int32_t& mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << mode;
        call.member("WIFI_SetMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_SetMode_Async(const int32_t& ifcId, const int32_t& mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << mode;
        call.member("WIFI_SetMode_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void WIFI_GetMode(const int32_t& ifcId, int32_t& return_value, int32_t& mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> mode;
    }

    void WIFI_GetMode_Async(const int32_t& ifcId, int32_t& return_value, int32_t& mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetMode_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> mode;
    }

    int32_t WIFI_SelectNetwork(const int32_t& ifcId, const int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        call.member("WIFI_SelectNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_SelectNetwork_Async(const int32_t& ifcId, const int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        call.member("WIFI_SelectNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void WIFI_GetSelectNetwork(const int32_t& ifcId, int32_t& return_value, int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetSelectNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> networkId;
    }

    void WIFI_GetSelectNetwork_Async(const int32_t& ifcId, int32_t& return_value, int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetSelectNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> networkId;
    }

    void WIFI_AddNetwork(const int32_t& ifcId, const ::DBus::Struct< std::string, std::string, int32_t, bool, std::string >& network, int32_t& return_value, int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << network;
        call.member("WIFI_AddNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> networkId;
    }

    void WIFI_AddNetwork_Async(const int32_t& ifcId, const ::DBus::Struct< std::string, std::string, int32_t, bool, std::string >& network, int32_t& return_value, int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << network;
        call.member("WIFI_AddNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> networkId;
    }

    void WIFI_AddNetwork_Ex(const int32_t& ifcId, const ::DBus::Struct< std::string, std::string, int32_t, int32_t, bool, std::string, ::DBus::Struct< std::string, std::string, std::string, std::string >, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > >& network, int32_t& return_value, int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << network;
        call.member("WIFI_AddNetwork_Ex");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> networkId;
    }

    void WIFI_AddNetwork_Ex_Async(const int32_t& ifcId, const ::DBus::Struct< std::string, std::string, int32_t, int32_t, bool, std::string, ::DBus::Struct< std::string, std::string, std::string, std::string >, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > >& network, int32_t& return_value, int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << network;
        call.member("WIFI_AddNetwork_Ex_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> networkId;
    }

    int32_t WIFI_RemoveConfiguredNetwork(const int32_t& ifcId, const int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        call.member("WIFI_RemoveConfiguredNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_RemoveConfiguredNetwork_Async(const int32_t& ifcId, const int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        call.member("WIFI_RemoveConfiguredNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_UpdateNetworkPass(const int32_t& ifcId, const uint32_t& networkId, const std::string& password)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        wi << password;
        call.member("WIFI_UpdateNetworkPass");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_UpdateNetworkPass_Async(const int32_t& ifcId, const uint32_t& networkId, const std::string& password)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        wi << password;
        call.member("WIFI_UpdateNetworkPass_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_UpdateConfiguredNetwork(const int32_t& ifcId, const int32_t& networkId, const ::DBus::Struct< std::string, std::string, int32_t, int32_t, bool, std::string, ::DBus::Struct< std::string, std::string, std::string, std::string >, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > >& network)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        wi << network;
        call.member("WIFI_UpdateConfiguredNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_UpdateNetwork_Async(const int32_t& ifcId, const int32_t& networkId, const ::DBus::Struct< std::string, std::string, int32_t, int32_t, bool, std::string, ::DBus::Struct< std::string, std::string, std::string, std::string >, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > >& network)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        wi << network;
        call.member("WIFI_UpdateNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_SaveConfiguredNetworks(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_SaveConfiguredNetworks");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_SaveConfiguredNetworks_Async(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_SaveConfiguredNetworks_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_StartScan(const int32_t& ifcId, const int32_t& refreshTime)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << refreshTime;
        call.member("WIFI_StartScan");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_StartScan_Async(const int32_t& ifcId, const int32_t& refreshTime)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << refreshTime;
        call.member("WIFI_StartScan_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_StopScan(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_StopScan");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_StopScan_Async(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_StopScan_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void WIFI_GetScanResults(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, int32_t > > >& scanList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetScanResults");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> scanList;
    }

    void WIFI_GetScanResults_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, int32_t > > >& scanList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetScanResults_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> scanList;
    }

    void WIFI_GetConfiguredNetworks(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string, std::string, int32_t, bool, std::string, int32_t > > >& netList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetConfiguredNetworks");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> netList;
    }

    void WIFI_GetConfiguredNetworks_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string, std::string, int32_t, bool, std::string, int32_t > > >& netList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetConfiguredNetworks_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> netList;
    }

    void WIFI_GetConfiguredNetworks_Ex(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string, std::string, int32_t, int32_t, bool, std::string, ::DBus::Struct< std::string, std::string, std::string, std::string >, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > > > >& netList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetConfiguredNetworks_Ex");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> netList;
    }

    void WIFI_GetConfiguredNetworks_Ex_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string, std::string, int32_t, int32_t, bool, std::string, ::DBus::Struct< std::string, std::string, std::string, std::string >, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > > > >& netList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetConfiguredNetworks_Ex_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> netList;
    }

    void WIFI_GetNetCount(const int32_t& ifcId, int32_t& return_value, int32_t& netCount, int32_t& maxNetCount)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetNetCount");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> netCount;
        ri >> maxNetCount;
    }

    void WIFI_GetNetCount_Async(const int32_t& ifcId, int32_t& return_value, int32_t& netCount, int32_t& maxNetCount)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetNetCount_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> netCount;
        ri >> maxNetCount;
    }

    void WIFI_GetConnectionInfo(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< uint32_t, ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, int32_t > >& connInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetConnectionInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> connInfo;
    }

    void WIFI_GetConnectionInfo_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< uint32_t, ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, int32_t > >& connInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetConnectionInfo_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> connInfo;
    }

    void WIFI_GetCombinedNetworksList(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string, std::string, int32_t, int32_t, int32_t, int32_t > > >& netList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetCombinedNetworksList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> netList;
    }

    void WIFI_GetCombinedNetworksList_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, std::string, std::string, int32_t, int32_t, int32_t, int32_t > > >& netList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetCombinedNetworksList_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> netList;
    }

    int32_t AP_SelectConfiguration(const int32_t& secType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << secType;
        call.member("AP_SelectConfiguration");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_SelectConfiguration_Async(const int32_t& secType)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << secType;
        call.member("AP_SelectConfiguration_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void AP_GetSelectedConfiguration(int32_t& return_value, int32_t& secType)
    {
        ::DBus::CallMessage call;
        call.member("AP_GetSelectedConfiguration");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> secType;
    }

    void AP_GetSelectedConfiguration_Async(int32_t& return_value, int32_t& secType)
    {
        ::DBus::CallMessage call;
        call.member("AP_GetSelectedConfiguration_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> secType;
    }

    int32_t AP_SetHostConfig(const ::DBus::Struct< std::string, std::string, int32_t, bool >& config)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << config;
        call.member("AP_SetHostConfig");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_SetHostConfig_Async(const ::DBus::Struct< std::string, std::string, int32_t, bool >& config)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << config;
        call.member("AP_SetHostConfig_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void AP_GetHostConfig(const int32_t& secSettings, int32_t& return_value, ::DBus::Struct< std::string, std::string, int32_t, bool >& config)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << secSettings;
        call.member("AP_GetHostConfig");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> config;
    }

    void AP_GetHostConfig_Async(const int32_t& secSettings, int32_t& return_value, ::DBus::Struct< std::string, std::string, int32_t, bool >& config)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << secSettings;
        call.member("AP_GetHostConfig_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> config;
    }

    void AP_GetClients(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string > > >& clients)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("AP_GetClients");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> clients;
    }

    void AP_GetClients_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string > > >& clients)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("AP_GetClients_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> clients;
    }

    int32_t AP_AddToBlacklist(const int32_t& ifcId, const std::string& mac)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << mac;
        call.member("AP_AddToBlacklist");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_AddToBlacklist_Async(const int32_t& ifcId, const std::string& mac)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << mac;
        call.member("AP_AddToBlacklist_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_RemoveFromBlacklist(const int32_t& ifcId, const std::string& mac)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << mac;
        call.member("AP_RemoveFromBlacklist");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_RemoveFromBlacklist_Async(const int32_t& ifcId, const std::string& mac)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << mac;
        call.member("AP_RemoveFromBlacklist_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void AP_GetBlacklist(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< std::string > >& list)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("AP_GetBlacklist");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> list;
    }

    void AP_GetBlacklist_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< std::string > >& list)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("AP_GetBlacklist_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> list;
    }

    int32_t AP_ClearBlacklist(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("AP_ClearBlacklist");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_ClearBlacklist_Async(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("AP_ClearBlacklist_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void Get_ModemList(int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< int32_t, int32_t, std::string, std::string, std::string, std::string, std::string, std::string, std::string, int32_t, bool, std::vector< std::string > > > >& params)
    {
        ::DBus::CallMessage call;
        call.member("Get_ModemList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> params;
    }

    void Get_ModemList_Async(int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< int32_t, int32_t, std::string, std::string, std::string, std::string, std::string, std::string, std::string, int32_t, bool, std::vector< std::string > > > >& params)
    {
        ::DBus::CallMessage call;
        call.member("Get_ModemList_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> params;
    }

    void Get_ModemParams(const int32_t& mId, int32_t& return_value, ::DBus::Struct< int32_t, int32_t, std::string, std::string, std::string, std::string, std::string, std::string, std::string, int32_t, bool, std::vector< std::string > >& params)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mId;
        call.member("Get_ModemParams");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> params;
    }

    void Get_ModemParams_Async(const int32_t& mId, int32_t& return_value, ::DBus::Struct< int32_t, int32_t, std::string, std::string, std::string, std::string, std::string, std::string, std::string, int32_t, bool, std::vector< std::string > >& params)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mId;
        call.member("Get_ModemParams_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> params;
    }

    int32_t Set_ModemParams(const int32_t& mId, const ::DBus::Struct< std::string, std::string, std::string, std::string, std::string >& params, const int32_t& updateMask)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mId;
        wi << params;
        wi << updateMask;
        call.member("Set_ModemParams");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Set_ModemParams_Async(const int32_t& mId, const ::DBus::Struct< std::string, std::string, std::string, std::string, std::string >& params, const int32_t& updateMask)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mId;
        wi << params;
        wi << updateMask;
        call.member("Set_ModemParams_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AddModem(const std::string& modemId, const std::string& vendor, const ::DBus::Struct< std::vector< std::string > >& ports)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << modemId;
        wi << vendor;
        wi << ports;
        call.member("AddModem");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RemoveModem(const std::string& modemId, const std::string& vendor)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << modemId;
        wi << vendor;
        call.member("RemoveModem");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Debug_ModemDump()
    {
        ::DBus::CallMessage call;
        call.member("Debug_ModemDump");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void ConnectResult(const int32_t& ifcId, const int32_t& reqId, const int32_t& result) = 0;
    virtual void InterfaceArrive(const int32_t& ifcId) = 0;
    virtual void InterfaceDeparture(const int32_t& ifcId) = 0;
    virtual void InterfaceChanged(const int32_t& ifcId, const int32_t& changeMask) = 0;
    virtual void InterfaceConnecting(const int32_t& ifcId) = 0;
    virtual void InterfaceDisconnecting(const int32_t& ifcId) = 0;
    virtual void InterfaceConnected(const int32_t& ifcId) = 0;
    virtual void InterfaceDisconnected(const int32_t& ifcId, const int32_t& reason) = 0;
    virtual void WIFI_ScanResultsReady(const int32_t& ifcId) = 0;
    virtual void InterfaceWiFiModeChanged(const int32_t& ifcId, const int32_t& mode) = 0;
    virtual void WIFI_ApClientConnected(const int32_t& ifcId, const std::string& bssid) = 0;
    virtual void WIFI_ApClientDisconnected(const int32_t& ifcId, const std::string& bssid) = 0;
    virtual void ConnectionStateChanged(const int32_t& connState) = 0;
    virtual void WifiStatus(const ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t >& status) = 0;
    virtual void BLMStatus(const ::DBus::Struct< int32_t >& status) = 0;
    virtual void ConnectionStatus(const ::DBus::Struct< int32_t, int32_t, int32_t, uint64_t, uint64_t >& status) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ConnectResult_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        int32_t reqId;
        ri >> reqId;
        int32_t result;
        ri >> result;
        ConnectResult(ifcId, reqId, result);
    }
    void _InterfaceArrive_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        InterfaceArrive(ifcId);
    }
    void _InterfaceDeparture_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        InterfaceDeparture(ifcId);
    }
    void _InterfaceChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        int32_t changeMask;
        ri >> changeMask;
        InterfaceChanged(ifcId, changeMask);
    }
    void _InterfaceConnecting_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        InterfaceConnecting(ifcId);
    }
    void _InterfaceDisconnecting_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        InterfaceDisconnecting(ifcId);
    }
    void _InterfaceConnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        InterfaceConnected(ifcId);
    }
    void _InterfaceDisconnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        int32_t reason;
        ri >> reason;
        InterfaceDisconnected(ifcId, reason);
    }
    void _WIFI_ScanResultsReady_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        WIFI_ScanResultsReady(ifcId);
    }
    void _InterfaceWiFiModeChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        int32_t mode;
        ri >> mode;
        InterfaceWiFiModeChanged(ifcId, mode);
    }
    void _WIFI_ApClientConnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        std::string bssid;
        ri >> bssid;
        WIFI_ApClientConnected(ifcId, bssid);
    }
    void _WIFI_ApClientDisconnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        std::string bssid;
        ri >> bssid;
        WIFI_ApClientDisconnected(ifcId, bssid);
    }
    void _ConnectionStateChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t connState;
        ri >> connState;
        ConnectionStateChanged(connState);
    }
    void _WifiStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t, uint32_t > status;
        ri >> status;
        WifiStatus(status);
    }
    void _BLMStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t > status;
        ri >> status;
        BLMStatus(status);
    }
    void _ConnectionStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t, int32_t, uint64_t, uint64_t > status;
        ri >> status;
        ConnectionStatus(status);
    }
};

} } 
namespace com {
namespace jci {

class nms_proxy
: public ::DBus::InterfaceProxy
{
public:

    nms_proxy()
    : ::DBus::InterfaceProxy("com.jci.nms")
    {
        connect_signal(nms_proxy, InterfaceArrive, _InterfaceArrive_stub);
        connect_signal(nms_proxy, InterfaceDeparture, _InterfaceDeparture_stub);
        connect_signal(nms_proxy, InterfaceChanged, _InterfaceChanged_stub);
        connect_signal(nms_proxy, InterfaceConnecting, _InterfaceConnecting_stub);
        connect_signal(nms_proxy, InterfaceDisconnecting, _InterfaceDisconnecting_stub);
        connect_signal(nms_proxy, InterfaceConnected, _InterfaceConnected_stub);
        connect_signal(nms_proxy, InterfaceDisconnected, _InterfaceDisconnected_stub);
        connect_signal(nms_proxy, WifiScanResultsReady, _WifiScanResultsReady_stub);
        connect_signal(nms_proxy, ConnectResult, _ConnectResult_stub);
        connect_signal(nms_proxy, InterfaceWiFiModeChanged, _InterfaceWiFiModeChanged_stub);
        connect_signal(nms_proxy, WiFiAPClientConnected, _WiFiAPClientConnected_stub);
        connect_signal(nms_proxy, WiFiAPClientDisconnected, _WiFiAPClientDisconnected_stub);
        connect_signal(nms_proxy, APOpenInfo, _APOpenInfo_stub);
        connect_signal(nms_proxy, APWepInfo, _APWepInfo_stub);
        connect_signal(nms_proxy, APWpaInfo, _APWpaInfo_stub);
        connect_signal(nms_proxy, InterfaceMonitorData, _InterfaceMonitorData_stub);
        connect_signal(nms_proxy, WifiSignalStrength, _WifiSignalStrength_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void GetInterfaceList(int32_t& return_value, ::DBus::Struct< std::vector< int32_t > >& ifcList)
    {
        ::DBus::CallMessage call;
        call.member("GetInterfaceList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> ifcList;
    }

    void GetInterfaceList_Async(int32_t& return_value, ::DBus::Struct< std::vector< int32_t > >& ifcList)
    {
        ::DBus::CallMessage call;
        call.member("GetInterfaceList_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> ifcList;
    }

    void Connect(const int32_t& ifcId, int32_t& return_value, int32_t& reqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> reqId;
    }

    void Connect_Async(const int32_t& ifcId, int32_t& return_value, int32_t& reqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("Connect_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> reqId;
    }

    int32_t Disconnect(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Disconnect_Async(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("Disconnect_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Abort(const int32_t& reqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << reqId;
        call.member("Abort");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Abort_Async(const int32_t& reqId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << reqId;
        call.member("Abort_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetInterfaceParams(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< int32_t, int32_t, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, int32_t, int32_t, int32_t, int32_t >& ifcParams)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("GetInterfaceParams");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> ifcParams;
    }

    void GetInterfaceParams_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< int32_t, int32_t, std::string, std::string, std::string, std::string, std::string, std::string, std::string, std::string, int32_t, int32_t, int32_t, int32_t >& ifcParams)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("GetInterfaceParams_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> ifcParams;
    }

    int32_t SetInterfaceParams(const int32_t& ifcId, const ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, int32_t, int32_t >& ifcParams, const int32_t& setMask)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << ifcParams;
        wi << setMask;
        call.member("SetInterfaceParams");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetInterfaceParams_Async(const int32_t& ifcId, const ::DBus::Struct< std::string, std::string, std::string, std::string, std::string, std::string, int32_t, int32_t >& ifcParams, const int32_t& setMask)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << ifcParams;
        wi << setMask;
        call.member("SetInterfaceParams_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_SetMode(const int32_t& ifcId, const int32_t& mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << mode;
        call.member("WIFI_SetMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_SetMode_Async(const int32_t& ifcId, const int32_t& mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << mode;
        call.member("WIFI_SetMode_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void WIFI_GetMode(const int32_t& ifcId, int32_t& return_value, int32_t& mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetMode");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> mode;
    }

    void WIFI_GetMode_Async(const int32_t& ifcId, int32_t& return_value, int32_t& mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetMode_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> mode;
    }

    int32_t WIFI_SelectNetwork(const int32_t& ifcId, const int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        call.member("WIFI_SelectNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_SelectNetwork_Async(const int32_t& ifcId, const int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        call.member("WIFI_SelectNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void WIFI_GetSelectNetwork(const int32_t& ifcId, int32_t& return_value, int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetSelectNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> networkId;
    }

    void WIFI_GetSelectNetwork_Async(const int32_t& ifcId, int32_t& return_value, int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetSelectNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> networkId;
    }

    void WIFI_AddNetwork(const int32_t& ifcId, const ::DBus::Struct< uint32_t, uint32_t, std::string, std::string, uint32_t, uint32_t, bool, std::string, ::DBus::Struct< std::string, std::string, std::string, std::string >, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > >& network, int32_t& return_value, int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << network;
        call.member("WIFI_AddNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> networkId;
    }

    void WIFI_AddNetwork_Async(const int32_t& ifcId, const ::DBus::Struct< uint32_t, uint32_t, std::string, std::string, uint32_t, uint32_t, bool, std::string, ::DBus::Struct< std::string, std::string, std::string, std::string >, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > >& network, int32_t& return_value, int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << network;
        call.member("WIFI_AddNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> networkId;
    }

    int32_t WIFI_RemoveConfiguredNetwork(const int32_t& ifcId, const int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        call.member("WIFI_RemoveConfiguredNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_RemoveConfiguredNetwork_Async(const int32_t& ifcId, const int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        call.member("WIFI_RemoveConfiguredNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_UpdateConfiguredNetwork(const int32_t& ifcId, const ::DBus::Struct< uint32_t, uint32_t, std::string, std::string, uint32_t, uint32_t, bool, std::string, ::DBus::Struct< std::string, std::string, std::string, std::string >, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > >& network)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << network;
        call.member("WIFI_UpdateConfiguredNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_UpdateConfiguredNetwork_Async(const int32_t& ifcId, const ::DBus::Struct< uint32_t, uint32_t, std::string, std::string, uint32_t, uint32_t, bool, std::string, ::DBus::Struct< std::string, std::string, std::string, std::string >, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > >& network)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << network;
        call.member("WIFI_UpdateConfiguredNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_StartScan(const int32_t& ifcId, const int32_t& refreshTime)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << refreshTime;
        call.member("WIFI_StartScan");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_StartScan_Async(const int32_t& ifcId, const int32_t& refreshTime)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << refreshTime;
        call.member("WIFI_StartScan_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_StopScan(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_StopScan");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_StopScan_Async(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_StopScan_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void WIFI_GetConfiguredNetworks(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t, std::string, std::string, uint32_t, uint32_t, bool, std::string, ::DBus::Struct< std::string, std::string, std::string, std::string >, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > > > >& netList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetConfiguredNetworks");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> netList;
    }

    void WIFI_GetConfiguredNetworks_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< uint32_t, uint32_t, std::string, std::string, uint32_t, uint32_t, bool, std::string, ::DBus::Struct< std::string, std::string, std::string, std::string >, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > > > >& netList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetConfiguredNetworks_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> netList;
    }

    void WIFI_GetScanResults(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > > > >& scanList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetScanResults");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> scanList;
    }

    void WIFI_GetScanResults_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > > > >& scanList)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetScanResults_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> scanList;
    }

    void WIFI_GetConnectionInfo(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< uint32_t, int32_t, ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > > >& connInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetConnectionInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> connInfo;
    }

    void WIFI_GetConnectionInfo_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< uint32_t, int32_t, ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > > >& connInfo)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_GetConnectionInfo_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> connInfo;
    }

    int32_t WIFI_SaveConfiguredNetworks(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_SaveConfiguredNetworks");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_SaveConfiguredNetworks_Async(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("WIFI_SaveConfiguredNetworks_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_SelectProfile(const int32_t& profile)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << profile;
        call.member("AP_SelectProfile");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_SelectProfile_Async(const int32_t& profile)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << profile;
        call.member("AP_SelectProfile_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_GetInfo(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("AP_GetInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_GetInfo_Async(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("AP_GetInfo_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DHCP_ServerSetConfig(const int32_t& ifcId, const ::DBus::Struct< std::string, std::string >& dhcpConf)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << dhcpConf;
        call.member("DHCP_ServerSetConfig");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DHCP_ServerSetConfig_Async(const int32_t& ifcId, const ::DBus::Struct< std::string, std::string >& dhcpConf)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << dhcpConf;
        call.member("DHCP_ServerSetConfig_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void DHCP_ServerGetConfig(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::string, std::string >& dhcpConf)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerGetConfig");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> dhcpConf;
    }

    void DHCP_ServerGetConfig_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::string, std::string >& dhcpConf)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerGetConfig_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> dhcpConf;
    }

    int32_t DHCP_ServerStart(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerStart");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DHCP_ServerStart_Async(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerStart_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DHCP_ServerStop(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerStop");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t DHCP_ServerStop_Async(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerStop_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t MonitorInterface(const int32_t& ifcId, const bool& turn)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << turn;
        call.member("MonitorInterface");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t MonitorInterface_Async(const int32_t& ifcId, const bool& turn)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << turn;
        call.member("MonitorInterface_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SOCKET_NewConnection(const ::DBus::Struct< int32_t, std::string, int32_t, int32_t >& settings)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << settings;
        call.member("SOCKET_NewConnection");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SOCKET_NewConnection_Async(const ::DBus::Struct< int32_t, std::string, int32_t, int32_t >& settings)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << settings;
        call.member("SOCKET_NewConnection_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AdvancedRouting(const int32_t& flag)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << flag;
        call.member("AdvancedRouting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AdvancedRouting_Async(const int32_t& flag)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << flag;
        call.member("AdvancedRouting_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ActivateNAT(const int32_t& flag)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << flag;
        call.member("ActivateNAT");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ActivateNAT_Async(const int32_t& flag)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << flag;
        call.member("ActivateNAT_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void DHCP_ServerGetClients(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string > > >& dhcpClients)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerGetClients");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> dhcpClients;
    }

    void DHCP_ServerGetClients_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string > > >& dhcpClients)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("DHCP_ServerGetClients_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> dhcpClients;
    }

    int32_t SetHostname(const std::string& hostname)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hostname;
        call.member("SetHostname");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SetHostname_Async(const std::string& hostname)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hostname;
        call.member("SetHostname_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetHostname(std::string& hostname, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("GetHostname");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> hostname;
        ri >> return_value;
    }

    void GetHostname_Async(std::string& hostname, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("GetHostname_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> hostname;
        ri >> return_value;
    }

    void AP_GetClients(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string > > >& clients)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("AP_GetClients");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> clients;
    }

    void AP_GetClients_Async(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, std::string, std::string > > >& clients)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("AP_GetClients_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> clients;
    }

    int32_t AP_AddToBlacklist(const int32_t& ifcId, const std::string& mac)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << mac;
        call.member("AP_AddToBlacklist");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_AddToBlacklist_Async(const int32_t& ifcId, const std::string& mac)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << mac;
        call.member("AP_AddToBlacklist_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_RemoveFromBlacklist(const int32_t& ifcId, const std::string& mac)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << mac;
        call.member("AP_RemoveFromBlacklist");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_RemoveFromBlacklist_Async(const int32_t& ifcId, const std::string& mac)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << mac;
        call.member("AP_RemoveFromBlacklist_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_ClearBlacklist(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("AP_ClearBlacklist");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_ClearBlacklist_Async(const int32_t& ifcId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("AP_ClearBlacklist_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_SetOpenProfile(const ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >& confAp)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << confAp;
        call.member("AP_SetOpenProfile");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_SetOpenProfile_Async(const ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >& confAp)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << confAp;
        call.member("AP_SetOpenProfile_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_SetWepProfile(const ::DBus::Struct< ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >, ::DBus::Struct< std::string, std::string, std::string, std::string > >& profile)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << profile;
        call.member("AP_SetWepProfile");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_SetWepProfile_Async(const ::DBus::Struct< ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >, ::DBus::Struct< std::string, std::string, std::string, std::string > >& profile)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << profile;
        call.member("AP_SetWepProfile_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_SetWpaProfile(const ::DBus::Struct< ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >, ::DBus::Struct< int32_t, std::string > >& profile)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << profile;
        call.member("AP_SetWpaProfile");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_SetWpaProfile_Async(const ::DBus::Struct< ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >, ::DBus::Struct< int32_t, std::string > >& profile)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << profile;
        call.member("AP_SetWpaProfile_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void AP_GetOpenProfile(::DBus::Struct< std::string, uint32_t, int32_t, int32_t >& profile, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("AP_GetOpenProfile");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> profile;
        ri >> return_value;
    }

    void AP_GetOpenProfile_Async(::DBus::Struct< std::string, uint32_t, int32_t, int32_t >& profile, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("AP_GetOpenProfile_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> profile;
        ri >> return_value;
    }

    void AP_GetWepProfile(::DBus::Struct< ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >, ::DBus::Struct< std::string, std::string, std::string, std::string > >& profile, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("AP_GetWepProfile");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> profile;
        ri >> return_value;
    }

    void AP_GetWepProfile_Async(::DBus::Struct< ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >, ::DBus::Struct< std::string, std::string, std::string, std::string > >& profile, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("AP_GetWepProfile_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> profile;
        ri >> return_value;
    }

    void AP_GetWpaProfile(::DBus::Struct< ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >, ::DBus::Struct< int32_t, std::string > >& profile, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("AP_GetWpaProfile");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> profile;
        ri >> return_value;
    }

    void AP_GetWpaProfile_Async(::DBus::Struct< ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >, ::DBus::Struct< int32_t, std::string > >& profile, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("AP_GetWpaProfile_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> profile;
        ri >> return_value;
    }

    void AP_GetSelectedProfile(int32_t& selected, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("AP_GetSelectedProfile");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> selected;
        ri >> return_value;
    }

    void AP_GetSelectedProfile_Async(int32_t& selected, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("AP_GetSelectedProfile_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> selected;
        ri >> return_value;
    }

    int32_t AP_SetHiddenNetwork(const int32_t& flag)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << flag;
        call.member("AP_SetHiddenNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AP_SetHiddenNetwork_Async(const int32_t& flag)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << flag;
        call.member("AP_SetHiddenNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void AP_GetHiddenNetwork(int32_t& flag, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("AP_GetHiddenNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> flag;
        ri >> return_value;
    }

    void AP_GetHiddenNetwork_Async(int32_t& flag, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        call.member("AP_GetHiddenNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> flag;
        ri >> return_value;
    }

    void WIFI_GetScanResultsByMatch(const int32_t& ifcId, const int32_t& matchType, const std::string& matchValue, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > > > >& scanList, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << matchType;
        wi << matchValue;
        call.member("WIFI_GetScanResultsByMatch");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> scanList;
        ri >> return_value;
    }

    void WIFI_GetScanResultsByMatch_Async(const int32_t& ifcId, const int32_t& matchType, const std::string& matchValue, ::DBus::Struct< std::vector< ::DBus::Struct< std::string, std::string, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, ::DBus::Struct< int32_t, int32_t, int32_t, int32_t, int32_t > > > >& scanList, int32_t& return_value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << matchType;
        wi << matchValue;
        call.member("WIFI_GetScanResultsByMatch_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> scanList;
        ri >> return_value;
    }

    int32_t WIFI_EnableNetwork(const int32_t& ifcId, const int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        call.member("WIFI_EnableNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_EnableNetwork_Async(const int32_t& ifcId, const int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        call.member("WIFI_EnableNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_DisableNetwork(const int32_t& ifcId, const int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        call.member("WIFI_DisableNetwork");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_DisableNetwork_Async(const int32_t& ifcId, const int32_t& networkId)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << networkId;
        call.member("WIFI_DisableNetwork_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_MonitorStrength(const int32_t& ifcId, const bool& turn, const uint32_t& rate)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << turn;
        wi << rate;
        call.member("WIFI_MonitorStrength");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t WIFI_MonitorStrength_Async(const int32_t& ifcId, const bool& turn, const uint32_t& rate)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        wi << turn;
        wi << rate;
        call.member("WIFI_MonitorStrength_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void Get_ModemParams(const int32_t& mId, int32_t& return_value, ::DBus::Struct< int32_t, int32_t, std::string, std::string, std::string, std::string, std::string, std::string, std::string, int32_t, bool, std::vector< std::string > >& params)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mId;
        call.member("Get_ModemParams");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> params;
    }

    void Get_ModemParams_Async(const int32_t& mId, int32_t& return_value, ::DBus::Struct< int32_t, int32_t, std::string, std::string, std::string, std::string, std::string, std::string, std::string, int32_t, bool, std::vector< std::string > >& params)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mId;
        call.member("Get_ModemParams_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> params;
    }

    int32_t Set_ModemParams(const int32_t& mId, const ::DBus::Struct< std::string, std::string, std::string, std::string, std::string >& params, const int32_t& updateMask)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mId;
        wi << params;
        wi << updateMask;
        call.member("Set_ModemParams");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Set_ModemParams_Async(const int32_t& mId, const ::DBus::Struct< std::string, std::string, std::string, std::string, std::string >& params, const int32_t& updateMask)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mId;
        wi << params;
        wi << updateMask;
        call.member("Set_ModemParams_Async");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t AddModem(const std::string& modemId, const std::string& vendor, const ::DBus::Struct< std::vector< std::string > >& ports)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << modemId;
        wi << vendor;
        wi << ports;
        call.member("AddModem");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t RemoveModem(const std::string& modemId, const std::string& vendor)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << modemId;
        wi << vendor;
        call.member("RemoveModem");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Debug_ModemDump()
    {
        ::DBus::CallMessage call;
        call.member("Debug_ModemDump");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void Debug_ListDump()
    {
        ::DBus::CallMessage call;
        call.member("Debug_ListDump");
        ::DBus::Message ret = invoke_method (call);
    }

    void AP_GetBlacklist(const int32_t& ifcId, int32_t& return_value, ::DBus::Struct< std::vector< std::string > >& list)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ifcId;
        call.member("AP_GetBlacklist");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> return_value;
        ri >> list;
    }


public:

    /* signal handlers for this interface
     */
    virtual void InterfaceArrive(const int32_t& ifcId) = 0;
    virtual void InterfaceDeparture(const int32_t& ifcId) = 0;
    virtual void InterfaceChanged(const int32_t& ifcId, const int32_t& changeMask) = 0;
    virtual void InterfaceConnecting(const int32_t& ifcId) = 0;
    virtual void InterfaceDisconnecting(const int32_t& ifcId) = 0;
    virtual void InterfaceConnected(const int32_t& ifcId) = 0;
    virtual void InterfaceDisconnected(const int32_t& ifcId, const int32_t& reason) = 0;
    virtual void WifiScanResultsReady(const int32_t& ifcId) = 0;
    virtual void ConnectResult(const int32_t& ifcId, const int32_t& reqId, const int32_t& result) = 0;
    virtual void InterfaceWiFiModeChanged(const int32_t& ifcId, const int32_t& mode) = 0;
    virtual void WiFiAPClientConnected(const int32_t& ifcId, const std::string& bssid) = 0;
    virtual void WiFiAPClientDisconnected(const int32_t& ifcId, const std::string& bssid) = 0;
    virtual void APOpenInfo(const int32_t& ifcId, const ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >& config) = 0;
    virtual void APWepInfo(const int32_t& ifcId, const ::DBus::Struct< ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >, ::DBus::Struct< std::string, std::string, std::string, std::string > >& config) = 0;
    virtual void APWpaInfo(const int32_t& ifcId, const ::DBus::Struct< ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >, ::DBus::Struct< int32_t, std::string > >& config) = 0;
    virtual void InterfaceMonitorData(const int32_t& ifcId, const ::DBus::Struct< uint64_t, uint64_t >& statistics) = 0;
    virtual void WifiSignalStrength(const int32_t& ifcId, const uint32_t& strength) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _InterfaceArrive_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        InterfaceArrive(ifcId);
    }
    void _InterfaceDeparture_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        InterfaceDeparture(ifcId);
    }
    void _InterfaceChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        int32_t changeMask;
        ri >> changeMask;
        InterfaceChanged(ifcId, changeMask);
    }
    void _InterfaceConnecting_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        InterfaceConnecting(ifcId);
    }
    void _InterfaceDisconnecting_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        InterfaceDisconnecting(ifcId);
    }
    void _InterfaceConnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        InterfaceConnected(ifcId);
    }
    void _InterfaceDisconnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        int32_t reason;
        ri >> reason;
        InterfaceDisconnected(ifcId, reason);
    }
    void _WifiScanResultsReady_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        WifiScanResultsReady(ifcId);
    }
    void _ConnectResult_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        int32_t reqId;
        ri >> reqId;
        int32_t result;
        ri >> result;
        ConnectResult(ifcId, reqId, result);
    }
    void _InterfaceWiFiModeChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        int32_t mode;
        ri >> mode;
        InterfaceWiFiModeChanged(ifcId, mode);
    }
    void _WiFiAPClientConnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        std::string bssid;
        ri >> bssid;
        WiFiAPClientConnected(ifcId, bssid);
    }
    void _WiFiAPClientDisconnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        std::string bssid;
        ri >> bssid;
        WiFiAPClientDisconnected(ifcId, bssid);
    }
    void _APOpenInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        ::DBus::Struct< std::string, uint32_t, int32_t, int32_t > config;
        ri >> config;
        APOpenInfo(ifcId, config);
    }
    void _APWepInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        ::DBus::Struct< ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >, ::DBus::Struct< std::string, std::string, std::string, std::string > > config;
        ri >> config;
        APWepInfo(ifcId, config);
    }
    void _APWpaInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        ::DBus::Struct< ::DBus::Struct< std::string, uint32_t, int32_t, int32_t >, ::DBus::Struct< int32_t, std::string > > config;
        ri >> config;
        APWpaInfo(ifcId, config);
    }
    void _InterfaceMonitorData_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        ::DBus::Struct< uint64_t, uint64_t > statistics;
        ri >> statistics;
        InterfaceMonitorData(ifcId, statistics);
    }
    void _WifiSignalStrength_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ifcId;
        ri >> ifcId;
        uint32_t strength;
        ri >> strength;
        WifiSignalStrength(ifcId, strength);
    }
};

} } 
namespace com {
namespace jci {

class radio_proxy
: public ::DBus::InterfaceProxy
{
public:

    radio_proxy()
    : ::DBus::InterfaceProxy("com.jci.radio")
    {
        connect_signal(radio_proxy, Bose_Status, _Bose_Status_stub);
        connect_signal(radio_proxy, TAU_Connection_status, _TAU_Connection_status_stub);
        connect_signal(radio_proxy, Tuner_mode_status, _Tuner_mode_status_stub);
        connect_signal(radio_proxy, Tuner_status, _Tuner_status_stub);
        connect_signal(radio_proxy, Station_list_status, _Station_list_status_stub);
        connect_signal(radio_proxy, Auto_M_status, _Auto_M_status_stub);
        connect_signal(radio_proxy, Area_Preset_status, _Area_Preset_status_stub);
        connect_signal(radio_proxy, HD_setting_status, _HD_setting_status_stub);
        connect_signal(radio_proxy, TA_setting_status, _TA_setting_status_stub);
        connect_signal(radio_proxy, HAR_setting_status, _HAR_setting_status_stub);
        connect_signal(radio_proxy, AF_setting_status, _AF_setting_status_stub);
        connect_signal(radio_proxy, RegionLock_setting_status, _RegionLock_setting_status_stub);
        connect_signal(radio_proxy, Current_genre_status, _Current_genre_status_stub);
        connect_signal(radio_proxy, Metadata_status, _Metadata_status_stub);
        connect_signal(radio_proxy, Setting_status, _Setting_status_stub);
        connect_signal(radio_proxy, Pty_response, _Pty_response_stub);
        connect_signal(radio_proxy, HD_tuner_status, _HD_tuner_status_stub);
        connect_signal(radio_proxy, HAR_status, _HAR_status_stub);
        connect_signal(radio_proxy, Traffic_alert, _Traffic_alert_stub);
        connect_signal(radio_proxy, Metadata_Artisticinfo, _Metadata_Artisticinfo_stub);
        connect_signal(radio_proxy, Metadata_change_notification, _Metadata_change_notification_stub);
        connect_signal(radio_proxy, Japan_Region_specific_notification, _Japan_Region_specific_notification_stub);
        connect_signal(radio_proxy, Region_specific_notification, _Region_specific_notification_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t Mode_Req(const int32_t& mode, const int32_t& band)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mode;
        wi << band;
        call.member("Mode_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Japan_Region_specific_Tau_type_info_Req()
    {
        ::DBus::CallMessage call;
        call.member("Japan_Region_specific_Tau_type_info_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Tune_Req(const int32_t& direction, const int32_t& steps)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << direction;
        wi << steps;
        call.member("Tune_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Scan_Req(const int32_t& request)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        call.member("Scan_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Seek_Req(const int32_t& request, const int32_t& direction, const bool& genreseek_screen)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << request;
        wi << direction;
        wi << genreseek_screen;
        call.member("Seek_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t ForceSeek_Req(const int32_t& forceSeek_Type, const int32_t& direction)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << forceSeek_Type;
        wi << direction;
        call.member("ForceSeek_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Tune_Direct_Req(const ::DBus::Struct< double, uint16_t, int32_t >& tune_direct)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << tune_direct;
        call.member("Tune_Direct_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Favorite_Mode_Req(const int32_t& mode, const int32_t& band, const ::DBus::Struct< double, uint16_t, int32_t >& tune_direct)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << mode;
        wi << band;
        wi << tune_direct;
        call.member("Favorite_Mode_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Station_List_Req(const int32_t& list_req_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << list_req_type;
        call.member("Station_List_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Auto_M_Req(const int32_t& auto_M_req_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << auto_M_req_type;
        call.member("Auto_M_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Area_Preset_Req()
    {
        ::DBus::CallMessage call;
        call.member("Area_Preset_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_HDsetting_Req()
    {
        ::DBus::CallMessage call;
        call.member("Get_HDsetting_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_TAsetting_Req()
    {
        ::DBus::CallMessage call;
        call.member("Get_TAsetting_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_AFsetting_Req()
    {
        ::DBus::CallMessage call;
        call.member("Get_AFsetting_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_RegionLockSetting_Req()
    {
        ::DBus::CallMessage call;
        call.member("Get_RegionLockSetting_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_HARfreqSetting_Req()
    {
        ::DBus::CallMessage call;
        call.member("Get_HARfreqSetting_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_CurrentGenre_Req()
    {
        ::DBus::CallMessage call;
        call.member("Get_CurrentGenre_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Pty_Req(const int32_t& pty_req_type)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << pty_req_type;
        call.member("Pty_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Setting_Change_Req(const int32_t& setting_type, const int32_t& setting_mode)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << setting_type;
        wi << setting_mode;
        call.member("Setting_Change_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t HD_ChUp_Req(const int32_t& hd_ChUp_req)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << hd_ChUp_req;
        call.member("HD_ChUp_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t HAR_Freq_change(const int32_t& frequency)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << frequency;
        call.member("HAR_Freq_change");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Cancel_Traffic_alert()
    {
        ::DBus::CallMessage call;
        call.member("Cancel_Traffic_alert");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_TAU_Connection_status()
    {
        ::DBus::CallMessage call;
        call.member("Get_TAU_Connection_status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Fav_Seek_Req(const int32_t& fav_seek_dir, const double& current_freq)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << fav_seek_dir;
        wi << current_freq;
        call.member("Fav_Seek_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_Tuner_status()
    {
        ::DBus::CallMessage call;
        call.member("Get_Tuner_status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_HDTuner_status()
    {
        ::DBus::CallMessage call;
        call.member("Get_HDTuner_status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Get_Mode_status()
    {
        ::DBus::CallMessage call;
        call.member("Get_Mode_status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Region_specific_info_Req()
    {
        ::DBus::CallMessage call;
        call.member("Region_specific_info_Req");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    uint8_t Get_Bose_Status()
    {
        ::DBus::CallMessage call;
        call.member("Get_Bose_Status");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    int32_t Factory_Reset_Setting()
    {
        ::DBus::CallMessage call;
        call.member("Factory_Reset_Setting");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void Bose_Status(const uint8_t& boseStatus) = 0;
    virtual void TAU_Connection_status(const int32_t& tau_status) = 0;
    virtual void Tuner_mode_status(const ::DBus::Struct< int32_t, int32_t >& tuner_mode_status) = 0;
    virtual void Tuner_status(const ::DBus::Struct< int32_t, int32_t, double, std::vector< uint8_t >, int32_t, std::vector< uint8_t >, std::vector< uint8_t > >& tuner_status) = 0;
    virtual void Station_list_status(const int32_t& list_status) = 0;
    virtual void Auto_M_status(const int32_t& auto_m_status) = 0;
    virtual void Area_Preset_status(const int32_t& area_preset_status) = 0;
    virtual void HD_setting_status(const int32_t& hd_status) = 0;
    virtual void TA_setting_status(const int32_t& ta_status) = 0;
    virtual void HAR_setting_status(const int32_t& har_status) = 0;
    virtual void AF_setting_status(const int32_t& af_status) = 0;
    virtual void RegionLock_setting_status(const int32_t& region_lock_status) = 0;
    virtual void Current_genre_status(const int32_t& current_genre_status) = 0;
    virtual void Metadata_status(const int32_t& metadata_status) = 0;
    virtual void Setting_status(const int32_t& setting_mode_status, const int32_t& setting_type) = 0;
    virtual void Pty_response(const int32_t& pty_received, const int32_t& pty_requested) = 0;
    virtual void HD_tuner_status(const ::DBus::Struct< int32_t, int32_t, int32_t, bool, bool, std::vector< bool > >& hd_tuner_status) = 0;
    virtual void HAR_status(const ::DBus::Struct< int32_t, int32_t >& har_transmission_status) = 0;
    virtual void Traffic_alert(const int32_t& traffic_alert) = 0;
    virtual void Metadata_Artisticinfo(const int32_t& artistic_info) = 0;
    virtual void Metadata_change_notification(const ::DBus::Struct< bool, bool, bool, bool, bool, bool, bool >& metadata_change) = 0;
    virtual void Japan_Region_specific_notification(const int32_t& japan_Region_info) = 0;
    virtual void Region_specific_notification(const int32_t& region_info) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Bose_Status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t boseStatus;
        ri >> boseStatus;
        Bose_Status(boseStatus);
    }
    void _TAU_Connection_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t tau_status;
        ri >> tau_status;
        TAU_Connection_status(tau_status);
    }
    void _Tuner_mode_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t > tuner_mode_status;
        ri >> tuner_mode_status;
        Tuner_mode_status(tuner_mode_status);
    }
    void _Tuner_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t, double, std::vector< uint8_t >, int32_t, std::vector< uint8_t >, std::vector< uint8_t > > tuner_status;
        ri >> tuner_status;
        Tuner_status(tuner_status);
    }
    void _Station_list_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t list_status;
        ri >> list_status;
        Station_list_status(list_status);
    }
    void _Auto_M_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t auto_m_status;
        ri >> auto_m_status;
        Auto_M_status(auto_m_status);
    }
    void _Area_Preset_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t area_preset_status;
        ri >> area_preset_status;
        Area_Preset_status(area_preset_status);
    }
    void _HD_setting_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t hd_status;
        ri >> hd_status;
        HD_setting_status(hd_status);
    }
    void _TA_setting_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t ta_status;
        ri >> ta_status;
        TA_setting_status(ta_status);
    }
    void _HAR_setting_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t har_status;
        ri >> har_status;
        HAR_setting_status(har_status);
    }
    void _AF_setting_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t af_status;
        ri >> af_status;
        AF_setting_status(af_status);
    }
    void _RegionLock_setting_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t region_lock_status;
        ri >> region_lock_status;
        RegionLock_setting_status(region_lock_status);
    }
    void _Current_genre_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t current_genre_status;
        ri >> current_genre_status;
        Current_genre_status(current_genre_status);
    }
    void _Metadata_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t metadata_status;
        ri >> metadata_status;
        Metadata_status(metadata_status);
    }
    void _Setting_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t setting_mode_status;
        ri >> setting_mode_status;
        int32_t setting_type;
        ri >> setting_type;
        Setting_status(setting_mode_status, setting_type);
    }
    void _Pty_response_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t pty_received;
        ri >> pty_received;
        int32_t pty_requested;
        ri >> pty_requested;
        Pty_response(pty_received, pty_requested);
    }
    void _HD_tuner_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t, int32_t, bool, bool, std::vector< bool > > hd_tuner_status;
        ri >> hd_tuner_status;
        HD_tuner_status(hd_tuner_status);
    }
    void _HAR_status_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t > har_transmission_status;
        ri >> har_transmission_status;
        HAR_status(har_transmission_status);
    }
    void _Traffic_alert_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t traffic_alert;
        ri >> traffic_alert;
        Traffic_alert(traffic_alert);
    }
    void _Metadata_Artisticinfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t artistic_info;
        ri >> artistic_info;
        Metadata_Artisticinfo(artistic_info);
    }
    void _Metadata_change_notification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< bool, bool, bool, bool, bool, bool, bool > metadata_change;
        ri >> metadata_change;
        Metadata_change_notification(metadata_change);
    }
    void _Japan_Region_specific_notification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t japan_Region_info;
        ri >> japan_Region_info;
        Japan_Region_specific_notification(japan_Region_info);
    }
    void _Region_specific_notification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t region_info;
        ri >> region_info;
        Region_specific_notification(region_info);
    }
};

} } 
namespace com {
namespace jci {
namespace cpp {
namespace power {

class Interface_proxy
: public ::DBus::InterfaceProxy
{
public:

    Interface_proxy()
    : ::DBus::InterfaceProxy("com.jci.cpp.power.Interface")
    {
        connect_signal(Interface_proxy, NotifyAccChange, _NotifyAccChange_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void OpenConnection(int32_t& status, uint32_t& unique_connection_id)
    {
        ::DBus::CallMessage call;
        call.member("OpenConnection");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> status;
        ri >> unique_connection_id;
    }

    int32_t CloseConnection()
    {
        ::DBus::CallMessage call;
        call.member("CloseConnection");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SafeShutDown()
    {
        ::DBus::CallMessage call;
        call.member("SafeShutDown");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t SafeReboot()
    {
        ::DBus::CallMessage call;
        call.member("SafeReboot");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t FactoryReset()
    {
        ::DBus::CallMessage call;
        call.member("FactoryReset");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void GetCurrentAccStatus(int32_t& acc_state, int32_t& status)
    {
        ::DBus::CallMessage call;
        call.member("GetCurrentAccStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> acc_state;
        ri >> status;
    }


public:

    /* signal handlers for this interface
     */
    virtual void NotifyAccChange(const int32_t& acc_state) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _NotifyAccChange_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t acc_state;
        ri >> acc_state;
        NotifyAccChange(acc_state);
    }
};

} } } } 
namespace com {
namespace jci {
namespace blm {
namespace msg {

class Interface_proxy
: public ::DBus::InterfaceProxy
{
public:

    Interface_proxy()
    : ::DBus::InterfaceProxy("com.jci.blm.msg.Interface")
    {
        connect_signal(Interface_proxy, AutoDownloadChanged, _AutoDownloadChanged_stub);
        connect_signal(Interface_proxy, NotifyChanged, _NotifyChanged_stub);
        connect_signal(Interface_proxy, PresetMessageListChanged, _PresetMessageListChanged_stub);
        connect_signal(Interface_proxy, NewMessage, _NewMessage_stub);
        connect_signal(Interface_proxy, NewMessagesInfo, _NewMessagesInfo_stub);
        connect_signal(Interface_proxy, Notification, _Notification_stub);
        connect_signal(Interface_proxy, DownloadCompleted, _DownloadCompleted_stub);
        connect_signal(Interface_proxy, MessagePlaybackStatusChanged, _MessagePlaybackStatusChanged_stub);
        connect_signal(Interface_proxy, InstancesDisconnected, _InstancesDisconnected_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Connect(const uint32_t& context_in, const int32_t& client_type_in, const uint32_t& callbacks_in, uint32_t& context_out, int32_t& client_type_out, uint32_t& callbacks_out, int32_t& status, uint32_t& connection)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << context_in;
        wi << client_type_in;
        wi << callbacks_in;
        call.member("Connect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> context_out;
        ri >> client_type_out;
        ri >> callbacks_out;
        ri >> status;
        ri >> connection;
    }

    void Disconnect(const uint32_t& context_in, const uint32_t& connection_in, uint32_t& context_out, uint32_t& connection_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << context_in;
        wi << connection_in;
        call.member("Disconnect");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> context_out;
        ri >> connection_out;
        ri >> status;
    }

    void GetInstanceList(const uint32_t& connection_in, const uint32_t& context_in, uint32_t& connection_out, uint32_t& context_out, int32_t& status, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint16_t, std::string > > >& instance_list)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        call.member("GetInstanceList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
        ri >> instance_list;
    }

    void GetMessageList(const uint32_t& connection_in, const uint32_t& context_in, const ::DBus::Struct< uint16_t, ::DBus::Struct< uint32_t, uint32_t, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, uint32_t, std::string > > > > >& filter, const int32_t& request_type, uint32_t& connection_out, uint32_t& context_out, int32_t& status, ::DBus::Struct< bool, bool, bool, uint32_t, uint32_t, std::vector< ::DBus::Struct< int32_t, uint64_t, int32_t, uint32_t, std::string, std::string, std::string > > >& message_list)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << filter;
        wi << request_type;
        call.member("GetMessageList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
        ri >> message_list;
    }

    void GetNewMessagesList(const uint32_t& connection_in, const uint32_t& context_in, const int32_t& request_type, uint32_t& connection_out, uint32_t& context_out, int32_t& status, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, uint64_t, int32_t, uint32_t, std::string, std::string, std::string > > >& message_list)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << request_type;
        call.member("GetNewMessagesList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
        ri >> message_list;
    }

    void GetNewMessagesInfo(const uint32_t& connection_in, const uint32_t& context_in, uint32_t& connection_out, uint32_t& context_out, int32_t& status, ::DBus::Struct< ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, uint32_t, bool > > > >& info)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        call.member("GetNewMessagesInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
        ri >> info;
    }

    void GetMessage(const uint32_t& connection_in, const uint32_t& context_in, const uint64_t& message_id, uint32_t& connection_out, uint32_t& context_out, int32_t& status, ::DBus::Struct< ::DBus::Struct< uint16_t, std::string >, uint64_t, int32_t, uint32_t, ::DBus::Struct< int32_t, std::string, std::string, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, uint32_t, std::string > > > >, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, std::string, std::string, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, uint32_t, std::string > > > > > >, std::string, std::string, uint64_t, uint64_t, bool, uint32_t >& message)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << message_id;
        call.member("GetMessage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
        ri >> message;
    }

    void SetMessageStatus(const uint32_t& connection_in, const uint32_t& context_in, const uint64_t& message_id, const int32_t& message_status, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << message_id;
        wi << message_status;
        call.member("SetMessageStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void DeleteMessage(const uint32_t& connection_in, const uint32_t& context_in, const uint64_t& message_id_in, uint32_t& connection_out, uint32_t& context_out, int32_t& status, uint64_t& message_id_out)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << message_id_in;
        call.member("DeleteMessage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
        ri >> message_id_out;
    }

    void DeleteSavedMessage(const uint32_t& connection_in, const uint32_t& context_in, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        call.member("DeleteSavedMessage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void GetOutgoingMessage(const uint32_t& connection_in, const uint32_t& context_in, const uint64_t& message_id, const int32_t& send_type, uint32_t& connection_out, uint32_t& context_out, int32_t& status, ::DBus::Struct< std::string, std::string, ::DBus::Struct< uint16_t, std::string >, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, std::string, std::string, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, uint32_t, std::string > > > > > > >& message)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << message_id;
        wi << send_type;
        call.member("GetOutgoingMessage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
        ri >> message;
    }

    void GetSavedMessage(const uint32_t& connection_in, const uint32_t& context_in, uint32_t& connection_out, uint32_t& context_out, int32_t& status, ::DBus::Struct< std::string, std::string, ::DBus::Struct< uint16_t, std::string >, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, std::string, std::string, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, uint32_t, std::string > > > > > > >& message)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        call.member("GetSavedMessage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
        ri >> message;
    }

    void SendMessage(const uint32_t& connection_in, const uint32_t& context_in, const ::DBus::Struct< std::string, std::string, ::DBus::Struct< uint16_t, std::string >, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, std::string, std::string, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, uint32_t, std::string > > > > > > >& message, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << message;
        call.member("SendMessage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void SaveMessage(const uint32_t& connection_in, const uint32_t& context_in, const ::DBus::Struct< std::string, std::string, ::DBus::Struct< uint16_t, std::string >, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, std::string, std::string, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, uint32_t, std::string > > > > > > >& message, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << message;
        call.member("SaveMessage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void GetAutoDownload(const uint32_t& connection_in, const uint32_t& context_in, const int32_t& client_type_in, const int32_t& type, uint32_t& connection_out, uint32_t& context_out, int32_t& client_type_out, int32_t& status, bool& enabled)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << client_type_in;
        wi << type;
        call.member("GetAutoDownload");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> client_type_out;
        ri >> status;
        ri >> enabled;
    }

    void SetAutoDownload(const uint32_t& connection_in, const uint32_t& context_in, const int32_t& client_type_in, const bool& enabled, uint32_t& connection_out, uint32_t& context_out, int32_t& client_type_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << client_type_in;
        wi << enabled;
        call.member("SetAutoDownload");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> client_type_out;
        ri >> status;
    }

    void GetNotify(const uint32_t& connection_in, const uint32_t& context_in, const int32_t& client_type_in, const int32_t& type, uint32_t& connection_out, uint32_t& context_out, int32_t& client_type_out, int32_t& status, bool& enabled)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << client_type_in;
        wi << type;
        call.member("GetNotify");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> client_type_out;
        ri >> status;
        ri >> enabled;
    }

    void SetNotify(const uint32_t& connection_in, const uint32_t& context_in, const int32_t& client_type_in, const bool& enabled, uint32_t& connection_out, uint32_t& context_out, int32_t& client_type_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << client_type_in;
        wi << enabled;
        call.member("SetNotify");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> client_type_out;
        ri >> status;
    }

    void StartMessagePlayback(const uint32_t& connection_in, const uint32_t& context_in, const uint64_t& message_id, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << message_id;
        call.member("StartMessagePlayback");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void StartOutgoingMessagePlayback(const uint32_t& connection_in, const uint32_t& context_in, const ::DBus::Struct< std::string, std::string, ::DBus::Struct< uint16_t, std::string >, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, std::string, std::string, ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, uint32_t, std::string > > > > > > >& message, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << message;
        call.member("StartOutgoingMessagePlayback");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void PauseMessagePlayback(const uint32_t& connection_in, const uint32_t& context_in, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        call.member("PauseMessagePlayback");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void ResumeMessagePlayback(const uint32_t& connection_in, const uint32_t& context_in, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        call.member("ResumeMessagePlayback");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void StopMessagePlayback(const uint32_t& connection_in, const uint32_t& context_in, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        call.member("StopMessagePlayback");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void CancelPendingMessagePlayback(const uint32_t& connection_in, const uint32_t& context_in, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        call.member("CancelPendingMessagePlayback");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void AddPresetMessage(const uint32_t& connection_in, const uint32_t& context_in, const std::string& message, const uint32_t& type, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << message;
        wi << type;
        call.member("AddPresetMessage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void DeletePresetMessage(const uint32_t& connection_in, const uint32_t& context_in, const uint32_t& message_id, const uint32_t& type, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << message_id;
        wi << type;
        call.member("DeletePresetMessage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void MovePresetMessage(const uint32_t& connection_in, const uint32_t& context_in, const uint32_t& message_id_from, const uint32_t& message_id_to, const uint32_t& type, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << message_id_from;
        wi << message_id_to;
        wi << type;
        call.member("MovePresetMessage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void EditPresetMessage(const uint32_t& connection_in, const uint32_t& context_in, const uint32_t& message_id, const std::string& message, const uint32_t& type, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << message_id;
        wi << message;
        wi << type;
        call.member("EditPresetMessage");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void GetPresetMessageList(const uint32_t& connection_in, const uint32_t& context_in, const uint32_t& type, uint32_t& connection_out, uint32_t& context_out, int32_t& status, ::DBus::Struct< uint32_t, std::vector< std::string > >& list)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << type;
        call.member("GetPresetMessageList");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
        ri >> list;
    }

    void ApplySettings(const uint32_t& connection_in, const uint32_t& context_in, uint32_t& connection_out, uint32_t& context_out, int32_t& status)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        call.member("ApplySettings");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
    }

    void ResetSettings(const uint32_t& connection_in, const uint32_t& context_in, const uint32_t& settings_in, uint32_t& connection_out, uint32_t& context_out, int32_t& status, uint32_t& settings_out)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << connection_in;
        wi << context_in;
        wi << settings_in;
        call.member("ResetSettings");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> connection_out;
        ri >> context_out;
        ri >> status;
        ri >> settings_out;
    }


public:

    /* signal handlers for this interface
     */
    virtual void AutoDownloadChanged(const int32_t& client_type, const bool& enabled) = 0;
    virtual void NotifyChanged(const int32_t& client_type, const bool& enabled) = 0;
    virtual void PresetMessageListChanged() = 0;
    virtual void NewMessage(const uint32_t& connection, const ::DBus::Struct< int32_t, uint64_t, std::string, std::string >& newMessage) = 0;
    virtual void NewMessagesInfo(const uint32_t& connection, const ::DBus::Struct< ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, uint32_t, bool > > > >& info) = 0;
    virtual void Notification(const uint32_t& connection, const int32_t& type) = 0;
    virtual void DownloadCompleted(const uint32_t& connection, const int32_t& status, const ::DBus::Struct< bool, bool, bool, uint32_t, uint32_t, std::vector< ::DBus::Struct< int32_t, uint64_t, int32_t, uint32_t, std::string, std::string, std::string > > >& message_list) = 0;
    virtual void MessagePlaybackStatusChanged(const uint32_t& connection, const int32_t& status, const uint64_t& message_id) = 0;
    virtual void InstancesDisconnected(const uint32_t& connection, const ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint16_t, std::string > > >& instance_list) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _AutoDownloadChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t client_type;
        ri >> client_type;
        bool enabled;
        ri >> enabled;
        AutoDownloadChanged(client_type, enabled);
    }
    void _NotifyChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t client_type;
        ri >> client_type;
        bool enabled;
        ri >> enabled;
        NotifyChanged(client_type, enabled);
    }
    void _PresetMessageListChanged_stub(const ::DBus::SignalMessage &sig)
    {
        PresetMessageListChanged();
    }
    void _NewMessage_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t connection;
        ri >> connection;
        ::DBus::Struct< int32_t, uint64_t, std::string, std::string > newMessage;
        ri >> newMessage;
        NewMessage(connection, newMessage);
    }
    void _NewMessagesInfo_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t connection;
        ri >> connection;
        ::DBus::Struct< ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< int32_t, uint32_t, bool > > > > info;
        ri >> info;
        NewMessagesInfo(connection, info);
    }
    void _Notification_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t connection;
        ri >> connection;
        int32_t type;
        ri >> type;
        Notification(connection, type);
    }
    void _DownloadCompleted_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t connection;
        ri >> connection;
        int32_t status;
        ri >> status;
        ::DBus::Struct< bool, bool, bool, uint32_t, uint32_t, std::vector< ::DBus::Struct< int32_t, uint64_t, int32_t, uint32_t, std::string, std::string, std::string > > > message_list;
        ri >> message_list;
        DownloadCompleted(connection, status, message_list);
    }
    void _MessagePlaybackStatusChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t connection;
        ri >> connection;
        int32_t status;
        ri >> status;
        uint64_t message_id;
        ri >> message_id;
        MessagePlaybackStatusChanged(connection, status, message_id);
    }
    void _InstancesDisconnected_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t connection;
        ri >> connection;
        ::DBus::Struct< uint32_t, std::vector< ::DBus::Struct< uint16_t, std::string > > > instance_list;
        ri >> instance_list;
        InstancesDisconnected(connection, instance_list);
    }
};

} } } } 
namespace com {
namespace jci {

class xm_mgr_proxy
: public ::DBus::InterfaceProxy
{
public:

    xm_mgr_proxy()
    : ::DBus::InterfaceProxy("com.jci.xm_mgr")
    {
        connect_signal(xm_mgr_proxy, SubscriptionStatus, _SubscriptionStatus_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    int32_t GetSubscriptionStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetSubscriptionStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    int32_t GetXMInstalled()
    {
        ::DBus::CallMessage call;
        call.member("GetXMInstalled");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void SubscriptionStatus(const ::DBus::Struct< int32_t, int32_t, int32_t, std::string, std::string >& subscription_state) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _SubscriptionStatus_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Struct< int32_t, int32_t, int32_t, std::string, std::string > subscription_state;
        ri >> subscription_state;
        SubscriptionStatus(subscription_state);
    }
};

} } 
#endif //__dbusxx__generated_cmu_h__PROXY_MARSHAL_H
